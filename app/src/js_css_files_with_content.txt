=========================
File: ./App.css
=========================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

/* Add this to your main CSS file, e.g., App.css */
.bg-pattern {
  background-image: url('https://www.toptal.com/designers/subtlepatterns/uploads/double-bubble.png');
  background-repeat: repeat;
  background-position: center;
  background-size: cover;
}

/* For mobile bottom navigation bar */
@media (max-width: 1024px) {
  .mobile-nav-bar {
    display: flex; /* This makes sure it is visible only on mobile */
  }
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
-e 


=========================
File: ./App.js
=========================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import WalletConnectionProvider from './components/WalletProvider';
import Header from './components/Header';
import MobileNavBar from './components/MobileNavBar';
import SwapCard from './components/SwapCard';
import LiquidityInfo from './components/LiquidityInfo/LiquidityInfo';
import PoolsPage from './components/Pools/PoolsPage'; // Import PoolsPage
import { Connection } from '@solana/web3.js';

function App() {
    const connection = new Connection('https://api.mainnet-beta.solana.com');

    return (
        <WalletConnectionProvider>
            <Router>
                <div className="App">
                    {/* Header */}
                    <Header />
                    {/* Mobile Header */}
                    <MobileNavBar />
                    
                    {/* Main Content */}
                    <main className="p-4 flex flex-col items-center bg-pattern bg-cover bg-center gap-y-6">
                        <Routes>
                            {/* Route for Swap Page */}
                            <Route
                                path="/"
                                element={
                                    <>
                                        <SwapCard />
                                        <LiquidityInfo connection={connection} />
                                    </>
                                }
                            />
                            {/* Route for Pools Page */}
                            <Route path="/pools" element={<PoolsPage connection={connection} />} />
                        </Routes>
                    </main>
                </div>
            </Router>
        </WalletConnectionProvider>
    );
}

export default App;
-e 


=========================
File: ./App.test.js
=========================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
-e 


=========================
File: ./components/AdvancedSettings/AdvancedSettings.js
=========================
import React, { useState } from 'react';
import PropTypes from 'prop-types';

const AdvancedSettings = ({ slippage, onUpdateSlippage, onClose }) => {
    const [customSlippage, setCustomSlippage] = useState('');

    const handleCustomInput = (e) => {
        const value = parseFloat(e.target.value);
        if (!isNaN(value) && value >= 0) {
            setCustomSlippage(value);
        } else {
            setCustomSlippage('');
        }
    };

    const handleApplyCustomSlippage = () => {
        if (customSlippage) {
            onUpdateSlippage(customSlippage);
        }
        onClose(); // Close the modal
    };

    return (
        <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black/60"
            onClick={onClose} // Close modal when clicking outside
        >
            <div
                className="bg-white rounded-lg shadow-2xl w-full max-w-lg p-6 flex flex-col gap-y-6"
                onClick={(e) => e.stopPropagation()} // Prevent modal close on click inside
            >
                {/* Modal Header */}
                <div className="flex justify-between items-center">
                    <h4 className="text-lg font-semibold text-gray-800">Trade Slippage</h4>
                    <button
                        className="text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-1"
                        onClick={onClose}
                        aria-label="Close Modal"
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            strokeWidth={2}
                            stroke="currentColor"
                            className="w-6 h-6"
                        >
                            <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                {/* Modal Body */}
                <p className="text-sm text-gray-600">
                    Set the allowed percentage difference between the quoted price and actual execution price of your trade.
                </p>
                <div className="flex items-center gap-x-4">
                    {/* Slippage Options */}
                    <div
                        className="flex items-stretch rounded-md border border-gray-300 overflow-hidden w-3/4"
                        role="radiogroup"
                        aria-label="Slippage Options"
                    >
                        {[0.1, 0.5, 1.0].map((value) => (
                            <button
                                key={value}
                                type="button"
                                role="radio"
                                aria-checked={slippage === value}
                                onClick={() => onUpdateSlippage(value)} // Update slippage but don't close modal
                                className={`flex-1 text-sm font-medium px-4 py-2 transition focus:outline-none focus:ring-2 focus:ring-blue-300 ${
                                    slippage === value
                                        ? 'bg-blue-500 text-white'
                                        : 'bg-gray-100 text-gray-600 hover:bg-blue-100'
                                }`}
                            >
                                {value}%
                            </button>
                        ))}
                    </div>

                    {/* Custom Input */}
                    <div className="w-1/4">
                        <input
                            type="number"
                            placeholder="Custom"
                            value={customSlippage}
                            onChange={handleCustomInput}
                            className="w-full h-10 px-3 text-sm text-gray-700 bg-gray-100 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-300"
                        />
                    </div>
                </div>

                {/* Done Button */}
                <button
                    onClick={handleApplyCustomSlippage}
                    disabled={!customSlippage && slippage === null}
                    className={`w-full px-4 py-2 text-sm font-semibold rounded-md transition ${
                        customSlippage || slippage !== null
                            ? 'bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300'
                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    }`}
                >
                    Done
                </button>
            </div>
        </div>
    );
};

AdvancedSettings.propTypes = {
    slippage: PropTypes.number.isRequired,
    onUpdateSlippage: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
};

export default AdvancedSettings;
-e 


=========================
File: ./components/Banner/Banner.js
=========================
import React, { useState } from 'react';
import PropTypes from 'prop-types';

const Banner = ({ announcementLink, announcementText, title }) => {
  const [isVisible, setIsVisible] = useState(true);

  // Hide the banner when the close button is clicked
  if (!isVisible) {
    return null;
  }

  return (
    <div className="relative flex items-center justify-between bg-blue-700 text-white px-4 py-2 w-full shadow-lg animate-pulse shadow-blue-500/50">
      {/* Left Section: Branding/Title */}
      <div className="flex items-center gap-x-2">
        {/* Logo Icon */}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 81 15"
          className="h-4 text-gray-300"
        >
          <path
            fill="currentColor"
            d="M8.152 15q-2.313 0-4.173-.958-1.86-.98-2.92-2.688Q0 9.625 0 7.5t1.06-3.833Q2.12 1.937 3.979.979 5.839 0 8.152 0q2.314 0 4.174.98 1.86.957 2.92 2.666 1.058 1.708 1.059 3.854t-1.06 3.854q-1.06 1.71-2.92 2.688Q10.467 15 8.153 15m0-2.375q1.515 0 2.725-.646a4.94 4.94 0 0 0 1.903-1.833q.692-1.188.692-2.646t-.692-2.625a4.75 4.75 0 0 0-1.903-1.833q-1.211-.667-2.725-.667t-2.724.667a4.75 4.75 0 0 0-1.903 1.833Q2.832 6.042 2.833 7.5q0 1.458.692 2.646a4.94 4.94 0 0 0 1.903 1.833q1.21.646 2.724.646"
          />
        </svg>
        <span className="text-sm font-medium">{title}</span>
      </div>

      {/* Center Section: Announcement Text */}
      <div className="hidden md:block text-sm text-gray-100 font-semibold">
        <span className="text-lg">{announcementText}</span>
      </div>

      {/* Right Section: Link & Close Button */}
      <div className="flex items-center gap-x-2 text-sm">
        <a
          href={announcementLink}
          target="_blank"
          rel="noopener noreferrer"
          className="text-green-400 hover:text-green-300 transition"
        >
          Announcement
        </a>
        <button
          onClick={() => setIsVisible(false)}
          className="p-1 rounded hover:bg-gray-800 transition"
          aria-label="Close banner"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 16 16"
            className="h-4 w-4 text-gray-400"
          >
            <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z" />
          </svg>
        </button>
      </div>
    </div>
  );
};

Banner.propTypes = {
  announcementLink: PropTypes.string.isRequired,
  announcementText: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
};

export default Banner;
-e 


=========================
File: ./components/Banner/index.js
=========================
-e 


=========================
File: ./components/ConnectButton.js
=========================
// src/components/ConnectButton.js
import React from 'react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';

const ConnectButton = () => {
  return (
    <div className="flex justify-center items-center h-full">
      <WalletMultiButton className="bg-gradient-to-r from-purple-500 to-green-400 text-white font-semibold px-6 py-2 rounded-full shadow-md transform transition hover:scale-105 hover:shadow-green-400/50 whitespace-nowrap w-[250px]" />
    </div>
  );
};

export default ConnectButton;
-e 


=========================
File: ./components/Global/GlobalModal.js
=========================
import React, { useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

const GlobalModal = ({
    isVisible,
    title = '', // Default value
    content,
    footer = null, // Default value
    onClose,
    options = {}, // Default value
}) => {
    const modalRef = useRef(null);

    const {
        fixedHeader = false,
        fixedFooter = false,
        showCloseButton = true,
        scrollableContent = true,
        modalWidth = '30%',
        modalHeight = '60%',
        backdropOpacity = 0.7,
        zIndex = 50,
        closeOnEscape = true,
        closeOnClickOutside = true,
        theme = 'light',
        customColors = {},
    } = options;

    // Default themes
    const themes = {
        light: {
            background: 'white',
            textColor: 'black',
            borderColor: 'rgba(0, 0, 0, 0.1)',
            backdropColor: `rgba(0, 0, 0, ${backdropOpacity || 0.7})`,
        },
        dark: {
            background: '#1A1E48',
            textColor: 'white',
            borderColor: 'rgba(255, 255, 255, 0.1)',
            backdropColor: `rgba(0, 0, 0, ${backdropOpacity || 0.7})`,
        },
    };

    // Merge selected theme with custom colors
    const selectedTheme = {
        ...themes[theme],
        ...customColors,
    };

    // Escape Key Listener
    useEffect(() => {
        const handleKeyDown = (event) => {
            if (closeOnEscape && event.key === 'Escape') {
                onClose();
            }
        };

        if (isVisible) {
            document.addEventListener('keydown', handleKeyDown);
        }

        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [isVisible, closeOnEscape, onClose]);

    // Close the modal on outside click
    const handleOutsideClick = (event) => {
        if (
            isVisible &&
            closeOnClickOutside &&
            modalRef.current &&
            !modalRef.current.contains(event.target)
        ) {
            onClose();
        }
    };

    return (
        <div
            className={classNames(
                'fixed inset-0 flex items-center justify-center',
                { hidden: !isVisible } // Hide when not visible
            )}
            style={{
                backgroundColor: selectedTheme.backdropColor,
                zIndex: zIndex || 50,
            }}
            onClick={handleOutsideClick}
        >
            <div
                ref={modalRef}
                className="rounded-lg shadow-lg overflow-hidden flex flex-col relative"
                style={{
                    width: modalWidth || '30%',
                    maxHeight: modalHeight || '60%',
                    backgroundColor: selectedTheme.background,
                    color: selectedTheme.textColor,
                    borderColor: selectedTheme.borderColor,
                }}
            >
                {/* Header */}
                {title && (
                    <div
                        className={classNames(
                            'p-4 border-b flex items-center justify-between',
                            fixedHeader ? 'sticky top-0 z-10' : ''
                        )}
                        style={{
                            borderColor: selectedTheme.borderColor,
                            backgroundColor: selectedTheme.background,
                            color: selectedTheme.textColor,
                        }}
                    >
                        <h3 className="text-lg font-semibold">{title}</h3>
                        {showCloseButton && (
                            <button
                                onClick={onClose}
                                className="focus:outline-none"
                                aria-label="Close Modal"
                                style={{
                                    color: selectedTheme.textColor,
                                    border: `1px solid ${selectedTheme.borderColor}`,
                                }}
                            >
                                ✕
                            </button>
                        )}
                    </div>
                )}

                {/* Content */}
                <div
                    className={classNames(
                        'flex-1 p-4',
                        scrollableContent ? 'overflow-y-auto' : 'overflow-hidden'
                    )}
                    style={{
                        color: selectedTheme.textColor,
                        backgroundColor: selectedTheme.background,
                    }}
                >
                    {content}
                </div>

                {/* Footer */}
                {footer && (
                    <div
                        className={classNames(
                            'p-4 border-t',
                            fixedFooter ? 'sticky bottom-0 z-10' : ''
                        )}
                        style={{
                            borderColor: selectedTheme.borderColor,
                            backgroundColor: selectedTheme.background,
                            color: selectedTheme.textColor,
                        }}
                    >
                        {footer}
                    </div>
                )}
            </div>
        </div>
    );
};

GlobalModal.propTypes = {
    isVisible: PropTypes.bool.isRequired,
    title: PropTypes.string,
    content: PropTypes.node.isRequired,
    footer: PropTypes.node,
    onClose: PropTypes.func.isRequired,
    options: PropTypes.shape({
        fixedHeader: PropTypes.bool,
        fixedFooter: PropTypes.bool,
        showCloseButton: PropTypes.bool,
        scrollableContent: PropTypes.bool,
        modalWidth: PropTypes.string,
        modalHeight: PropTypes.string,
        backdropOpacity: PropTypes.number,
        zIndex: PropTypes.number,
        closeOnEscape: PropTypes.bool,
        closeOnClickOutside: PropTypes.bool,
        theme: PropTypes.oneOf(['light', 'dark']),
        customColors: PropTypes.shape({
            background: PropTypes.string,
            textColor: PropTypes.string,
            borderColor: PropTypes.string,
            backdropColor: PropTypes.string,
        }),
    }),
};

GlobalModal.defaultProps = {
    title: '',
    footer: null,
    options: {
        fixedHeader: false,
        fixedFooter: false,
        showCloseButton: true,
        scrollableContent: true,
        modalWidth: '30%',
        modalHeight: '60%',
        backdropOpacity: 0.7,
        zIndex: 50,
        closeOnEscape: true,
        closeOnClickOutside: true,
        theme: 'light', // Default to light mode
        customColors: {}, // No custom colors by default
    },
};

export default GlobalModal;
-e 


=========================
File: ./components/Global/NotificationBanner.js
=========================
// ./components/Global/NotificationBanner.js
import React from 'react';
import PropTypes from 'prop-types';

const NotificationBanner = ({ message, type, onClose }) => {
    const bgColor =
        type === 'success' ? 'bg-green-500' :
        type === 'error' ? 'bg-red-500' :
        type === 'info' ? 'bg-blue-500' : 'bg-gray-500';

    return (
        <div className={`${bgColor} text-white text-center py-2 px-4`}>
            <div className="flex justify-between items-center">
                <span>{message}</span>
                {onClose && (
                    <button
                        onClick={onClose}
                        className="ml-4 text-white hover:text-gray-300 focus:outline-none"
                    >
                        ✕
                    </button>
                )}
            </div>
        </div>
    );
};

NotificationBanner.propTypes = {
    message: PropTypes.string.isRequired,
    type: PropTypes.oneOf(['success', 'error', 'info', 'default']),
    onClose: PropTypes.func,
};

NotificationBanner.defaultProps = {
    type: 'default',
    onClose: null,
};

export default NotificationBanner;
-e 


=========================
File: ./components/Header.js
=========================
import React from 'react';
import ConnectButton from './ConnectButton';
import MobileNavBar from './MobileNavBar';

const Header = () => {
  return (
    <>
      {/* Desktop Header */}
      <header className="hidden lg:flex w-full bg-gradient-to-b from-[#141852] to-[#0E1139] backdrop-blur-lg border-b border-white/10 shadow-lg">
        <div className="container mx-auto px-8 flex items-center justify-between h-16">
          {/* Logo */}
          <a href="/" className="mr-auto">
            <img
              src="logo.png" // Replace with your logo file path
              alt="SolanaApp Logo"
              className="w-10 h-10"
            />
          </a>

          {/* Navigation Links */}
          <nav className="flex space-x-6 ml-8">
            <a
              href="/"
              className="text-white text-sm font-medium hover:text-blue-300 transition"
            >
              Home
            </a>
            <a
              href="/pools"
              className="text-white text-sm font-medium hover:text-blue-300 transition"
            >
              Pools
            </a>
            <a
              href="/portfolio"
              className="text-white text-sm font-medium hover:text-blue-300 transition"
            >
              Portfolio
            </a>
          </nav>

          {/* Wallet Connect Button */}
          <div className="ml-auto">
            <ConnectButton />
          </div>
        </div>
      </header>

      {/* Mobile Header */}
      <div className="lg:hidden flex flex-col w-full">
        {/* Top Section with Logo and Wallet Connect */}
        <div className="flex items-center justify-between w-full px-4 py-3 border-b border-white/10 bg-gradient-to-b from-[#141852] to-[#0E1139]">
          {/* Logo */}
          <a href="/">
            <img
              src="logo.png" // Replace with your logo file path
              alt="SolanaApp Logo"
              className="w-10 h-10"
            />
          </a>

          {/* Wallet Connect */}
          <ConnectButton />
        </div>

        {/* Mobile Bottom Navigation Bar */}
        <MobileNavBar />
      </div>
    </>
  );
};

export default Header;
-e 


=========================
File: ./components/LiquidityInfo/LiquidityInfo.js
=========================
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { Connection, PublicKey } from '@solana/web3.js';

const LiquidityInfo = ({ poolAddress, connection }) => {
    const [liquidityData, setLiquidityData] = useState(null);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        if (!poolAddress) return;

        const fetchLiquidityData = async () => {
            setLoading(true);
            try {
                const poolPublicKey = new PublicKey(poolAddress);
                const poolAccountInfo = await connection.getAccountInfo(poolPublicKey);

                if (!poolAccountInfo) {
                    console.error('Pool account not found');
                    setLiquidityData(null);
                    return;
                }

                const poolData = deserializePoolData(poolAccountInfo.data);
                setLiquidityData(poolData);
            } catch (error) {
                console.error('Failed to fetch liquidity data:', error);
                setLiquidityData(null);
            } finally {
                setLoading(false);
            }
        };

        fetchLiquidityData();
    }, [poolAddress, connection]);

    const deserializePoolData = (data) => {
        const decodedData = Buffer.from(data);
        return {
            tokenA: new PublicKey(decodedData.slice(0, 32)).toBase58(),
            tokenB: new PublicKey(decodedData.slice(32, 64)).toBase58(),
            reserveA: decodedData.readBigUInt64LE(64),
            reserveB: decodedData.readBigUInt64LE(72),
        };
    };

    if (loading) {
        return <div className="text-gray-500 text-center">Loading liquidity data...</div>;
    }

    if (!liquidityData) {
        return <div className="text-gray-500 text-center">No liquidity data available.</div>;
    }

    return (
        <div className="flex flex-col gap-y-5 w-full px-1 xs:px-0 py-3">
            {/* Token A Info */}
            <div className="flex w-full gap-x-4 items-center font-regular">
                <span className="relative flex min-h-4 min-w-4 shrink-0 rounded-full shadow-box h-8 w-8">
                    <img
                        className="aspect-square h-full w-full rounded-full"
                        src="https://via.placeholder.com/40"
                        alt="Token A"
                    />
                </span>
                <div className="flex flex-col mr-auto">
                    <div className="flex gap-x-2 items-center">
                        <span className="font-medium text-base">Token A</span>
                        <div className="flex gap-x-1.5 items-center">
                            <button className="inline-flex items-center justify-center whitespace-nowrap rounded-md text-base font-medium transition-all duration-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-[#1d4ed8] disabled:cursor-not-allowed disabled:text-disabled font-mono border-none bg-secondary text-link hover:brightness-125 duration-100 w-[7.5rem] h-min py-0.5 text-xs gap-x-2">
                                {liquidityData.tokenA.slice(0, 4)}...
                                {liquidityData.tokenA.slice(-4)}
                            </button>
                        </div>
                    </div>
                    <span className="text-xs text-secondary text-left">Reserve: {liquidityData.reserveA}</span>
                </div>
            </div>

            {/* Token B Info */}
            <div className="flex w-full gap-x-4 items-center font-regular">
                <span className="relative flex min-h-4 min-w-4 shrink-0 rounded-full shadow-box h-8 w-8">
                    <img
                        className="aspect-square h-full w-full rounded-full"
                        src="https://via.placeholder.com/40"
                        alt="Token B"
                    />
                </span>
                <div className="flex flex-col mr-auto">
                    <div className="flex gap-x-2 items-center">
                        <span className="font-medium text-base">Token B</span>
                        <div className="flex gap-x-1.5 items-center">
                            <button className="inline-flex items-center justify-center whitespace-nowrap rounded-md text-base font-medium transition-all duration-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-[#1d4ed8] disabled:cursor-not-allowed disabled:text-disabled font-mono border-none bg-secondary text-link hover:brightness-125 duration-100 w-[7.5rem] h-min py-0.5 text-xs gap-x-2">
                                {liquidityData.tokenB.slice(0, 4)}...
                                {liquidityData.tokenB.slice(-4)}
                            </button>
                        </div>
                    </div>
                    <span className="text-xs text-secondary text-left">Reserve: {liquidityData.reserveB}</span>
                </div>
            </div>
        </div>
    );
};

LiquidityInfo.propTypes = {
    poolAddress: PropTypes.string.isRequired, // Public key of the pool account
    connection: PropTypes.instanceOf(Connection).isRequired, // Solana connection instance
};

export default LiquidityInfo;
-e 


=========================
File: ./components/MobileNavBar.js
=========================
import React from 'react';

const MobileNavBar = () => {
  return (
    <div className="fixed bottom-0 w-full flex items-center justify-around h-14 bg-gradient-to-b from-[#141852] to-[#0E1139] backdrop-blur-lg border-t border-white/10 shadow-lg z-50 lg:hidden">
      {/* Home */}
      <button className="flex flex-col items-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/">
          <svg
            aria-hidden="true"
            focusable="false"
            className="h-6 w-6 mb-1 fill-primary"
            viewBox="0 0 16 16"
            width="16"
            height="16"
            fill="currentColor"
          >
            <path d="M5.22 14.78a.75.75 0 0 0 1.06-1.06L4.56 12h8.69a.75.75 0 0 0 0-1.5H4.56l1.72-1.72a.75.75 0 0 0-1.06-1.06l-3 3a.75.75 0 0 0 0 1.06l3 3Zm5.56-6.5a.75.75 0 1 1-1.06-1.06l1.72-1.72H2.75a.75.75 0 0 1 0-1.5h8.69L9.72 2.28a.75.75 0 0 1 1.06-1.06l3 3a.75.75 0 0 1 0 1.06l-3 3Z" />
          </svg>
          Home
        </a>
      </button>

      {/* Pools */}
      <button className="flex flex-col items-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/pools">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 18"
            className="h-6 w-6 mb-1 fill-primary"
          >
            <path
              fill="currentColor"
              fillRule="evenodd"
              d="M7.533.194a.83.83 0 0 0-1.066 0s-2.305 1.942-4.149 4.62C1.04 6.67 0 8.878 0 11.045 0 14.884 3.137 18 7 18s7-3.116 7-6.954c0-2.167-1.04-4.374-2.318-6.233C9.838 2.135 7.532.194 7.532.194M6.619 3.14a.59.59 0 0 1 .762 0s1.646 1.402 2.963 3.336C11.258 7.818 12 9.413 12 10.977 12 13.75 9.76 16 7 16s-5-2.25-5-5.023c0-1.564.742-3.159 1.656-4.5A18.9 18.9 0 0 1 6.619 3.14"
              clipRule="evenodd"
            />
          </svg>
          Pools
        </a>
      </button>

      {/* Portfolio */}
      <button className="flex flex-col items-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/portfolio">
          <svg
            className="h-6 w-6 mb-1 fill-primary"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M2.66634 22.5007C2.02467 22.5007 1.47537 22.2722 1.01842 21.8152C0.56148 21.3583 0.333008 20.809 0.333008 20.1673V7.33398C0.333008 6.69232 0.56148 6.14301 1.01842 5.68607C1.47537 5.22912 2.02467 5.00065 2.66634 5.00065H7.33301V2.66732C7.33301 2.02565 7.56148 1.47635 8.01842 1.0194C8.47537 0.562457 9.02468 0.333984 9.66634 0.333984H14.333C14.9747 0.333984 15.524 0.562457 15.9809 1.0194C16.4379 1.47635 16.6663 2.02565 16.6663 2.66732V5.00065H21.333C21.9747 5.00065 22.524 5.22912 22.9809 5.68607C23.4379 6.14301 23.6663 6.69232 23.6663 7.33398V20.1673C23.6663 20.809 23.4379 21.3583 22.9809 21.8152C22.524 22.2722 21.9747 22.5007 21.333 22.5007H2.66634ZM2.66634 20.1673H21.333V7.33398H2.66634V20.1673ZM9.66634 5.00065H14.333V2.66732H9.66634V5.00065Z"
              fill="currentColor"
            />
          </svg>
          Portfolio
        </a>
      </button>
    </div>
  );
};

export default MobileNavBar;
-e 


=========================
File: ./components/Pools/ActionButtons.js
=========================
import React from "react";

const ActionButtons = () => (
  <div className="flex items-center gap-3 p-4">
    <button
      type="button"
      className="inline-flex items-center justify-center h-11 px-2 rounded-md text-base font-medium text-[#EEEFF6] border border-blue-200/5 shadow-md bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] backdrop-blur hover:brightness-125 focus:outline-none focus:ring-1 focus:ring-[#1d4ed8]"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 22 18"
        className="h-5 w-5"
      >
        <path
          fill="#EEEFF6"
          fillRule="evenodd"
          d="M21.5 1.742v.405c0 .476-.196.93-.541 1.26l-6.345 6.032c-.23.22-.361.523-.361.84v5.98c0 .961-.784 1.741-1.75 1.741H9.575c-.966 0-1.75-.78-1.75-1.742v-5.974c0-.32-.132-.625-.365-.845L1.048 3.41A1.74 1.74 0 0 1 .5 2.141v-.4C.5.78 1.284 0 2.25 0h17.5c.966 0 1.75.78 1.75 1.742"
          clipRule="evenodd"
        />
      </svg>
    </button>
    <button
      type="button"
      className="inline-flex items-center justify-center h-11 w-11 rounded-md text-base font-medium text-[#EEEFF6] border border-blue-200/5 shadow-md bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] backdrop-blur hover:brightness-125 focus:outline-none focus:ring-1 focus:ring-[#1d4ed8]"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 16 16"
        className="h-5 w-5"
      >
        <path d="..." />
      </svg>
    </button>
  </div>
);

export default ActionButtons;
-e 


=========================
File: ./components/Pools/Header.js
=========================
import React from "react";

const Header = ({ isDropdownOpen, toggleDropdown }) => (
  <div className="w-full px-4 py-3 flex justify-between items-center border-b border-gray-700 bg-gray-800">
    <h1 className="text-2xl font-semibold">Pools</h1>

    <div className="relative">
      {/* Mobile View (Dropdown) */}
      <div className="sm:hidden">
        <button
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium flex items-center gap-2 shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
          onClick={toggleDropdown}
        >
          Create
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className={`h-4 w-4 transform transition-transform ${
              isDropdownOpen ? "rotate-180" : ""
            }`}
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </button>

        {isDropdownOpen && (
          <div className="absolute right-0 mt-2 w-48 bg-gray-800 border border-gray-700 rounded-md shadow-lg">
            <a
              href="/create-token"
              className="block px-4 py-2 text-sm text-gray-200 hover:bg-gray-700"
            >
              Create Token
            </a>
            <a
              href="/create-pool"
              className="block px-4 py-2 text-sm text-gray-200 hover:bg-gray-700"
            >
              Create Pool
            </a>
          </div>
        )}
      </div>

      {/* Normal View (Separate Buttons) */}
      <div className="hidden sm:flex gap-2">
        <a
          href="/create-token"
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Create Token
        </a>
        <a
          href="/create-pool"
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Create Pool
        </a>
      </div>
    </div>
  </div>
);

export default Header;
-e 


=========================
File: ./components/Pools/PoolsList.js
=========================
import React from "react";

const PoolsList = () => (
  <div className="flex-1 overflow-y-auto px-4 py-6">
    <div className="border border-gray-700 rounded-lg bg-gray-800 p-4">
      <p className="text-gray-400">No pools available yet.</p>
    </div>
  </div>
);

export default PoolsList;
-e 


=========================
File: ./components/Pools/PoolsPage.js
=========================
import React, { useState } from "react";
import Header from "./Header";
import SearchBar from "./SearchBar";
import ActionButtons from "./ActionButtons";
import PoolsList from "./PoolsList";

const PoolsPage = () => {
  const [isDropdownOpen, setDropdownOpen] = useState(false);

  const toggleDropdown = () => setDropdownOpen(!isDropdownOpen);

  return (
    <div className="flex flex-col bg-gray-900 text-white" style={{ width: "100%" }}>
      <Header isDropdownOpen={isDropdownOpen} toggleDropdown={toggleDropdown} />
      <div className="flex items-center justify-between gap-3 px-3 lg:px-0 flex-wrap sm:flex-nowrap">
        <SearchBar />
        <ActionButtons />
      </div>
      <PoolsList />
    </div>
  );
};

export default PoolsPage;
-e 


=========================
File: ./components/Pools/SearchBar.js
=========================
import React from "react";

const SearchBar = () => (
  <div className="relative flex flex-col max-w-md w-full bg-transparent text-[#f8fafc] overflow-visible p-4">
    <label htmlFor="search-input" className="sr-only">
      Search tokens
    </label>
    <div className="flex items-center gap-2 h-11 px-4 text-sm rounded-md border border-blue-800 focus-within:border-[#6e85f7] shadow-inner">
      <input
        id="search-input"
        type="text"
        placeholder="Search tokens..."
        spellCheck="false"
        autoComplete="off"
        autoCorrect="off"
        role="combobox"
        aria-autocomplete="list"
        aria-expanded="true"
        className="flex-grow bg-transparent placeholder:text-quarternary text-primary text-base font-regular py-0 px-0 border-0 focus:outline-none focus:ring-0"
      />
    </div>
  </div>
);

export default SearchBar;
-e 


=========================
File: ./components/RefreshSlippage/RefreshSlippage.js
=========================
import React, { useState } from 'react';
import PropTypes from 'prop-types';

const RefreshSlippage = ({ slippage, onRefresh }) => {
    return (
        <div className="flex items-center justify-between w-full mt-4">
            <button
                onClick={onRefresh}
                className="inline-flex items-center justify-center h-8 w-8 rounded-md text-[#EEEFF6] bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] shadow-[0_2px_10px_0px_rgba(0,0,0,0.2)] hover:brightness-125 focus:outline-none focus:ring focus:ring-blue-500 transition"
                title="Refresh Price"
            >
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 18" className="h-5 w-5">
                    <path
                        fill="currentColor"
                        d="M10 2.6a6.38 6.38 0 0 0-4.156 1.533.533.533 0 1 0 .692.81A5.3 5.3 0 0 1 10 3.668c2.771 0 5.04 2.1 5.307 4.8h-1.574l2.134 3.2L18 8.467h-1.627C16.1 5.187 13.348 2.6 10 2.6M4.133 6.333 2 9.533h1.627C3.9 12.813 6.652 15.4 10 15.4a6.38 6.38 0 0 0 4.156-1.533.535.535 0 0 0-.094-.895.53.53 0 0 0-.598.084A5.3 5.3 0 0 1 10 14.333c-2.771 0-5.04-2.1-5.307-4.8h1.574z"
                    />
                </svg>
            </button>
            <div className="text-sm text-tertiary font-medium flex items-center">
                <span>Slippage:</span>
                <span className="ml-1">{slippage}%</span>
            </div>
        </div>
    );
};

RefreshSlippage.propTypes = {
    slippage: PropTypes.number.isRequired,
    onRefresh: PropTypes.func.isRequired,
};

export default RefreshSlippage;
-e 


=========================
File: ./components/SwapCard/index.js
=========================
export { default } from './SwapCard';
-e 


=========================
File: ./components/SwapCard/SwapCard.js
=========================
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { useWallet } from '@solana/wallet-adapter-react';
import TokenSelector from '../TokenSelector/TokenSelector';
import AdvancedSettings from '../AdvancedSettings/AdvancedSettings'; // Import the AdvancedSettings modal
import ConnectButton from '../ConnectButton'; // Import the ConnectButton component

const SwapCard = ({ onSwap }) => {
    const { connected } = useWallet(); // Access wallet connection state
    const [fromToken, setFromToken] = useState({ symbol: 'SOL', image: 'https://via.placeholder.com/40' });
    const [toToken, setToToken] = useState({ symbol: 'USDC', image: 'https://via.placeholder.com/40' });
    const [fromAmount, setFromAmount] = useState('');
    const [toAmount, setToAmount] = useState('');
    const [isTokenSelectorOpen, setIsTokenSelectorOpen] = useState(null);
    const [isSlippageOpen, setIsSlippageOpen] = useState(false); // To handle slippage modal visibility
    const [slippage, setSlippage] = useState(0.5);

    const handleSwap = () => {
        if (!fromAmount || !fromToken || !toToken) {
            alert('Please enter a valid amount and select tokens.');
            return;
        }
        onSwap(fromAmount, fromToken.symbol, toToken.symbol, slippage);
    };

    const handleTokenSelect = (token, type) => {
        const tokenData = {
            symbol: token.metadata?.symbol || token.symbol,
            image: token.metadata?.image || 'https://via.placeholder.com/40',
        };
        if (type === 'from') setFromToken(tokenData);
        if (type === 'to') setToToken(tokenData);
        setIsTokenSelectorOpen(null);
    };

    const handleSlippageChange = (value) => {
        setSlippage(value);
    };

    const openSlippageModal = () => {
        setIsSlippageOpen(true);
    };

    const closeSlippageModal = () => {
        setIsSlippageOpen(false);
    };

    return (
        <div className="flex flex-col w-full md:max-w-md p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
            {/* Swap Header */}
            <div className="flex justify-between items-center text-gray-200">
                <h3 className="text-SM font-semibold text-white">Slippage: {slippage}%</h3>
                <div className="flex items-center gap-2">
                    <button
                        className="p-2 rounded-full hover:bg-indigo-800/70 transition"
                        aria-label="Settings"
                        onClick={openSlippageModal} // Open the AdvancedSettings modal
                    >
                        <svg
                            className="w-6 h-6 text-white"
                            aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 20 20"
                        >
                            <path
                                stroke="currentColor"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth="2"
                                d="M7.75 4H19M7.75 4a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 4h2.25m13.5 6H19m-2.25 0a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 10h11.25m-4.5 6H19M7.75 16a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 16h2.25"
                            />
                        </svg>
                    </button>
                </div>
            </div>

            {/* Input Section */}
            <div className="flex flex-col">
                {/* From Token */}
                <div className="relative flex items-center justify-between p-4 bg-indigo-800 rounded-lg border border-transparent focus-within:border-blue-400">
                    <div className="flex flex-col w-[65%]">
                        <label className="text-sm text-white">Pay</label>
                        <input
                            type="text"
                            value={fromAmount}
                            onChange={(e) => setFromAmount(e.target.value)}
                            placeholder="0.0"
                            className="bg-transparent text-white text-2xl font-semibold focus:outline-none"
                        />
                        <span className="text-sm text-white">$0.00</span>
                    </div>
                    <button
                        className="bg-blue-600 text-white px-4 py-1 rounded-lg text-sm font-medium flex items-center gap-2"
                        onClick={() => setIsTokenSelectorOpen('from')}
                    >
                        <img src={fromToken.image} alt={fromToken.symbol} className="w-6 h-6 rounded-full" />
                        {fromToken.symbol}
                    </button>
                    {isTokenSelectorOpen === 'from' && (
                        <div className="absolute top-full left-0 w-full mt-2">
                            <TokenSelector
                                onSelectToken={(token) => handleTokenSelect(token, 'from')}
                                onClose={() => setIsTokenSelectorOpen(null)}
                            />
                        </div>
                    )}
                </div>

                {/* Swap Icon */}
                <button
                    className="mx-auto p-2 bg-blue-600 rounded-full text-white shadow-lg hover:scale-110 transition z-10"
                    onClick={() => {
                        const temp = fromToken;
                        setFromToken(toToken);
                        setToToken(temp);
                    }}
                >
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 28 24" className="h-6 w-6">
                        <path
                            fill="currentColor"
                            d="M18.347 18.384q.32 0 .535-.216a.73.73 0 0 0 .215-.534V8.103l2.317 2.317a.68.68 0 0 0 .508.208.767.767 0 0 0 .77-.752.74.74 0 0 0-.233-.535l-3.47-3.469a.8.8 0 0 0-.297-.198 1 1 0 0 0-.678 0 .8.8 0 0 0-.3.198L14.22 9.366a.7.7 0 0 0-.22.518q.003.294.236.528.232.216.526.223a.7.7 0 0 0 .527-.225l2.308-2.307v9.54q0 .315.216.528a.73.73 0 0 0 .534.213m-8.702 0a1 1 0 0 0 .34-.059.8.8 0 0 0 .3-.197l3.495-3.495a.7.7 0 0 0 .22-.517.74.74 0 0 0-.236-.529.8.8 0 0 0-.527-.223.7.7 0 0 0-.527.225l-2.307 2.308v-9.54a.731.731 0 0 0-.75-.74.73.73 0 0 0-.535.215.73.73 0 0 0-.215.534v9.531L6.585 13.58a.68.68 0 0 0-.507-.208.767.767 0 0 0-.77.752q0 .302.233.534l3.47 3.47q.14.14.297.198a1 1 0 0 0 .337.058"
                        />
                    </svg>
                </button>

                {/* To Token */}
                <div className="relative flex items-center justify-between p-4 bg-indigo-800 rounded-lg border border-transparent focus-within:border-blue-400">
                    <div className="flex flex-col w-[65%]">
                        <label className="text-sm text-white">Receive</label>
                        <input
                            type="text"
                            value={toAmount}
                            onChange={(e) => setToAmount(e.target.value)}
                            placeholder="0.0"
                            className="bg-transparent text-white text-2xl font-semibold focus:outline-none"
                        />
                        <span className="text-sm text-white">$0.00</span>
                    </div>
                    <button
                        className="bg-blue-600 text-white px-4 py-1 rounded-lg text-sm font-medium flex items-center gap-2"
                        onClick={() => setIsTokenSelectorOpen('to')}
                    >
                        <img src={toToken.image} alt={toToken.symbol} className="w-6 h-6 rounded-full" />
                        {toToken.symbol}
                    </button>
                    {isTokenSelectorOpen === 'to' && (
                        <div className="absolute top-full left-0 w-full mt-2 z-10">
                            <TokenSelector
                                onSelectToken={(token) => handleTokenSelect(token, 'to')}
                                onClose={() => setIsTokenSelectorOpen(null)}
                            />
                        </div>
                    )}
                </div>
            </div>

            {/* Connect or Swap Button Section */}
            <div
                className="w-full flex justify-center items-center"
                style={{ minHeight: '72px' }} // Fixed height ensures consistent placement
            >
                {connected ? (
                    <button
                        onClick={handleSwap}
                        className="w-full py-3 bg-gradient-to-b from-blue-500 to-blue-700 text-white font-bold rounded-lg hover:brightness-110 transition"
                    >
                        Swap Now
                    </button>
                ) : (
                    <ConnectButton />
                )}
            </div>

            {/* Show the AdvancedSettings modal */}
            {isSlippageOpen && (
                <AdvancedSettings
                    slippage={slippage}
                    onUpdateSlippage={handleSlippageChange}
                    onClose={closeSlippageModal}
                />
            )}
        </div>
    );
};

SwapCard.propTypes = {
    onSwap: PropTypes.func.isRequired,
};

export default SwapCard;
-e 


=========================
File: ./components/TokenSelector/LazyTokenList.js
=========================
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import TokenRow from './TokenRow';

const PAGE_SIZE = 20; // Number of tokens to load per page


const LazyTokenList = ({ onSelectToken, onClose }) => {
    const [tokens, setTokens] = useState([]);
    const [displayedTokens, setDisplayedTokens] = useState([]);
    const [hasMore, setHasMore] = useState(true);
    const [isLoading, setIsLoading] = useState(false);
    const [page, setPage] = useState(0);

    useEffect(() => {
        fetch('/tokens_dummy_data.json')
            .then((response) => response.json())
            .then((data) => {
                setTokens(data.data);
                setDisplayedTokens(data.data.slice(0, PAGE_SIZE));
            })
            .catch((error) => console.error('Failed to load tokens:', error));

        const handleScroll = () => {
            const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
            const scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;
            const clientHeight = document.documentElement.clientHeight || window.innerHeight;

            if (scrollHeight - scrollTop - clientHeight < 50 && hasMore && !isLoading) {
                loadMoreTokens();
            }
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, [hasMore, isLoading]);

    const loadMoreTokens = () => {
        if (isLoading || !hasMore) return;

        setIsLoading(true);

        setTimeout(() => {
            const start = page * PAGE_SIZE;
            const end = start + PAGE_SIZE;
            const nextBatch = tokens.slice(start, end);

            if (nextBatch.length > 0) {
                setDisplayedTokens((prev) => [...prev, ...nextBatch]);
                setPage((prev) => prev + 1);
            } else {
                setHasMore(false);
            }
            setIsLoading(false);
        }, 500);
    };

    return (
        <div className="w-full max-w-2xl mx-auto">
            <ul className="divide-y divide-gray-700">
                {displayedTokens.map((token) => (
                    <TokenRow key={token.address} token={token} onSelect={onSelectToken} isLoading={isLoading} />
                ))}
            </ul>
            {isLoading && (
                <div className="text-center mt-4 text-gray-400 text-sm">Loading...</div>
            )}
            {!hasMore && (
                <div className="text-center mt-4 text-gray-400 text-sm">No more tokens to load.</div>
            )}
        </div>
    );
};


LazyTokenList.propTypes = {
    onSelectToken: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
};

export default LazyTokenList;
-e 


=========================
File: ./components/TokenSelector/TokenRow.js
=========================
import React from 'react';
import PropTypes from 'prop-types';

const TokenRow = ({ token, onSelect, isLoading }) => (
    <li
        className={`flex items-center justify-between px-4 py-3 hover:bg-gray-800 cursor-pointer ${isLoading ? 'loading' : ''}`}
        onClick={() => onSelect(token)}
    >
        {/* Token Info */}
        <div className="flex items-center gap-3">
            <img
                src={token.metadata?.image || 'https://via.placeholder.com/40'}
                alt={token.metadata?.symbol || 'Token'}
                className="w-8 h-8 rounded-full"
            />
            <div className="flex flex-col">
                <span className="text-sm font-medium text-white">{token.metadata?.symbol}</span>
                <span className="text-xs text-gray-400">{token.metadata?.name}</span>
            </div>
        </div>

        {/* Token Address */}
        <div className="flex items-center gap-2">
            <span className="text-xs font-mono text-gray-500">
                {token.address.slice(0, 6)}...{token.address.slice(-4)}
            </span>
            <a
                href={`https://solscan.io/token/${token.address}`}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-500 hover:text-blue-300 text-xs"
                onClick={(e) => e.stopPropagation()} // Prevent modal closure
            >
                View
            </a>
        </div>
    </li>
);

TokenRow.propTypes = {
    token: PropTypes.shape({
        metadata: PropTypes.shape({
            image: PropTypes.string,
            symbol: PropTypes.string,
            name: PropTypes.string,
        }),
        address: PropTypes.string.isRequired,
    }).isRequired,
    onSelect: PropTypes.func.isRequired,
    isLoading: PropTypes.bool.isRequired,  // Add the loading state as a prop
};

export default TokenRow;
-e 


=========================
File: ./components/TokenSelector/TokenSelector.js
=========================
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import LazyTokenList from './LazyTokenList';
import { useModal } from '../../context/ModalContext'; // Import the modal context

const TokenSelector = ({ onSelectToken }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const [filteredTokens, setFilteredTokens] = useState([]);
    const [lazyLoadedTokens, setLazyLoadedTokens] = useState([]); // Tokens loaded lazily
    const { showModal, closeModal } = useModal(); // Access modal functions from the context

    useEffect(() => {
        // Open the global modal with the TokenSelector content
        showModal(
            'Select a Token',
            renderModalContent(),
            null, // No footer required
            {
                fixedHeader: true,
                scrollableContent: true,
                modalWidth: '40%',
                modalHeight: '70%',
                showCloseButton: true,
            }
        );

        // Close the modal when the component unmounts
        return closeModal;
    }, []); // Run only once when the component is mounted

    const handleInputChange = (e) => {
        const value = e.target.value.trim().toLowerCase();
        setSearchTerm(value);

        if (value === '') {
            setFilteredTokens(lazyLoadedTokens);
        } else {
            const filtered = lazyLoadedTokens.filter(
                (token) =>
                    token.metadata?.symbol?.toLowerCase().includes(value) ||
                    token.metadata?.name?.toLowerCase().includes(value) ||
                    token.address?.toLowerCase().includes(value)
            );
            setFilteredTokens(filtered);
        }
    };

    const handleTokensLoad = (tokens) => {
        setLazyLoadedTokens(tokens);
        setFilteredTokens(tokens);
    };

    const handleLazyLoad = (newTokens) => {
        const updatedTokens = [...lazyLoadedTokens, ...newTokens];
        setLazyLoadedTokens(updatedTokens);

        if (searchTerm.trim() === '') {
            setFilteredTokens(updatedTokens);
        } else {
            const filtered = updatedTokens.filter(
                (token) =>
                    token.metadata?.symbol?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    token.metadata?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    token.address?.toLowerCase().includes(searchTerm.toLowerCase())
            );
            setFilteredTokens(filtered);
        }
    };

    const handleTokenSelect = (token) => {
        onSelectToken(token);
        closeModal();
    };

    const renderModalContent = () => (
        <div className="flex flex-col h-full">
            {/* Search Section */}
            <div
                className="sticky top-0 z-10 px-6 py-4 border-b shadow-md rounded-lg"
                style={{
                    backgroundColor: 'rgba(255, 255, 255, 0.5)',
                    borderColor: 'rgba(0, 0, 0, 0.3)',
                }}
            >
                <div
                    className="flex items-center border px-3 rounded-md"
                    style={{
                        borderColor: 'black',
                        backgroundColor: 'rgba(255, 255, 255, 0.8)',
                    }}
                >
                    <svg
                        aria-hidden="true"
                        focusable="false"
                        className="mr-2 h-4 w-4 shrink-0 pointer-events-none"
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="black"
                    >
                        <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z" />
                    </svg>
                    <input
                        className="flex h-10 w-full bg-transparent py-3 outline-none placeholder:text-black text-black"
                        placeholder="Search tokens, name, or address"
                        value={searchTerm}
                        onChange={handleInputChange}
                        role="combobox"
                        aria-expanded="true"
                        tabIndex="0"
                    />
                </div>
            </div>

            {/* Token List Section */}
            <div className="flex-1 overflow-y-auto px-6 py-4">
                {searchTerm ? (
                    <ul className="divide-y divide-gray-300">
                        {filteredTokens.map((token) => (
                            <li
                                key={token.address}
                                className="flex items-center justify-between px-4 py-2 hover:bg-gray-100 cursor-pointer"
                                style={{
                                    backgroundColor: 'rgba(0, 0, 0, 0.05)',
                                }}
                                onClick={() => handleTokenSelect(token)}
                            >
                                <div className="flex items-center gap-3">
                                    <img
                                        src={token.metadata?.image || 'https://via.placeholder.com/40'}
                                        alt={token.metadata?.symbol || 'Token'}
                                        className="w-6 h-6 rounded-full"
                                    />
                                    <div>
                                        <span className="block text-sm font-medium text-black">
                                            {token.metadata?.symbol}
                                        </span>
                                        <span className="block text-xs text-black/60">
                                            {token.metadata?.name}
                                        </span>
                                    </div>
                                </div>
                                <span className="text-xs font-mono text-black/80">
                                    {token.address.slice(0, 6)}...{token.address.slice(-4)}
                                </span>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <LazyTokenList
                        onSelectToken={handleTokenSelect}
                        onTokensLoad={handleTokensLoad}
                        onLazyLoad={handleLazyLoad}
                        onClose={closeModal} // Pass the onClose function from context
                    />
                )}
            </div>
        </div>
    );

    return null; // The component does not render anything directly; it uses the global modal.
};

TokenSelector.propTypes = {
    onSelectToken: PropTypes.func.isRequired,
};

export default TokenSelector;
-e 


=========================
File: ./components/WalletProvider.js
=========================
import React, { FC, useMemo } from 'react';
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';
import {
    PhantomWalletAdapter,
    SolflareWalletAdapter,
} from '@solana/wallet-adapter-wallets';
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
import { clusterApiUrl } from '@solana/web3.js';

// Import default styles for Wallet Adapter
import '@solana/wallet-adapter-react-ui/styles.css';

const WalletConnectionProvider: FC = ({ children }) => {
    // Set the network to Devnet
    const network = WalletAdapterNetwork.Devnet;

    // Use a cluster API URL for the selected network
    const endpoint = useMemo(() => clusterApiUrl(network), [network]);

    // Configure wallet adapters
    const wallets = useMemo(
        () => [
            new PhantomWalletAdapter(),
            new SolflareWalletAdapter(),
        ],
        [network]
    );

    return (
        <ConnectionProvider endpoint={endpoint}>
            <WalletProvider wallets={wallets} autoConnect>
                <WalletModalProvider>
                    {children}
                </WalletModalProvider>
            </WalletProvider>
        </ConnectionProvider>
    );
};

export default WalletConnectionProvider;
-e 


=========================
File: ./context/ModalContext.js
=========================

// ./context/ModalContext.js
import React, { createContext, useState, useContext } from 'react';
import GlobalModal from '../components/Global/GlobalModal';

const ModalContext = createContext();

export const useModal = () => useContext(ModalContext);

export const ModalProvider = ({ children }) => {
    const [modalState, setModalState] = useState({
        isVisible: false,
        title: '',
        content: '',
        footer: null,
        options: {},
    });

    const showModal = (title, content, footer = null, options = {}) => {
        setModalState({
            isVisible: true,
            title,
            content,
            footer,
            options,
        });
    };

    const closeModal = () => {
        setModalState({
            isVisible: false,
            title: '',
            content: '',
            footer: null,
            options: {},
        });
    };

    return (
        <ModalContext.Provider value={{ showModal, closeModal }}>
            {children}
            <GlobalModal
                isVisible={modalState.isVisible}
                title={modalState.title}
                content={modalState.content}
                footer={modalState.footer}
                onClose={closeModal}
                options={modalState.options}
            />
        </ModalContext.Provider>
    );
};
-e 


=========================
File: ./context/NotificationContext.js
=========================
// ./context/NotificationContext.js
import React, { createContext, useContext, useState } from 'react';
import NotificationBanner from '../components/Global/NotificationBanner';

const NotificationContext = createContext();

export const useNotification = () => useContext(NotificationContext);

export const NotificationProvider = ({ children }) => {
    const [notification, setNotification] = useState(null);

    const showNotification = (message, type = 'default', duration = 3000) => {
        setNotification({ message, type });
        if (duration > 0) {
            setTimeout(() => setNotification(null), duration);
        }
    };

    const closeNotification = () => setNotification(null);

    return (
        <NotificationContext.Provider value={{ showNotification }}>
            {children}
            {notification && (
                <NotificationBanner
                    message={notification.message}
                    type={notification.type}
                    onClose={closeNotification}
                />
            )}
        </NotificationContext.Provider>
    );
};
-e 


=========================
File: ./index.css
=========================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
-e 


=========================
File: ./index.js
=========================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import '@solana/wallet-adapter-react-ui/styles.css';
import { ModalProvider } from './context/ModalContext';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <ModalProvider>
        <App />
    </ModalProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
-e 


=========================
File: ./reportWebVitals.js
=========================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
-e 


=========================
File: ./setupTests.js
=========================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
-e 


=========================
File: ./utils/poolInteraction.js
=========================
import { Connection, PublicKey } from '@solana/web3.js';
import { Program, Provider } from '@project-serum/anchor';

const connection = new Connection('https://api.devnet.solana.com');
const provider = new Provider(connection, window.solana, 'processed');
const programId = new PublicKey('5dctRN4vE4AFJY6VrT2cMj8sTvSwMnDwuJEwvTD7HWjW'); // Replace with your program ID

export const getPools = async () => {
    const pools = await program.account.pool.all();
    return pools.map(({ account }) => ({
        address: account.pubkey.toString(),
        tokenA: account.tokenA.toString(),
        tokenB: account.tokenB.toString(),
        reserveA: account.reserveA,
        reserveB: account.reserveB,
    }));
};

export const addLiquidity = async (poolAddress, amountA, amountB) => {
    await program.rpc.addLiquidity(new PublicKey(poolAddress), amountA, amountB, {
        accounts: {
            // Add appropriate accounts here based on your Solana program structure
        },
    });
};
-e 


