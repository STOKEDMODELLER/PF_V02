Directory Tree of './src':
----------------------------------
./src
├── App.css
├── App.js
├── App.test.js
├── components
│   ├── AdvancedSettings
│   │   └── AdvancedSettings.js
│   ├── Banner
│   │   ├── Banner.js
│   │   └── index.js
│   ├── ConnectButton.js
│   ├── CreateLiquidityButton
│   │   ├── ButtonStyleController.js
│   │   └── CreateLiquidityButton.js
│   ├── CreatePool
│   │   ├── CreatePool.js
│   │   ├── CreatePoolForm.js
│   │   └── PoolInfoCard.js
│   ├── Global
│   │   ├── GlobalModal.css
│   │   ├── GlobalModal.js
│   │   ├── ModalStyles.js
│   │   └── NotificationBanner.js
│   ├── Header.js
│   ├── LiquidityCard
│   │   ├── CardStyles.js
│   │   ├── CreateLiquidityButt.js
│   │   └── LiquidityCard.js
│   ├── LiquidityInfo
│   │   └── LiquidityInfo.js
│   ├── MobileNavBar.js
│   ├── Pools
│   │   ├── ActionButtons.js
│   │   ├── Header.js
│   │   ├── PoolsList.js
│   │   ├── PoolsPage.js
│   │   └── SearchBar.js
│   ├── ProgramControl
│   │   └── PlatformInfo.js
│   ├── RefreshSlippage
│   │   └── RefreshSlippage.js
│   ├── SidePanel
│   │   └── SidePanel.js
│   ├── SwapCard
│   │   ├── SwapCard.js
│   │   └── index.js
│   ├── TokenCreation
│   │   ├── TokenCreation.css
│   │   ├── TokenCreation.js
│   │   ├── TokenCreationForm.js
│   │   ├── TokenPreview.js
│   │   ├── hooks
│   │   │   └── useTokenCreation.js
│   │   ├── services
│   │   │   └── tokenService.js
│   │   └── validations
│   │       └── tokenValidation.js
│   ├── TokenSelector
│   │   ├── LazyTokenList.js
│   │   ├── TokenRow.js
│   │   └── TokenSelector.js
│   ├── TransactionHistory
│   │   ├── PriceFeedDisplay.js
│   │   ├── TransactionHistory.css
│   │   └── TransactionHistory.js
│   ├── WalletProvider.js
│   ├── config
│   │   └── HeaderStyleConfig.js
│   └── hooks
│       ├── useLivePrice.js
│       └── useTokenBalances.js
├── context
│   ├── ConnectionContext.js
│   ├── ModalContext.js
│   ├── NotificationContext.js
│   └── PriceContext.js
├── index.css
├── index.js
├── js_css_files_with_content.txt
├── logo.svg
├── reportWebVitals.js
├── run.sh
├── setupTests.js
└── utils
    ├── anchorProvider.js
    ├── config.js
    ├── idl
    │   └── solana_amm.json
    └── poolInteraction.js

24 directories, 64 files


Contents of Files:
----------------------------------

--- File: ./src/App.css ---

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

/* Add this to your main CSS file, e.g., App.css */
.bg-pattern {
  background-image: url('https://www.toptal.com/designers/subtlepatterns/uploads/double-bubble.png');
  background-repeat: repeat;
  background-position: center;
  background-size: cover;
}

/* For mobile bottom navigation bar */
@media (max-width: 1024px) {
  .mobile-nav-bar {
    display: flex; /* This makes sure it is visible only on mobile */
  }
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

--- File: ./src/App.js ---

import React, { useState } from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import {
  WalletProvider,
  ConnectionProvider,
  useWallet,
  useConnection,
} from "@solana/wallet-adapter-react";
import { PhantomWalletAdapter } from "@solana/wallet-adapter-wallets";
import PropTypes from "prop-types";

import MobileNavBar from "./components/MobileNavBar";
import Header from "./components/Header";
import SidePanel from "./components/SidePanel/SidePanel";
import SwapCard from "./components/SwapCard";
import PoolsPage from "./components/Pools/PoolsPage";
import TransactionHistory from "./components/TransactionHistory/TransactionHistory";
import CreatePool from "./components/CreatePool/CreatePool";
import { NotificationProvider } from "./context/NotificationContext";
import { ModalProvider } from "./context/ModalContext";
import PlatformInfo from "./components/ProgramControl/PlatformInfo";
import TokenCreation from "./components/TokenCreation/TokenCreation";

const endpoint = process.env.REACT_APP_MAIN_RPC || "https://api.mainnet-beta.solana.com";

const TransactionHistoryWrapper = React.memo(() => {
  const { connection } = useConnection();
  const { publicKey } = useWallet();
  const walletAddress = publicKey?.toBase58();

  if (!walletAddress) {
    return <div className="text-white p-4">Please connect your wallet to view transaction history.</div>;
  }

  return <TransactionHistory walletAddress={walletAddress} connection={connection} />;
});

TransactionHistoryWrapper.propTypes = {
  walletAddress: PropTypes.string.isRequired,
  connection: PropTypes.object.isRequired,
};

const AppLayout = React.memo(({ children }) => (
  <div className="flex flex-col h-screen bg-black text-white">
    {/* Header */}
    <Header />

    {/* Main Content Wrapper */}
    <div className="flex flex-col flex-grow overflow-auto pt-16">
      <main className="p-4 flex flex-col items-center bg-pattern bg-cover bg-center gap-y-6">
        {children}
      </main>
    </div>
  </div>
));

const App = () => {
  const wallets = [new PhantomWalletAdapter()];
  const [fromToken, setFromToken] = useState({
    symbol: "SOL",
    address: "So11111111111111111111111111111111111111112",
    image: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/solana/info/logo.png",
  });

  const [toToken, setToToken] = useState({
    symbol: "USDC",
    address: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU",
    image: "https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU/logo.png",
  });

  const handleSwap = (fromAmount, fromToken, toToken, slippage) => {
    console.log("Swap initiated:", { fromAmount, fromToken, toToken, slippage });
  };

  return (
    <ConnectionProvider endpoint={endpoint}>
      <WalletProvider wallets={wallets} autoConnect>
        <NotificationProvider>
          <ModalProvider>
            <Router>
              <AppLayout>
                <Routes>
                  <Route
                    path="/home"
                    element={
                      <SwapCard
                        onSwap={handleSwap}
                        fromToken={fromToken}
                        setFromToken={setFromToken}
                        toToken={toToken}
                        setToToken={setToToken}
                      />
                    }
                  />
                  <Route path="/pools" element={<PoolsPage />} />
                  <Route path="/create-pool" element={<CreatePool />} />
                  <Route path="/transaction-history" element={<TransactionHistoryWrapper />} />
                  <Route path="/PlatformInfo" element={<PlatformInfo />} />
                  <Route path="/TokenCreation" element={<TokenCreation />} />
                </Routes>
              </AppLayout>
            </Router>
          </ModalProvider>
        </NotificationProvider>
      </WalletProvider>
    </ConnectionProvider>
  );
};

export default App;

--- File: ./src/App.test.js ---

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--- File: ./src/components/AdvancedSettings/AdvancedSettings.js ---

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import GlobalModal from '../Global/GlobalModal';

const AdvancedSettings = ({ slippage, onUpdateSlippage, isOpen = false, onClose }) => {
  const [customSlippage, setCustomSlippage] = useState('');

  const handleCustomInput = (e) => {
    const value = parseFloat(e.target.value);
    if (!isNaN(value) && value >= 0) {
      setCustomSlippage(value);
    } else {
      setCustomSlippage('');
    }
  };

  const handleApplyCustomSlippage = () => {
    if (customSlippage) {
      onUpdateSlippage(customSlippage);
    }
    onClose(); // Close the modal after applying the change
  };

  const content = (
    <div className="flex flex-col gap-y-4">
      <h4 className="text-xl font-semibold text-gray-100">Trade Slippage</h4>
      <p className="text-sm text-gray-400">
        Set the allowed percentage difference between the quoted price and the actual execution price.
      </p>
      <div className="flex items-center gap-x-4">
        <div
          className="flex items-center gap-2 bg-gray-800 text-gray-200 px-4 py-2 rounded-md"
          role="radiogroup"
          aria-label="Slippage Options"
        >
          {[0.1, 0.5, 1.0].map((value) => (
            <button
              key={value}
              type="button"
              role="radio"
              aria-checked={slippage === value}
              onClick={() => onUpdateSlippage(value)}
              className={`px-4 py-2 rounded-md ${
                slippage === value
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-700 text-gray-300 hover:bg-blue-700'
              }`}
            >
              {value}%
            </button>
          ))}
        </div>
        <input
          type="number"
          placeholder="Custom"
          value={customSlippage}
          onChange={handleCustomInput}
          className="flex-grow px-4 py-2 text-sm text-gray-200 bg-gray-800 border border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500"
        />
      </div>
      <button
        onClick={handleApplyCustomSlippage}
        disabled={!customSlippage && slippage === null}
        className={`mt-4 px-4 py-2 rounded-md font-semibold ${
          customSlippage || slippage !== null
            ? 'bg-blue-500 text-white hover:bg-blue-600'
            : 'bg-gray-700 text-gray-400 cursor-not-allowed'
        }`}
      >
        Done
      </button>
    </div>
  );

  return (
    <GlobalModal
      isVisible={isOpen}
      title="Advanced Settings"
      content={content}
      onClose={onClose}
      options={{
        modalHeight: 'auto', // Wrap content height
        modalWidth: '500px',
        scrollableContent: false, // No scrolling required for wrapped content
        theme: 'dark',
        showCloseButton: true,
      }}
    />
  );
};

AdvancedSettings.propTypes = {
  slippage: PropTypes.number.isRequired,
  onUpdateSlippage: PropTypes.func.isRequired,
  isOpen: PropTypes.bool,
  onClose: PropTypes.func.isRequired,
};

export default AdvancedSettings;

--- File: ./src/components/Banner/Banner.js ---

import React, { useState } from 'react';
import PropTypes from 'prop-types';

const Banner = ({ announcementLink, announcementText, title }) => {
  const [isVisible, setIsVisible] = useState(true);

  // Hide the banner when the close button is clicked
  if (!isVisible) {
    return null;
  }

  return (
    <div className="relative flex items-center justify-between bg-blue-700 text-white px-4 py-2 w-full shadow-lg animate-pulse shadow-blue-500/50">
      {/* Left Section: Branding/Title */}
      <div className="flex items-center gap-x-2">
        {/* Logo Icon */}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 81 15"
          className="h-4 text-gray-300"
        >
          <path
            fill="currentColor"
            d="M8.152 15q-2.313 0-4.173-.958-1.86-.98-2.92-2.688Q0 9.625 0 7.5t1.06-3.833Q2.12 1.937 3.979.979 5.839 0 8.152 0q2.314 0 4.174.98 1.86.957 2.92 2.666 1.058 1.708 1.059 3.854t-1.06 3.854q-1.06 1.71-2.92 2.688Q10.467 15 8.153 15m0-2.375q1.515 0 2.725-.646a4.94 4.94 0 0 0 1.903-1.833q.692-1.188.692-2.646t-.692-2.625a4.75 4.75 0 0 0-1.903-1.833q-1.211-.667-2.725-.667t-2.724.667a4.75 4.75 0 0 0-1.903 1.833Q2.832 6.042 2.833 7.5q0 1.458.692 2.646a4.94 4.94 0 0 0 1.903 1.833q1.21.646 2.724.646"
          />
        </svg>
        <span className="text-sm font-medium">{title}</span>
      </div>

      {/* Center Section: Announcement Text */}
      <div className="hidden md:block text-sm text-gray-100 font-semibold">
        <span className="text-lg">{announcementText}</span>
      </div>

      {/* Right Section: Link & Close Button */}
      <div className="flex items-center gap-x-2 text-sm">
        <a
          href={announcementLink}
          target="_blank"
          rel="noopener noreferrer"
          className="text-green-400 hover:text-green-300 transition"
        >
          Announcement
        </a>
        <button
          onClick={() => setIsVisible(false)}
          className="p-1 rounded hover:bg-gray-800 transition"
          aria-label="Close banner"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 16 16"
            className="h-4 w-4 text-gray-400"
          >
            <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z" />
          </svg>
        </button>
      </div>
    </div>
  );
};

Banner.propTypes = {
  announcementLink: PropTypes.string.isRequired,
  announcementText: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
};

export default Banner;

--- File: ./src/components/Banner/index.js ---


--- File: ./src/components/config/HeaderStyleConfig.js ---


--- File: ./src/components/ConnectButton.js ---

// src/components/ConnectButton.js
import React from 'react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';

const ConnectButton = () => {
  return (
    <div className="flex justify-center items-center h-full">
      <WalletMultiButton className="bg-gradient-to-r from-purple-500 to-green-400 text-white font-semibold px-6 py-2 rounded-full shadow-md transform transition hover:scale-105 hover:shadow-green-400/50 whitespace-nowrap w-[250px]" />
    </div>
  );
};

export default ConnectButton;

--- File: ./src/components/CreateLiquidityButton/ButtonStyleController.js ---

/**
 * ButtonStyleController manages button styles dynamically based on its state and progress.
 */
const ButtonStyleController = ({ status, cooldown, isProcessing }) => {
    let backgroundColor;
    let textColor = "text-white";
    let cursor = "cursor-not-allowed";
    let filter = "none";

    if (isProcessing) {
        backgroundColor = "bg-yellow-500";
    } else if (status === "success") {
        backgroundColor = "bg-green-500";
    } else if (status === "error") {
        backgroundColor = "bg-red-500";
    } else if (cooldown > 0) {
        const cooldownColors = ["bg-blue-600", "bg-blue-500", "bg-blue-400", "bg-blue-300", "bg-blue-200"];
        backgroundColor = cooldownColors[5 - cooldown] || "bg-blue-600";
        textColor = "text-gray-300";
        filter = "blur(1px)";
    } else {
        backgroundColor = "bg-blue-600 hover:brightness-110 hover:scale-105";
        cursor = "cursor-pointer";
    }

    return {
        backgroundColor,
        textColor,
        cursor,
        filter,
    };
};

export default ButtonStyleController;

--- File: ./src/components/CreateLiquidityButton/CreateLiquidityButton.js ---

import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import ButtonStyleController from "./ButtonStyleController";

const CreateLiquidityButton = ({ onCreate }) => {
    const [isProcessing, setIsProcessing] = useState(false);
    const [status, setStatus] = useState(""); // Tracks status ("loading", "success", or "error")
    const [cooldown, setCooldown] = useState(0); // Cooldown timer in seconds

    const handleClick = async () => {
        if (isProcessing || cooldown > 0) return;

        setIsProcessing(true);
        setStatus("loading");

        try {
            await onCreate();
            setStatus("success");
            setCooldown(5); // Set cooldown for 5 seconds
        } catch (error) {
            console.error("Error creating liquidity:", error);
            setStatus("error");
            setCooldown(5); // Set cooldown for 5 seconds even on error
        } finally {
            setIsProcessing(false);
        }
    };

    useEffect(() => {
        let timer;
        if (cooldown > 0) {
            timer = setInterval(() => {
                setCooldown((prev) => {
                    if (prev <= 1) {
                        setStatus(""); // Reset status after cooldown
                        clearInterval(timer);
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        }
        return () => clearInterval(timer);
    }, [cooldown]);

    const progressBarStyle = {
        width: `${(5 - cooldown) * 20}%`, // Adjust bar width based on cooldown
        backgroundColor: "gray",
        height: "4px",
        transition: "width 1s linear",
    };

    // Use ButtonStyleController to dynamically calculate styles
    const styles = ButtonStyleController({ status, cooldown, isProcessing });

    const getButtonText = () => {
        if (isProcessing) return "Hold tight, processing...";
        if (status === "success") return "Success! Pool Launched!";
        if (status === "error") return "Something went wrong. Try again?";
        if (cooldown > 0) return `Try again in (${cooldown}s)`;
        return "Launch Your Pool";
    };

    return (
        <div className="relative w-full">
            <button
                className={`w-full px-4 py-2 text-sm rounded-lg transition-all transform focus:outline-none ${styles.backgroundColor} ${styles.textColor} ${styles.cursor}`}
                style={{ filter: styles.filter }}
                onClick={handleClick}
                disabled={isProcessing || cooldown > 0}
            >
                {getButtonText()}
            </button>
            {cooldown > 0 && (
                <div className="absolute bottom-0 left-0 right-0">
                    <div style={progressBarStyle} />
                </div>
            )}
        </div>
    );
};

CreateLiquidityButton.propTypes = {
    onCreate: PropTypes.func.isRequired, // Function to execute when the button is clicked
};

export default CreateLiquidityButton;

--- File: ./src/components/CreatePool/CreatePool.js ---

import React, { useState, useEffect } from "react";
import { useWallet } from "@solana/wallet-adapter-react";
import { Connection } from "@solana/web3.js";
import { createPoolIfNotExists } from "../../utils/poolInteraction";
import { useNotification } from "../../context/NotificationContext";
import CreatePoolForm from "./CreatePoolForm";
import PoolInfoCard from "./PoolInfoCard";
import GlobalModal from "../Global/GlobalModal";
import TokenSelector from "../TokenSelector/TokenSelector";
import { checkPoolExists } from '../../utils/poolInteraction';

const CreatePool = () => {
  const wallet = useWallet();
  const { connected } = wallet;
  const { showNotification } = useNotification();

  const [tokenA, setTokenA] = useState(null);
  const [tokenB, setTokenB] = useState(null);
  const [amountA, setAmountA] = useState("");
  const [amountB, setAmountB] = useState("");
  const [existingPool, setExistingPool] = useState(null);
  const [isLoadingPool, setIsLoadingPool] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isTokenSelectorOpen, setIsTokenSelectorOpen] = useState(null);
  const [tokens, setTokens] = useState([]);
  const [connection] = useState(() => new Connection("https://api.devnet.solana.com"));

  useEffect(() => {
    const fetchTokens = async () => {
      try {
        const response = await fetch("tokens_dummy_data.json");
        const data = await response.json();
        if (Array.isArray(data.data)) {
          setTokens(data.data);
        } else {
          console.error("Invalid token data format.");
        }
      } catch (error) {
        console.error("Failed to fetch tokens:", error);
      }
    };
    fetchTokens();
  }, []);

  useEffect(() => {
    const fetchPoolInfo = async () => {
      if (!tokenA || !tokenB || !connected) return;
      setIsLoadingPool(true);
      const { pda, exists } = await checkPoolExists(tokenA.address, tokenB.address);
      setExistingPool(exists ? { address: pda.toBase58() } : null);
      setIsLoadingPool(false);
    };

    fetchPoolInfo();
  }, [tokenA, tokenB, connected]);

  const handleCreatePool = async () => {
    if (!connected || !wallet.publicKey || !wallet.signTransaction) {
      showNotification("Connect your wallet to create a liquidity pool.", "error");
      return;
    }

    if (!tokenA || !tokenB || !amountA || !amountB) {
      showNotification("Please fill in all required fields.", "error");
      return;
    }

    if (tokenA.address === tokenB.address) {
      showNotification("Token A and Token B must be different.", "error");
      return;
    }

    if (existingPool) {
      showNotification("A liquidity pool for this token pair already exists.", "error");
      return;
    }

    try {
      const txId = await createPoolIfNotExists(
        tokenA.address,
        tokenB.address,
        parseFloat(amountA),
        parseFloat(amountB),
        {
          publicKey: wallet.publicKey,
          signTransaction: wallet.signTransaction.bind(wallet),
          signAllTransactions: wallet.signAllTransactions
            ? wallet.signAllTransactions.bind(wallet)
            : async (txs) => txs,
        }
      );
      if (txId) {
        showNotification(`Your pool was created successfully! Transaction ID: ${txId}`, "success");
        resetForm();
      }
    } catch (error) {
      console.error("Error creating pool:", error);
      showNotification(`Error creating pool: ${error.message}`, "error");
    }
  };

  const resetForm = () => {
    setTokenA(null);
    setTokenB(null);
    setAmountA("");
    setAmountB("");
    setExistingPool(null);
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
      <h2 className="text-3xl font-semibold text-white mb-6 text-center">
        Launch Your Liquidity Pool
      </h2>
      <p className="text-gray-300 text-sm text-center mb-6">
        Seamlessly pair your tokens and make them tradable. Enter the token details below to kickstart your liquidity pool in seconds.
      </p>

      <CreatePoolForm
        tokenA={tokenA}
        tokenB={tokenB}
        amountA={amountA}
        amountB={amountB}
        setTokenA={setTokenA}
        setTokenB={setTokenB}
        setAmountA={setAmountA}
        setAmountB={setAmountB}
        openTokenSelector={(type) => {
          setIsTokenSelectorOpen(type);
          setIsModalVisible(true);
        }}
        handleCreatePool={handleCreatePool}
        existingPool={existingPool}
        isLoadingPool={isLoadingPool}
      />

      {isModalVisible && (
        <GlobalModal
          isVisible={isModalVisible}
          title="Choose a Token"
          content={
            <TokenSelector
              onSelectToken={(token) => {
                if (isTokenSelectorOpen === "tokenA") setTokenA(token);
                if (isTokenSelectorOpen === "tokenB") setTokenB(token);
                setIsModalVisible(false);
              }}
              onClose={() => setIsModalVisible(false)}
              connection={connection}
              tokens={tokens}
            />
          }
          onClose={() => setIsModalVisible(false)}
        />
      )}

      {existingPool && (
        <div className="mt-6">
          <PoolInfoCard pool={existingPool} tokenAInfo={tokenA} tokenBInfo={tokenB} />
        </div>
      )}
    </div>
  );
};

export default CreatePool;

--- File: ./src/components/CreatePool/CreatePoolForm.js ---

import React, { useEffect, useState } from "react";
import PropTypes from "prop-types";
import { useLivePrice } from "../hooks/useLivePrice";
import { useModal } from "../../context/ModalContext";
import TokenSelector from "../TokenSelector/TokenSelector";

const CreatePoolForm = ({
  tokenA,
  tokenB,
  amountA,
  amountB,
  setAmountA,
  setAmountB,
  setTokenA,
  setTokenB,
  handleCreatePool,
  existingPool,
  isLoadingPool,
  connection,
  tokens,
}) => {
  const { priceA, priceB, exchangeRate, lastUpdated, remainingTime } = useLivePrice(
    tokenA?.address,
    tokenB?.address
  );

  const { showModal, closeModal } = useModal();

  const [showWarning, setShowWarning] = useState(false);
  const [isLoadingPrices, setIsLoadingPrices] = useState(false);
  const [priceUnavailableMessage, setPriceUnavailableMessage] = useState("");

  useEffect(() => {
    if (!tokenA || !tokenB) {
      setShowWarning(false);
      setIsLoadingPrices(false);
      setPriceUnavailableMessage("");
      return;
    }

    if (priceA === null && priceB === null) {
      setIsLoadingPrices(false);
      setShowWarning(true);
      setPriceUnavailableMessage(
        `Prices are unavailable for both ${tokenA?.metadata?.symbol || tokenA?.symbol || "Token A"} and ${
          tokenB?.metadata?.symbol || tokenB?.symbol || "Token B"
        }. Ensure both tokens have valid prices before creating a pool.`
      );
    } else if (priceA === null || priceB === null) {
      setIsLoadingPrices(false);
      setShowWarning(true);
      setPriceUnavailableMessage(
        `Price unavailable for ${
          !priceA ? tokenA?.metadata?.symbol || tokenA?.symbol || "Token A" : ""
        } ${!priceA && !priceB ? "and" : ""} ${
          !priceB ? tokenB?.metadata?.symbol || tokenB?.symbol || "Token B" : ""
        }. Ensure both tokens have valid prices before creating a pool.`
      );
    } else {
      setIsLoadingPrices(false);
      setShowWarning(false);
      setPriceUnavailableMessage("");
    }
  }, [priceA, priceB, tokenA, tokenB]);

  const handleAmountAChange = (value) => {
    setAmountA(value);
    if (exchangeRate) {
      setAmountB((parseFloat(value) * exchangeRate).toFixed(6));
    }
  };

  const handleAmountBChange = (value) => {
    setAmountB(value);
    if (exchangeRate) {
      setAmountA((parseFloat(value) / exchangeRate).toFixed(6));
    }
  };

  const openTokenSelection = (target) => {
    showModal(
      "Select a Token",
      <TokenSelector
        onSelectToken={(selectedToken) => {
          if (target === "tokenA") {
            setTokenA(selectedToken);
          } else {
            setTokenB(selectedToken);
          }
          closeModal();
        }}
        onClose={closeModal}
        connection={connection}
        tokens={tokens}
      />,
      null,
      {
        showCloseButton: true,
        scrollableContent: true,
        modalWidth: "500px",
        backdropOpacity: 0.85,
        theme: "dark",
      }
    );
  };

  return (
    <div className="flex flex-col w-full md:max-w-md p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur relative">
      <div className="mb-4">
        <label className="text-sm text-gray-300 mb-2 block">Choose the First Token</label>
        <button
          onClick={() => openTokenSelection("tokenA")}
          className="w-full py-2 bg-blue-600 text-white rounded-lg flex items-center justify-between px-4 hover:brightness-110 transition"
        >
          {tokenA ? (
            <>
              <span>{tokenA.metadata?.symbol || tokenA.symbol}</span>
              <span className="text-sm text-gray-200">
                {`(${tokenA.address.slice(0, 4)}...${tokenA.address.slice(-4)})`}
              </span>
            </>
          ) : (
            "Select Token"
          )}
        </button>
      </div>

      <div className="mb-4">
        <label className="text-sm text-gray-300 mb-2 block">Choose the Second Token</label>
        <button
          onClick={() => openTokenSelection("tokenB")}
          className="w-full py-2 bg-blue-600 text-white rounded-lg flex items-center justify-between px-4 hover:brightness-110 transition"
        >
          {tokenB ? (
            <>
              <span>{tokenB.metadata?.symbol || tokenB.symbol}</span>
              <span className="text-sm text-gray-200">
                {`(${tokenB.address.slice(0, 4)}...${tokenB.address.slice(-4)})`}
              </span>
            </>
          ) : (
            "Select Token"
          )}
        </button>
      </div>

      {!tokenA || !tokenB ? (
        <div className="p-4 bg-gray-800 rounded-lg border border-yellow-600 shadow-md">
          <p className="text-yellow-300 text-sm text-center font-bold">No tokens selected yet!</p>
          <p className="text-gray-300 text-xs text-center mt-2">
            Please select both Token A and Token B above to configure your liquidity pool. Once you've selected your tokens, you'll be able to set the amounts and create your pool.
          </p>
          <p className="text-gray-500 text-xs text-center mt-4 italic">
            Selecting tokens is the first step to establishing a successful liquidity pool.
          </p>
        </div>
      ) : (
        <div className="relative">
          {isLoadingPrices && (
            <div className="absolute inset-0 bg-black/60 flex flex-col items-center justify-center rounded-lg z-10">
              <p className="text-white text-lg font-semibold">Loading...</p>
            </div>
          )}

          {showWarning && (
            <div className="absolute inset-0 bg-red-700/80 flex flex-col items-center justify-center rounded-lg z-10 p-4">
              <p className="text-white text-sm text-center font-bold">Warning: {priceUnavailableMessage}</p>
              <p className="text-gray-300 text-xs text-center mt-2">
                Please try again later or choose a different token pair to proceed.
              </p>
            </div>
          )}

          <div
            className={`p-4 bg-gray-800 rounded-lg border border-blue-700 shadow-md ${
              (isLoadingPrices || showWarning) ? "blur-sm pointer-events-none" : ""
            }`}
          >
            <div className="mb-4">
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm text-gray-300">Initial Price (1 Token A = X Token B)</label>
                <div className="flex items-center text-sm text-gray-400">
                  <div
                    className="h-4 w-4 border-2 border-blue-500 rounded-full flex justify-center items-center animate-spin"
                    style={{ animationDuration: `${5 - remainingTime}s` }}
                  />
                  <span className="ml-2">{remainingTime}s</span>
                </div>
              </div>
              <p className="text-xs text-gray-400 mb-2">
                This deal is quoted for {remainingTime} seconds. Last updated at {lastUpdated?.toLocaleTimeString() || "N/A"}.
              </p>
              <div className="w-full py-3 px-4 bg-gray-900 text-white rounded-lg">
                {exchangeRate !== null ? (
                  `1 ${tokenA?.metadata?.symbol || tokenA.symbol} = ${exchangeRate.toFixed(6)} ${
                    tokenB?.metadata?.symbol || tokenB.symbol
                  }`
                ) : (
                  <span className="text-gray-500">Fetching price...</span>
                )}
              </div>
            </div>

            <div className="mb-4">
              <label className="text-sm text-gray-300 mb-2 block">Enter Amount for the First Token</label>
              <input
                type="number"
                value={amountA}
                onChange={(e) => handleAmountAChange(e.target.value)}
                placeholder="E.g., 100.0"
                className="w-full py-3 px-4 bg-gray-900 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
            </div>

            <div className="mb-4">
              <label className="text-sm text-gray-300 mb-2 block">Enter Amount for the Second Token</label>
              <input
                type="number"
                value={amountB}
                onChange={(e) => handleAmountBChange(e.target.value)}
                placeholder="E.g., 200.0"
                className="w-full py-3 px-4 bg-gray-900 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
            </div>

            <button
              onClick={handleCreatePool}
              disabled={!!existingPool || isLoadingPool || showWarning}
              className={`w-full py-3 text-white font-bold rounded-lg transition ${
                isLoadingPool || showWarning
                  ? "bg-gradient-to-b from-gray-400 to-gray-600 cursor-not-allowed"
                  : "bg-gradient-to-b from-blue-500 to-blue-700 hover:brightness-110"
              }`}
            >
              {isLoadingPool ? "Checking Pool..." : existingPool ? "Pool Exists" : "Create Pool"}
            </button>
          </div>
        </div>
      )}

      {existingPool && (
        <p className="mt-4 text-sm text-yellow-400 text-center">
          A pool for these tokens already exists. You can add liquidity instead.
        </p>
      )}
    </div>
  );
};

CreatePoolForm.propTypes = {
  tokenA: PropTypes.object,
  tokenB: PropTypes.object,
  amountA: PropTypes.string.isRequired,
  amountB: PropTypes.string.isRequired,
  setAmountA: PropTypes.func.isRequired,
  setAmountB: PropTypes.func.isRequired,
  setTokenA: PropTypes.func.isRequired,
  setTokenB: PropTypes.func.isRequired,
  handleCreatePool: PropTypes.func.isRequired,
  existingPool: PropTypes.object,
  isLoadingPool: PropTypes.bool.isRequired,
  connection: PropTypes.object.isRequired,
  tokens: PropTypes.array.isRequired,
};

export default CreatePoolForm;

--- File: ./src/components/CreatePool/PoolInfoCard.js ---

import React from 'react';
import PropTypes from 'prop-types';

const PoolInfoCard = ({ pool, tokenAInfo, tokenBInfo }) => {
  if (!pool || !pool.account) {
    return (
      <div className="p-4 bg-gray-800 rounded-lg shadow-md text-white">
        <p>Error: Pool data is unavailable.</p>
      </div>
    );
  }

  try {
    const { publicKey, account } = pool;
    // Extract necessary pool data
    const tokenAPubKey = account.tokenA;
    const tokenBPubKey = account.tokenB;
    const reserveA = account.reserveA.toNumber();
    const reserveB = account.reserveB.toNumber();

    // Optional: Display token metadata if provided
    const tokenASymbol = tokenAInfo?.symbol || tokenAPubKey.toString().slice(0, 4) + '...' + tokenAPubKey.toString().slice(-4);
    const tokenBSymbol = tokenBInfo?.symbol || tokenBPubKey.toString().slice(0, 4) + '...' + tokenBPubKey.toString().slice(-4);
    const tokenAImage = tokenAInfo?.image || 'https://via.placeholder.com/24';
    const tokenBImage = tokenBInfo?.image || 'https://via.placeholder.com/24';

    return (
      <div className="p-4 bg-gray-800 rounded-lg shadow-md text-white">
        <h3 className="text-lg font-semibold mb-2">Pool Information</h3>
        <div className="flex items-center mb-4">
          <img src={tokenAImage} alt={tokenASymbol} className="w-6 h-6 mr-2 rounded-full" />
          <span>{tokenASymbol}</span>
          <span className="mx-2">/</span>
          <img src={tokenBImage} alt={tokenBSymbol} className="w-6 h-6 mr-2 rounded-full" />
          <span>{tokenBSymbol}</span>
        </div>
        <p className="mb-2">
          <strong>Pool Address:</strong> {publicKey.toString()}
        </p>
        <p className="mb-2">
          <strong>Reserve {tokenASymbol}:</strong> {reserveA}
        </p>
        <p className="mb-2">
          <strong>Reserve {tokenBSymbol}:</strong> {reserveB}
        </p>
        {/* Include additional pool details as needed */}
      </div>
    );
  } catch (error) {
    console.error('Error rendering PoolInfoCard:', error);
    return (
      <div className="p-4 bg-gray-800 rounded-lg shadow-md text-white">
        <p>Error displaying pool information.</p>
      </div>
    );
  }
};

PoolInfoCard.propTypes = {
  pool: PropTypes.shape({
    publicKey: PropTypes.object.isRequired,
    account: PropTypes.shape({
      tokenA: PropTypes.object.isRequired,
      tokenB: PropTypes.object.isRequired,
      reserveA: PropTypes.object.isRequired, // Assuming BN
      reserveB: PropTypes.object.isRequired, // Assuming BN
    }).isRequired,
  }).isRequired,
  tokenAInfo: PropTypes.shape({
    symbol: PropTypes.string,
    image: PropTypes.string,
  }),
  tokenBInfo: PropTypes.shape({
    symbol: PropTypes.string,
    image: PropTypes.string,
  }),
};

PoolInfoCard.defaultProps = {
  tokenAInfo: null,
  tokenBInfo: null,
};

export default PoolInfoCard;

--- File: ./src/components/Global/GlobalModal.css ---

.modal-enter {
    opacity: 0;
    transform: scale(0.95);
  }
  .modal-enter-active {
    opacity: 1;
    transform: scale(1);
    transition: opacity 300ms ease, transform 300ms ease;
  }
  .modal-exit {
    opacity: 1;
    transform: scale(1);
  }
  .modal-exit-active {
    opacity: 0;
    transform: scale(0.95);
    transition: opacity 300ms ease, transform 300ms ease;
  }
  
--- File: ./src/components/Global/GlobalModal.js ---

import React, { useEffect, useRef } from "react";
import ReactDOM from "react-dom";
import PropTypes from "prop-types";
import classNames from "classnames";
import { CSSTransition } from "react-transition-group";
import SimpleBar from "simplebar-react";
import "simplebar-react/dist/simplebar.min.css";
import "./GlobalModal.css";
import { getModalStyles } from "./ModalStyles";

const GlobalModal = ({
  isVisible,
  title = "",
  content,
  footer = null,
  onClose,
  options = {},
}) => {
  const modalRef = useRef(null);

  const {
    fixedHeader = false,
    fixedFooter = false,
    showCloseButton = true,
    scrollableContent = false,
    modalWidth = "500px",
    backdropOpacity = 0.85,
    modalOpacity = 0.3,
    zIndex = 50,
    closeOnEscape = true,
    closeOnClickOutside = true,
    theme = "dark",
    customStyles = {},
  } = options;

  const styles = getModalStyles({ theme, backdropOpacity, modalOpacity, customStyles });

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (closeOnEscape && event.key === "Escape") {
        onClose();
      }
    };

    if (isVisible) {
      document.addEventListener("keydown", handleKeyDown);
    }

    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [isVisible, closeOnEscape, onClose]);

  const handleOutsideClick = (event) => {
    if (
      isVisible &&
      closeOnClickOutside &&
      modalRef.current &&
      !modalRef.current.contains(event.target)
    ) {
      onClose();
    }
  };

  const modalContent = (
    <CSSTransition
      in={isVisible}
      timeout={300}
      classNames="modal"
      unmountOnExit
    >
      <div
        className={classNames(
          "fixed inset-0 flex items-center justify-center transition-opacity duration-300"
        )}
        style={{
          backgroundColor: styles.backdropColor,
          zIndex,
        }}
        onClick={handleOutsideClick}
      >
        <div
          ref={modalRef}
          className="rounded-lg shadow-lg flex flex-col relative opacity-100 backdrop-blur-lg"
          style={{
            width: modalWidth,
            maxHeight: "90vh",
            backgroundColor: styles.background,
            color: styles.textColor,
            borderColor: styles.borderColor,
            boxShadow: "0px 10px 30px rgba(0, 0, 0, 0.9)",
            borderRadius: "1rem",
            transition: "opacity 300ms ease, transform 300ms ease",
            ...customStyles.container,
          }}
        >
          {(title || showCloseButton) && (
            <div
              className={classNames(
                "flex items-center justify-between px-4 py-3 border-b",
                fixedHeader ? "sticky top-0 z-10" : ""
              )}
              style={{
                borderColor: styles.borderColor,
                backgroundColor: styles.background,
                ...customStyles.header,
              }}
            >
              {title && <h3 className="text-lg font-semibold">{title}</h3>}
              {showCloseButton && (
                <button
                  onClick={onClose}
                  className="focus:outline-none text-gray-400 hover:text-gray-600"
                  aria-label="Close Modal"
                >
                  ✕
                </button>
              )}
            </div>
          )}
          <div
            className={classNames("flex-1")}
            style={{
              padding: "1rem",
              overflow: scrollableContent ? "hidden" : "visible",
              ...customStyles.content,
            }}
          >
            {scrollableContent ? (
              <SimpleBar
                style={{
                  maxHeight: "calc(90vh - 6rem)",
                }}
                autoHide
              >
                {content}
              </SimpleBar>
            ) : (
              content
            )}
          </div>
          {footer && (
            <div
              className={classNames(
                "px-4 py-3 border-t",
                fixedFooter ? "sticky bottom-0 z-10" : ""
              )}
              style={{
                borderColor: styles.borderColor,
                backgroundColor: styles.background,
                ...customStyles.footer,
              }}
            >
              {footer}
            </div>
          )}
        </div>
      </div>
    </CSSTransition>
  );

  return ReactDOM.createPortal(modalContent, document.body);
};

GlobalModal.propTypes = {
  isVisible: PropTypes.bool.isRequired,
  title: PropTypes.string,
  content: PropTypes.node.isRequired,
  footer: PropTypes.node,
  onClose: PropTypes.func.isRequired,
  options: PropTypes.shape({
    fixedHeader: PropTypes.bool,
    fixedFooter: PropTypes.bool,
    showCloseButton: PropTypes.bool,
    scrollableContent: PropTypes.bool,
    modalWidth: PropTypes.string,
    modalHeight: PropTypes.string,
    backdropOpacity: PropTypes.number,
    modalOpacity: PropTypes.number,
    zIndex: PropTypes.number,
    closeOnEscape: PropTypes.bool,
    closeOnClickOutside: PropTypes.bool,
    theme: PropTypes.oneOf(["light", "dark"]),
    customStyles: PropTypes.object,
  }),
};

export default GlobalModal;

--- File: ./src/components/Global/ModalStyles.js ---

import PropTypes from 'prop-types';

// Centralised styles for the GlobalModal
export const getModalStyles = ({
  theme,
  backdropOpacity,
  modalOpacity,
  customStyles = {},
}) => {
  const defaultStyles = {
    light: {
      background: `rgba(255, 255, 255, ${modalOpacity})`, // Translucent white
      textColor: '#000000',
      borderColor: 'rgba(0, 0, 0, 0.1)',
      backdropColor: `rgba(0, 0, 0, ${backdropOpacity})`,
    },
    dark: {
      background: `rgba(30, 30, 47, ${modalOpacity})`, // Translucent dark
      textColor: '#FFFFFF',
      borderColor: 'rgba(255, 255, 255, 0.1)',
      backdropColor: `rgba(0, 0, 0, ${backdropOpacity})`,
    },
  };

  return {
    ...defaultStyles[theme],
    ...customStyles,
  };
};

getModalStyles.propTypes = {
  theme: PropTypes.oneOf(['light', 'dark']).isRequired,
  backdropOpacity: PropTypes.number.isRequired,
  modalOpacity: PropTypes.number.isRequired,
  customStyles: PropTypes.object,
};

--- File: ./src/components/Global/NotificationBanner.js ---

// ./components/Global/NotificationBanner.js
import React from 'react';
import PropTypes from 'prop-types';

const NotificationBanner = ({ message, type, onClose }) => {
    const bgColor =
        type === 'success' ? 'bg-green-500' :
        type === 'error' ? 'bg-red-500' :
        type === 'info' ? 'bg-blue-500' : 'bg-gray-500';

    return (
        <div className={`${bgColor} text-white text-center py-2 px-4`}>
            <div className="flex justify-between items-center">
                <span>{message}</span>
                {onClose && (
                    <button
                        onClick={onClose}
                        className="ml-4 text-white hover:text-gray-300 focus:outline-none"
                    >
                        ✕
                    </button>
                )}
            </div>
        </div>
    );
};

NotificationBanner.propTypes = {
    message: PropTypes.string.isRequired,
    type: PropTypes.oneOf(['success', 'error', 'info', 'default']),
    onClose: PropTypes.func,
};

NotificationBanner.defaultProps = {
    type: 'default',
    onClose: null,
};

export default NotificationBanner;

--- File: ./src/components/Header.js ---

import React, { useState, useEffect, useRef } from "react";
import ConnectButton from "./ConnectButton";

const Header = () => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const dropdownRef = useRef(null);

  const toggleDropdown = () => setIsDropdownOpen((prev) => !prev);
  const toggleMobileMenu = () => setIsMobileMenuOpen((prev) => !prev);

  useEffect(() => {
    const handleOutsideClick = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    const handleKeyDown = (event) => {
      if (event.key === "Escape") {
        setIsDropdownOpen(false);
        setIsMobileMenuOpen(false);
      }
    };

    document.addEventListener("mousedown", handleOutsideClick);
    document.addEventListener("keydown", handleKeyDown);

    return () => {
      document.removeEventListener("mousedown", handleOutsideClick);
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  return (
    <header className="bg-gradient-to-r from-indigo-900 via-gray-900 to-blue-900 shadow-md w-full z-50 h-16 fixed top-0">
      <nav className="mx-auto max-w-7xl w-full flex items-center justify-between px-6 h-full">
        {/* Logo and Name */}
        <div className="flex items-center lg:flex-1">
          <a href="/" className="flex items-center space-x-2">
            <img
              className="h-8 w-auto"
              src="logo.png" // Replace with your logo path
              alt="SolanaApp Logo"
            />
            <span className="text-lg font-bold text-white">SolanaApp</span>
          </a>
        </div>

        {/* Navigation Links - Centered */}
        <div className="hidden lg:flex lg:gap-x-12">
          {["Home", "Pools", "Portfolio", "Transaction History", "PlatformInfo"].map((link) => (
            <a
              key={link}
              href={`/${link.replace(/\s+/g, "-").toLowerCase()}`}
              className="text-sm font-semibold text-gray-300 hover:text-white"
            >
              {link}
            </a>
          ))}

          {/* Dropdown Menu */}
          <div className="relative" ref={dropdownRef}>
            <button
              type="button"
              className="flex items-center gap-x-1 text-sm font-semibold text-gray-300 hover:text-white"
              onClick={toggleDropdown}
              aria-expanded={isDropdownOpen}
            >
              Create
              <svg
                className={`h-5 w-5 transform transition-transform ${
                  isDropdownOpen ? "rotate-180" : ""
                }`}
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
            {isDropdownOpen && (
              <div
                className="absolute right-0 mt-2 w-40 bg-gray-800 rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
                role="menu"
              >
                <a
                  href="/tokencreation"
                  className="block px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white"
                  role="menuitem"
                >
                  Create Tokens
                </a>
                <a
                  href="/create-pool"
                  className="block px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white"
                  role="menuitem"
                >
                  Create Pools
                </a>
              </div>
            )}
          </div>
        </div>

        {/* Connect Button - Right Aligned */}
        <div className="hidden lg:flex lg:flex-1 lg:justify-end">
          <ConnectButton />
        </div>

        {/* Mobile Menu Button */}
        <div className="flex lg:hidden">
          <button
            type="button"
            onClick={toggleMobileMenu}
            className="inline-flex items-center justify-center p-2 rounded-md text-gray-300 hover:text-white hover:bg-gray-700 focus:outline-none"
          >
            <span className="sr-only">Open main menu</span>
            <svg
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              aria-hidden="true"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
              />
            </svg>
          </button>
        </div>
      </nav>

      {/* Mobile Menu */}
      {isMobileMenuOpen && (
        <div
          className="lg:hidden fixed inset-0 bg-gradient-to-b from-indigo-900 to-gray-900 z-40 p-6 overflow-y-auto"
          role="dialog"
          aria-modal="true"
        >
          <div className="flex items-center justify-between">
            <a href="/" className="flex items-center space-x-2">
              <img
                className="h-8 w-auto"
                src="logo.png" // Replace with your logo path
                alt="SolanaApp Logo"
              />
              <span className="text-lg font-bold text-white">SolanaApp</span>
            </a>
            <button
              type="button"
              onClick={toggleMobileMenu}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-300 hover:text-white hover:bg-gray-700 focus:outline-none"
            >
              <span className="sr-only">Close menu</span>
              <svg
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>
          <div className="mt-6">
            <nav className="space-y-4">
              {["Home", "Pools", "Portfolio", "Transaction History", "PlatformInfo"].map((link) => (
                <a
                  key={link}
                  href={`/${link.replace(/\s+/g, "-").toLowerCase()}`}
                  className="block text-base font-semibold text-gray-300 hover:text-white"
                >
                  {link}
                </a>
              ))}
              <a
                href="/tokencreation"
                className="block text-base font-semibold text-gray-300 hover:text-white"
              >
                Create Tokens
              </a>
              <a
                href="/create-pool"
                className="block text-base font-semibold text-gray-300 hover:text-white"
              >
                Create Pools
              </a>
            </nav>
          </div>
        </div>
      )}
    </header>
  );
};

export default Header;

--- File: ./src/components/hooks/useLivePrice.js ---

import { useState, useEffect, useCallback } from "react";

export const useLivePrice = (tokenAAddress, tokenBAddress) => {
  const [priceA, setPriceA] = useState(null);
  const [priceB, setPriceB] = useState(null);
  const [exchangeRate, setExchangeRate] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [remainingTime, setRemainingTime] = useState(5);

  // Fetch prices for tokens
  const fetchPrices = useCallback(async () => {
    if (!tokenAAddress || !tokenBAddress) return;

    try {
      const response = await fetch(
        `https://api.jup.ag/price/v2?ids=${tokenAAddress},${tokenBAddress}`
      );
      const data = await response.json();

      const tokenAPrice = data?.data[tokenAAddress]?.price || null;
      const tokenBPrice = data?.data[tokenBAddress]?.price || null;

      setPriceA(tokenAPrice ? parseFloat(tokenAPrice) : null);
      setPriceB(tokenBPrice ? parseFloat(tokenBPrice) : null);

      if (tokenAPrice && tokenBPrice) {
        setExchangeRate(parseFloat(tokenAPrice) / parseFloat(tokenBPrice));
      } else {
        setExchangeRate(null); // Exchange rate invalid if any price is missing
      }

      setLastUpdated(new Date());
      setRemainingTime(5); // Reset timer
    } catch (error) {
      console.error("Error fetching prices:", error);
      setPriceA(null);
      setPriceB(null);
      setExchangeRate(null);
    }
  }, [tokenAAddress, tokenBAddress]);

  // Timer to refresh prices every 5 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setRemainingTime((prev) => {
        if (prev <= 1) {
          fetchPrices(); // Refresh prices when timer reaches 0
          return 5;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [fetchPrices]);

  useEffect(() => {
    fetchPrices();
  }, [fetchPrices]);

  return {
    priceA,
    priceB,
    exchangeRate,
    lastUpdated,
    remainingTime,
    refreshPrice: fetchPrices,
  };
};

--- File: ./src/components/hooks/useTokenBalances.js ---

import { useEffect, useState } from "react";
import { PublicKey } from "@solana/web3.js";

export const useTokenBalances = (walletPublicKey, connection, tokens) => {
  const [balances, setBalances] = useState({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!walletPublicKey || !connection) {
      setBalances({});
      setLoading(false);
      return;
    }

    const fetchBalances = async () => {
      try {
        setLoading(true);
        const walletPubKey = new PublicKey(walletPublicKey);

        // Fetch token accounts owned by the wallet
        const tokenAccounts = await connection.getParsedTokenAccountsByOwner(walletPubKey, {
          programId: new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"),
        });

        const balanceMap = {};

        // Parse token account data and calculate balances
        tokenAccounts.value.forEach(({ account }) => {
          const { mint, tokenAmount } = account.data.parsed.info;
          const balance = Number(tokenAmount.amount) / Math.pow(10, tokenAmount.decimals);
          balanceMap[mint] = balance;
        });

        // Map balances to tokens in the list
        const matchedBalances = tokens.reduce((acc, token) => {
          acc[token.address] = balanceMap[token.address] || 0;
          return acc;
        }, {});

        setBalances(matchedBalances);
      } catch (error) {
        setBalances({});
      } finally {
        setLoading(false);
      }
    };

    fetchBalances();
  }, [walletPublicKey, connection, tokens]);

  return { balances, loading };
};

--- File: ./src/components/LiquidityCard/CardStyles.js ---

export const getCardStyles = ({
  theme = "dark",
  width = "100%",
  padding = "1rem",
  borderRadius = "1rem",
  shadow = true,
  customStyles = {},
}) => ({
  container: {
    width,
    padding,
    borderRadius,
    backgroundColor: theme === "dark" ? "#1e293b" : "#ffffff",
    color: theme === "dark" ? "#f8fafc" : "#1f2937",
    boxShadow: shadow ? "0px 4px 10px rgba(0, 0, 0, 0.1)" : "none",
    border: `1px solid ${theme === "dark" ? "#334155" : "#e2e8f0"}`,
    ...customStyles.container,
  },
  title: {
    fontSize: "1.25rem",
    fontWeight: "bold",
    marginBottom: "1rem",
    ...customStyles.title,
  },
  content: {
    gap: "1rem",
    ...customStyles.content,
  },
  infoItem: {
    backgroundColor: theme === "dark" ? "#1e293b" : "#ffffff",
    borderRadius: "0.5rem",
    padding: "1rem",
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    border: `1px solid ${theme === "dark" ? "#334155" : "#e2e8f0"}`,
    ...customStyles.infoItem,
  },
  label: {
    fontSize: "0.875rem",
    color: theme === "dark" ? "#f8fafc" : "#1f2937",
    ...customStyles.label,
  },
  value: {
    fontSize: "1.5rem",
    fontWeight: "bold",
    color: theme === "dark" ? "#f8fafc" : "#1f2937",
    ...customStyles.value,
  },
  button: {
    position: "relative",
    backgroundColor: theme === "dark" ? "#2563eb" : "#3b82f6",
    color: "#ffffff",
    padding: "0.75rem 1.5rem",
    borderRadius: "0.5rem",
    border: "none",
    cursor: "pointer",
    fontWeight: "bold",
    fontSize: "1rem",
    transition: "transform 0.2s, box-shadow 0.2s, filter 0.2s",
    boxShadow: "0px 4px 15px rgba(0, 0, 0, 0.2)", // Add shadow to the button
    overflow: "hidden",

    ":hover": {
      transform: "scale(1.05)",
      boxShadow: "0px 6px 20px rgba(0, 0, 0, 0.3)", // Increase shadow on hover
    },

    "::after": {
      content: '""',
      position: "absolute",
      top: "0",
      left: "0",
      right: "0",
      bottom: "0",
      backgroundColor: theme === "dark" ? "#1e3a8a" : "#1d4ed8", // Darker shade for hover effect
      filter: "blur(8px)", // Apply Gaussian blur
      opacity: "0",
      transition: "opacity 0.3s",
    },

    ":hover::after": {
      opacity: "0.6", // Make the darker shade visible on hover
    },

    ...customStyles.button,
  },
  buttonSmall: {
    backgroundColor: theme === "dark" ? "#2563eb" : "#3b82f6",
    color: "#ffffff",
    padding: "0.5rem 1rem",
    borderRadius: "0.25rem",
    border: "none",
    cursor: "pointer",
    fontWeight: "bold",
    fontSize: "0.875rem",
    transition: "transform 0.2s, box-shadow 0.2s, filter 0.2s",
    boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",

    ":hover": {
      transform: "scale(1.05)",
      boxShadow: "0px 6px 15px rgba(0, 0, 0, 0.3)",
    },

    "::after": {
      content: '""',
      position: "absolute",
      top: "0",
      left: "0",
      right: "0",
      bottom: "0",
      backgroundColor: theme === "dark" ? "#1e3a8a" : "#1d4ed8",
      filter: "blur(6px)",
      opacity: "0",
      transition: "opacity 0.3s",
    },

    ":hover::after": {
      opacity: "0.6",
    },

    ...customStyles.buttonSmall,
  },
});

--- File: ./src/components/LiquidityCard/CreateLiquidityButt.js ---

import React from "react";
import PropTypes from "prop-types";
import { useNavigate } from "react-router-dom"; // Import useNavigate
import { getCardStyles } from "./CardStyles";

const CreateLiquidityButton = ({ theme = "dark" }) => {
  const styles = getCardStyles({ theme });
  const navigate = useNavigate(); // Use React Router's useNavigate

  const handleClick = () => {
    navigate("/create-pool"); // Redirect to the Create Pool page
  };

  return (
    <button
      onClick={handleClick}
      style={styles.button}
    >
      Create Pool
    </button>
  );
};

CreateLiquidityButton.propTypes = {
  theme: PropTypes.string, // Theme for styling
};

export default CreateLiquidityButton;

--- File: ./src/components/LiquidityCard/LiquidityCard.js ---

import React from "react";
import PropTypes from "prop-types";
import CreateLiquidityButton from "../CreateLiquidityButton/CreateLiquidityButton";

const LiquidityCard = ({ title, liquidityData, loading, error, actions }) => {
    const createLiquidityAction = actions.find(action => action.label === "Create Liquidity");

    if (loading) {
        return (
            <div className="flex flex-col w-full md:max-w-md p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
                <p className="text-gray-400 text-center">Loading liquidity data...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="flex flex-col w-full md:max-w-md p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
                <p className="text-red-500 text-center">{error}</p>
                {createLiquidityAction && (
                    <div className="flex justify-center mt-4">
                        <CreateLiquidityButton onCreate={createLiquidityAction.onClick} />
                    </div>
                )}
            </div>
        );
    }

    if (!liquidityData) {
        return (
            <div className="flex flex-col w-full md:max-w-md p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
                <p className="text-gray-500 text-center mb-4">No liquidity data available.</p>
                {createLiquidityAction && (
                    <div className="flex justify-center">
                        <CreateLiquidityButton onCreate={createLiquidityAction.onClick} />
                    </div>
                )}
            </div>
        );
    }

    return (
        <div className="flex flex-col w-full md:max-w-md p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
            <h3 className="text-sm font-semibold text-white mb-4">{title}</h3>
            <div className="flex flex-col gap-4">
                {["Token A", "Token B"].map((token, index) => {
                    const reserve = index === 0 ? liquidityData.reserveA : liquidityData.reserveB;
                    const tokenValue =
                        index === 0 ? liquidityData.tokenA : liquidityData.tokenB;
                    return (
                        <div
                            key={token}
                            className="relative flex items-center justify-between p-4 bg-indigo-800 rounded-lg border border-transparent"
                        >
                            <div className="flex flex-col w-[65%]">
                                <label className="text-sm text-white">{token}</label>
                                <span className="text-white text-2xl font-semibold">{reserve}</span>
                                <span className="text-sm text-gray-300">
                                    {tokenValue.slice(0, 4)}...{tokenValue.slice(-4)}
                                </span>
                            </div>
                        </div>
                    );
                })}
            </div>
            {actions.length > 0 && (
                <div className="flex justify-end gap-2 mt-4">
                    {actions.map(({ label, onClick }, index) => (
                        <button
                            key={index}
                            className="px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:brightness-110 transition"
                            onClick={onClick}
                        >
                            {label}
                        </button>
                    ))}
                </div>
            )}
        </div>
    );
};

LiquidityCard.propTypes = {
    title: PropTypes.string.isRequired,
    liquidityData: PropTypes.shape({
        tokenA: PropTypes.string.isRequired,
        tokenB: PropTypes.string.isRequired,
        reserveA: PropTypes.number.isRequired,
        reserveB: PropTypes.number.isRequired,
    }),
    loading: PropTypes.bool.isRequired,
    error: PropTypes.string,
    actions: PropTypes.arrayOf(
        PropTypes.shape({
            label: PropTypes.string.isRequired,
            onClick: PropTypes.func.isRequired,
        })
    ).isRequired,
};

export default LiquidityCard;

--- File: ./src/components/LiquidityInfo/LiquidityInfo.js ---

import React, { useState, useEffect, useCallback } from "react";
import PropTypes from "prop-types";
import { PublicKey } from "@solana/web3.js";
import LiquidityCard from "../LiquidityCard/LiquidityCard";
import idl from "../../utils/idl/solana_amm.json";

const LiquidityInfo = ({ connection, selectedTokens, onCreateLiquidity }) => {
    const [liquidityData, setLiquidityData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [poolsFetched, setPoolsFetched] = useState(false); // Flag to prevent unnecessary re-renders

    // Function to decode pool data from the raw byte data
    const decodePoolData = useCallback((dataBuffer) => {
        const dataSize = 32 + 32 + 8 + 8 + 32 + 8 + 2 + 2 + 8 + 8 + 8 + 8 + 1 + 1 + 32 + 128;
        try {
            return {
                tokenA: new PublicKey(dataBuffer.slice(0, 32)).toBase58(),
                tokenB: new PublicKey(dataBuffer.slice(32, 64)).toBase58(),
                reserveA: Number(dataBuffer.readBigUInt64LE(64)),
                reserveB: Number(dataBuffer.readBigUInt64LE(72)),
                lpMint: new PublicKey(dataBuffer.slice(80, 112)).toBase58(),
                totalLpTokens: Number(dataBuffer.readBigUInt64LE(112)),
                feePercentage: dataBuffer.readUInt16LE(120),
                adminFeePercentage: dataBuffer.readUInt16LE(122),
                feesCollectedA: Number(dataBuffer.readBigUInt64LE(124)),
                feesCollectedB: Number(dataBuffer.readBigUInt64LE(132)),
                creationTimestamp: Number(dataBuffer.readBigInt64LE(140)),
                lastUpdatedTimestamp: Number(dataBuffer.readBigInt64LE(148)),
                isVerified: Boolean(dataBuffer.readUInt8(156)),
                isPaused: Boolean(dataBuffer.readUInt8(157)),
                poolName: Buffer.from(dataBuffer.slice(158, 190)).toString("utf8").replace(/\0/g, ""),
                poolDescription: Buffer.from(dataBuffer.slice(190)).toString("utf8").replace(/\0/g, ""),
            };
        } catch (error) {
            console.error("Error decoding pool data:", error);
            return null;
        }
    }, []);

    // Function to fetch liquidity data
    const fetchLiquidityData = useCallback(async () => {
        if (!selectedTokens?.fromToken || !selectedTokens?.toToken) {
            setError("Please select both tokens to search for liquidity pools.");
            setLiquidityData(null);
            return;
        }

        setLoading(true);
        setError(null);

        const programId = new PublicKey(idl.metadata.address);

        try {
            const programAccounts = await connection.getProgramAccounts(programId);
            if (!programAccounts || programAccounts.length === 0) {
                setError("No liquidity pools found. Ready to create your own?");
                setLiquidityData(null);
                return;
            }

            const filteredProgramAccounts = await connection.getProgramAccounts(programId, {
                filters: [{ dataSize: 256 }], // Assuming a constant dataSize for filtering
            });

            if (!filteredProgramAccounts || filteredProgramAccounts.length === 0) {
                setError("No liquidity pools found with the selected token pair. Create one?");
                setLiquidityData(null);
                return;
            }

            const decodedPools = filteredProgramAccounts
                .map(account => decodePoolData(account.account.data))
                .filter(pool => pool);

            const matchingPools = decodedPools.filter(
                pool => pool.tokenA === selectedTokens.fromToken && pool.tokenB === selectedTokens.toToken
            );

            if (matchingPools.length === 0) {
                setError("No matching pool found. Would you like to create one?");
                setLiquidityData(null);
            } else {
                setLiquidityData(matchingPools[0]);
                setError(null);
            }

            setPoolsFetched(true); // Mark that pools have been fetched
        } catch (error) {
            setError("Error fetching liquidity pool data. Please try again.");
            setLiquidityData(null);
        } finally {
            setLoading(false);
        }
    }, [selectedTokens, connection, decodePoolData]);

    // Re-fetch liquidity data every 30 seconds if no pool data is fetched
    useEffect(() => {
        if (!selectedTokens?.fromToken || !selectedTokens?.toToken || poolsFetched) return;

        const intervalId = setInterval(() => {
            fetchLiquidityData();
        }, 30000); // Refresh every 30 seconds

        fetchLiquidityData(); // Initial fetch when the component is mounted

        return () => clearInterval(intervalId); // Cleanup interval on unmount
    }, [selectedTokens, fetchLiquidityData, poolsFetched]);

    // Define actions based on liquidity data state
    const actions = liquidityData
        ? [
            { 
                label: "Add Liquidity", 
                onClick: () => console.log("Add Liquidity action triggered"),
                style: { backgroundColor: '#4CAF50', color: 'white' }
            },
            { 
                label: "View Pool", 
                onClick: () => console.log("View Pool action triggered"),
                style: { backgroundColor: '#2196F3', color: 'white' }
            },
        ]
        : [{ 
            label: "Create Liquidity", 
            onClick: onCreateLiquidity,
            style: { backgroundColor: '#FF9800', color: 'white' }
        }];

    return (
        <LiquidityCard
            title="Liquidity Pool Details"
            liquidityData={liquidityData}
            loading={loading}
            error={error}
            actions={actions}
            errorColor={error ? 'red' : 'green'} // Highlight error in red, success in green
        />
    );
};

LiquidityInfo.propTypes = {
    connection: PropTypes.instanceOf(Object).isRequired,
    selectedTokens: PropTypes.shape({
        fromToken: PropTypes.string.isRequired,
        toToken: PropTypes.string.isRequired,
    }).isRequired,
    onCreateLiquidity: PropTypes.func.isRequired,
};

export default LiquidityInfo;

--- File: ./src/components/MobileNavBar.js ---

import React from 'react';

const MobileNavBar = () => {
  return (
    <div className="fixed bottom-0 w-full flex items-center justify-around h-14 bg-gradient-to-b from-[#141852] to-[#0E1139] backdrop-blur-lg border-t border-white/10 shadow-lg z-50 lg:hidden">
      {/* Home */}
      <button className="flex flex-col items-center justify-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/" className="flex flex-col items-center">
          <svg
            aria-hidden="true"
            focusable="false"
            className="h-6 w-6 mb-1 fill-primary"
            viewBox="0 0 16 16"
            width="16"
            height="16"
            fill="currentColor"
          >
            <path d="M5.22 14.78a.75.75 0 0 0 1.06-1.06L4.56 12h8.69a.75.75 0 0 0 0-1.5H4.56l1.72-1.72a.75.75 0 0 0-1.06-1.06l-3 3a.75.75 0 0 0 0 1.06l3 3Zm5.56-6.5a.75.75 0 1 1-1.06-1.06l1.72-1.72H2.75a.75.75 0 0 1 0-1.5h8.69L9.72 2.28a.75.75 0 0 1 1.06-1.06l3 3a.75.75 0 0 1 0 1.06l-3 3Z" />
          </svg>
          <span>Home</span>
        </a>
      </button>

      {/* Pools */}
      <button className="flex flex-col items-center justify-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/pools" className="flex flex-col items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 18"
            className="h-6 w-6 mb-1 fill-primary"
          >
            <path
              fill="currentColor"
              fillRule="evenodd"
              d="M7.533.194a.83.83 0 0 0-1.066 0s-2.305 1.942-4.149 4.62C1.04 6.67 0 8.878 0 11.045 0 14.884 3.137 18 7 18s7-3.116 7-6.954c0-2.167-1.04-4.374-2.318-6.233C9.838 2.135 7.532.194 7.532.194M6.619 3.14a.59.59 0 0 1 .762 0s1.646 1.402 2.963 3.336C11.258 7.818 12 9.413 12 10.977 12 13.75 9.76 16 7 16s-5-2.25-5-5.023c0-1.564.742-3.159 1.656-4.5A18.9 18.9 0 0 1 6.619 3.14"
              clipRule="evenodd"
            />
          </svg>
          <span>Pools</span>
        </a>
      </button>

      {/* Portfolio */}
      <button className="flex flex-col items-center justify-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/portfolio" className="flex flex-col items-center">
          <svg
            className="h-6 w-6 mb-1 fill-primary"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M2.66634 22.5007C2.02467 22.5007 1.47537 22.2722 1.01842 21.8152C0.56148 21.3583 0.333008 20.809 0.333008 20.1673V7.33398C0.333008 6.69232 0.56148 6.14301 1.01842 5.68607C1.47537 5.22912 2.02467 5.00065 2.66634 5.00065H7.33301V2.66732C7.33301 2.02565 7.56148 1.47635 8.01842 1.0194C8.47537 0.562457 9.02468 0.333984 9.66634 0.333984H14.333C14.9747 0.333984 15.524 0.562457 15.9809 1.0194C16.4379 1.47635 16.6663 2.02565 16.6663 2.66732V5.00065H21.333C21.9747 5.00065 22.524 5.22912 22.9809 5.68607C23.4379 6.14301 23.6663 6.69232 23.6663 7.33398V20.1673C23.6663 20.809 23.4379 21.3583 22.9809 21.8152C22.524 22.2722 21.9747 22.5007 21.333 22.5007H2.66634ZM2.66634 20.1673H21.333V7.33398H2.66634V20.1673ZM9.66634 5.00065H14.333V2.66732H9.66634V5.00065Z"
              fill="currentColor"
            />
          </svg>
          <span>Portfolio</span>
        </a>
      </button>
    </div>
  );
};

export default MobileNavBar;

--- File: ./src/components/Pools/ActionButtons.js ---

import React from "react";

const ActionButtons = () => (
  <div className="flex items-center gap-3 p-4">
    <button
      type="button"
      className="inline-flex items-center justify-center h-11 px-2 rounded-md text-base font-medium text-[#EEEFF6] border border-blue-200/5 shadow-md bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] backdrop-blur hover:brightness-125 focus:outline-none focus:ring-1 focus:ring-[#1d4ed8]"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 22 18"
        className="h-5 w-5"
      >
        <path
          fill="#EEEFF6"
          fillRule="evenodd"
          d="M21.5 1.742v.405c0 .476-.196.93-.541 1.26l-6.345 6.032c-.23.22-.361.523-.361.84v5.98c0 .961-.784 1.741-1.75 1.741H9.575c-.966 0-1.75-.78-1.75-1.742v-5.974c0-.32-.132-.625-.365-.845L1.048 3.41A1.74 1.74 0 0 1 .5 2.141v-.4C.5.78 1.284 0 2.25 0h17.5c.966 0 1.75.78 1.75 1.742"
          clipRule="evenodd"
        />
      </svg>
    </button>
    <button
      type="button"
      className="inline-flex items-center justify-center h-11 w-11 rounded-md text-base font-medium text-[#EEEFF6] border border-blue-200/5 shadow-md bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] backdrop-blur hover:brightness-125 focus:outline-none focus:ring-1 focus:ring-[#1d4ed8]"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 16 16"
        className="h-5 w-5"
      >
        <path d="..." />
      </svg>
    </button>
  </div>
);

export default ActionButtons;

--- File: ./src/components/Pools/Header.js ---

import React from "react";

const Header = ({ isDropdownOpen, toggleDropdown }) => (
  <div className="w-full px-4 py-3 flex justify-between items-center border-b border-gray-700 bg-gray-800">
    <h1 className="text-2xl font-semibold">Pools</h1>

    <div className="relative">
      {/* Mobile View (Dropdown) */}
      <div className="sm:hidden">
        <button
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium flex items-center gap-2 shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
          onClick={toggleDropdown}
        >
          Create
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className={`h-4 w-4 transform transition-transform ${
              isDropdownOpen ? "rotate-180" : ""
            }`}
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </button>

        {isDropdownOpen && (
          <div className="absolute right-0 mt-2 w-48 bg-gray-800 border border-gray-700 rounded-md shadow-lg">
            <a
              href="/create-token"
              className="block px-4 py-2 text-sm text-gray-200 hover:bg-gray-700"
            >
              Create Token
            </a>
            <a
              href="/create-pool"
              className="block px-4 py-2 text-sm text-gray-200 hover:bg-gray-700"
            >
              Create Pool
            </a>
          </div>
        )}
      </div>

      {/* Normal View (Separate Buttons) */}
      <div className="hidden sm:flex gap-2">
        <a
          href="/create-token"
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Create Token
        </a>
        <a
          href="/create-pool"
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Create Pool
        </a>
      </div>
    </div>
  </div>
);

export default Header;

--- File: ./src/components/Pools/PoolsList.js ---

import React, { useState, useEffect, useCallback } from "react";
import PropTypes from "prop-types";
import { PublicKey } from "@solana/web3.js";
import idl from "../../utils/idl/solana_amm.json"; // Import the IDL with the program ID

const PoolInfo = ({ connection }) => {
    const [poolData, setPoolData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // Function to decode pool data from the raw byte data
    const decodePoolData = useCallback((dataBuffer) => {
        try {
            return {
                tokenA: new PublicKey(dataBuffer.slice(0, 32)).toBase58(),
                tokenB: new PublicKey(dataBuffer.slice(32, 64)).toBase58(),
                reserveA: Number(dataBuffer.readBigUInt64LE(64)),
                reserveB: Number(dataBuffer.readBigUInt64LE(72)),
                lpMint: new PublicKey(dataBuffer.slice(80, 112)).toBase58(),
                totalLpTokens: Number(dataBuffer.readBigUInt64LE(112)),
                feePercentage: dataBuffer.readUInt16LE(120),
                adminFeePercentage: dataBuffer.readUInt16LE(122),
                feesCollectedA: Number(dataBuffer.readBigUInt64LE(124)),
                feesCollectedB: Number(dataBuffer.readBigUInt64LE(132)),
                creationTimestamp: Number(dataBuffer.readBigInt64LE(140)),
                lastUpdatedTimestamp: Number(dataBuffer.readBigInt64LE(148)),
                isVerified: Boolean(dataBuffer.readUInt8(156)),
                isPaused: Boolean(dataBuffer.readUInt8(157)),
                poolName: Buffer.from(dataBuffer.slice(158, 190)).toString("utf8").replace(/\0/g, ""),
                poolDescription: Buffer.from(dataBuffer.slice(190)).toString("utf8").replace(/\0/g, ""),
            };
        } catch (error) {
            console.error("Error decoding pool data:", error);
            return null;
        }
    }, []);

    // Function to fetch all pool data from the Solana blockchain
    const fetchAllPools = useCallback(async () => {
        setLoading(true);
        setError(null);

        const programId = new PublicKey(idl.metadata.address); // Program ID from IDL

        try {
            const programAccounts = await connection.getProgramAccounts(programId);

            if (!programAccounts || programAccounts.length === 0) {
                setError("No liquidity pools found.");
                setPoolData([]);
                return;
            }

            // Filter accounts to find pools (adjust based on actual data size)
            const filteredProgramAccounts = await connection.getProgramAccounts(programId, {
                filters: [{ dataSize: 256 }], // Assuming 256-byte data for each pool
            });

            if (!filteredProgramAccounts || filteredProgramAccounts.length === 0) {
                setError("No liquidity pools found.");
                setPoolData([]);
                return;
            }

            const decodedPools = filteredProgramAccounts
                .map(account => decodePoolData(account.account.data))
                .filter(pool => pool);

            if (decodedPools.length === 0) {
                setError("No pools found.");
                setPoolData([]);
            } else {
                setPoolData(decodedPools);  // Store all decoded pools
                setError(null);
            }
        } catch (error) {
            setError("Error fetching liquidity pool data. Please try again.");
            setPoolData([]);
        } finally {
            setLoading(false);
        }
    }, [connection, decodePoolData]);

    // Fetch all pools when the component mounts
    useEffect(() => {
        fetchAllPools();  // Initial fetch when the component is mounted
    }, [fetchAllPools]);

    return (
        <div className="flex-1 overflow-y-auto px-4 py-6">
            {loading ? (
                <div className="text-center text-gray-300">Loading pools...</div>
            ) : error ? (
                <div className="text-center text-red-500">{error}</div>
            ) : poolData ? (
                <table className="min-w-full divide-y divide-gray-700">
                    <thead>
                        <tr>
                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-200">Pool Name</th>
                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-200">Token A</th>
                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-200">Token B</th>
                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-200">Reserve A</th>
                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-200">Reserve B</th>
                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-200">Total LP Tokens</th>
                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-200">Fee Percentage</th>
                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-200">Created At</th>
                        </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-800">
                        {poolData.length > 0 ? (
                            poolData.map((pool, index) => (
                                <tr key={index}>
                                    <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-300">{pool.poolName}</td>
                                    <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-300">{pool.tokenA}</td>
                                    <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-300">{pool.tokenB}</td>
                                    <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-300">{pool.reserveA}</td>
                                    <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-300">{pool.reserveB}</td>
                                    <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-300">{pool.totalLpTokens}</td>
                                    <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-300">{pool.feePercentage}%</td>
                                    <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-300">{new Date(pool.creationTimestamp * 1000).toLocaleString()}</td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="8" className="text-center text-gray-400">No pools available</td>
                            </tr>
                        )}
                    </tbody>
                </table>
            ) : (
                <div className="text-center text-gray-400">No pool data available</div>
            )}
        </div>
    );
};

PoolInfo.propTypes = {
    connection: PropTypes.instanceOf(Object).isRequired,
};

export default PoolInfo;

--- File: ./src/components/Pools/PoolsPage.js ---

import React, { useState } from "react";
import Header from "./Header";
import SearchBar from "./SearchBar";
import ActionButtons from "./ActionButtons";
import PoolsList from "./PoolsList";

const PoolsPage = () => {
  const [isDropdownOpen, setDropdownOpen] = useState(false);

  const toggleDropdown = () => setDropdownOpen(!isDropdownOpen);

  return (
    <div className="flex flex-col bg-gray-900 text-white" style={{ width: "100%" }}>
      <Header isDropdownOpen={isDropdownOpen} toggleDropdown={toggleDropdown} />
      <div className="flex items-center justify-between gap-3 px-3 lg:px-0 flex-wrap sm:flex-nowrap">
        <SearchBar />
        <ActionButtons />
      </div>
      <PoolsList />
    </div>
  );
};

export default PoolsPage;

--- File: ./src/components/Pools/SearchBar.js ---

import React from "react";

const SearchBar = () => (
  <div className="relative flex flex-col max-w-md w-full bg-transparent text-[#f8fafc] overflow-visible p-4">
    <label htmlFor="search-input" className="sr-only">
      Search tokens
    </label>
    <div className="flex items-center gap-2 h-11 px-4 text-sm rounded-md border border-blue-800 focus-within:border-[#6e85f7] shadow-inner">
      <input
        id="search-input"
        type="text"
        placeholder="Search tokens..."
        spellCheck="false"
        autoComplete="off"
        autoCorrect="off"
        role="combobox"
        aria-autocomplete="list"
        aria-expanded="true"
        className="flex-grow bg-transparent placeholder:text-quarternary text-primary text-base font-regular py-0 px-0 border-0 focus:outline-none focus:ring-0"
      />
    </div>
  </div>
);

export default SearchBar;

--- File: ./src/components/ProgramControl/PlatformInfo.js ---

import React, { useState, useCallback } from "react";
import { useConnection, useWallet } from "@solana/wallet-adapter-react";
import { PublicKey } from "@solana/web3.js";
import { AnchorProvider, Program } from "@project-serum/anchor";
import idl from "../../utils/idl/solana_amm.json";

const PlatformInfo = () => {
  const { connection } = useConnection();
  const { publicKey, signTransaction } = useWallet(); // Make sure you have a connected wallet
  const [platformState, setPlatformState] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const [initLoading, setInitLoading] = useState(false);
  const [governanceAuthorityInput, setGovernanceAuthorityInput] = useState("");
  const [initError, setInitError] = useState(null);
  const [initSuccess, setInitSuccess] = useState(null);

  const programId = new PublicKey(idl.metadata.address);

  // Provider needs a wallet with signTransaction capability for sending transactions
  const provider = new AnchorProvider(connection, { publicKey, signTransaction }, {});

  const program = new Program(idl, programId, provider);

  const fetchPlatformState = useCallback(async () => {
    setIsLoading(true);
    console.info("Fetching PlatformState...");
    try {
      if (!program.account || !program.account.platformState) {
        console.error("platformState account definition not found in IDL.");
        return;
      }
      const platformStates = await program.account.platformState.all();
      if (platformStates.length > 0) {
        setPlatformState(platformStates[0].account);
        console.info("PlatformState fetched:", platformStates[0].account);
      } else {
        console.warn("No PlatformState account found.");
        setPlatformState(null);
      }
    } catch (error) {
      console.error("Error fetching PlatformState:", error);
      setPlatformState(null);
    } finally {
      setIsLoading(false);
    }
  }, [program]);

  /**
   * Initialize the Platform State
   * This calls the on-chain `initialize_platform_state` instruction, passing
   * the chosen governance authority. This will create and initialize the global
   * PlatformState account.
   */
  const initializePlatformState = useCallback(async () => {
    setInitLoading(true);
    setInitError(null);
    setInitSuccess(null);
    console.info("Initializing Platform State...");

    try {
      // Validate the input governance authority
      let govAuthPubkey;
      try {
        govAuthPubkey = new PublicKey(governanceAuthorityInput);
      } catch (e) {
        throw new Error("Invalid governance authority public key.");
      }

      // Call the initialize_platform_state instruction
      // Assuming your IDL has something like:
      // initialize_platform_state(governance_authority: Pubkey)
      await program.methods
        .initializePlatformState(govAuthPubkey)
        .accounts({
          // These must match the constraints in your on-chain code
          platformState: (await PublicKey.findProgramAddress([Buffer.from("platform-state")], programId))[0],
          admin: provider.wallet.publicKey, // The admin (governance authority) must sign this
          systemProgram: PublicKey.default, // or SystemProgram.programId if needed
        })
        .rpc();

      console.info("PlatformState initialized successfully.");
      setInitSuccess("Platform state initialized successfully. You can now fetch and see details.");
    } catch (error) {
      console.error("Error initializing PlatformState:", error);
      setInitError(error.message);
    } finally {
      setInitLoading(false);
    }
  }, [program, provider, governanceAuthorityInput]);

  return (
    <div className="p-4 space-y-6 text-white">
      <h2 className="text-2xl font-bold mb-6 text-center">Platform Dashboard</h2>

      {/* Button to fetch the current platform state */}
      <div className="text-center">
        <button
          onClick={fetchPlatformState}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          disabled={isLoading}
        >
          {isLoading ? "Loading..." : "Fetch Platform State"}
        </button>
      </div>

      {/* Display Platform State Information */}
      <div className="bg-gray-800 p-4 rounded-lg shadow-md mt-6">
        <h3 className="text-xl font-bold mb-2">Platform State</h3>
        {platformState ? (
          <>
            <p>
              <strong>Governance Authority:</strong> {platformState.governanceAuthority.toBase58()}
            </p>
            <p>
              <strong>Platform Token Mint:</strong> {platformState.platformTokenMint.toBase58()}
            </p>
          </>
        ) : (
          <p>No PlatformState information available. Click "Fetch Platform State" to check.</p>
        )}
      </div>

      {/* Card to Initialize Platform State */}
      <div className="bg-gray-800 p-4 rounded-lg shadow-md">
        <h3 className="text-xl font-bold mb-2">Initialize Platform State</h3>
        <p className="mb-4">
          To initialize the platform state, provide a governance authority public key and click the button.
          This will create a global platform state account on-chain if it doesn’t exist already.
        </p>

        <div className="flex items-center space-x-2 mb-4">
          <input
            type="text"
            placeholder="Governance Authority Pubkey"
            className="p-2 rounded text-black w-full"
            value={governanceAuthorityInput}
            onChange={(e) => setGovernanceAuthorityInput(e.target.value)}
          />
          <button
            onClick={initializePlatformState}
            className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
            disabled={initLoading}
          >
            {initLoading ? "Initializing..." : "Initialize"}
          </button>
        </div>

        {initError && <p className="text-red-500">Error: {initError}</p>}
        {initSuccess && <p className="text-green-500">{initSuccess}</p>}
      </div>

      {/* After initialization, the user can fetch the platform state to see changes */}
    </div>
  );
};

export default PlatformInfo;

--- File: ./src/components/RefreshSlippage/RefreshSlippage.js ---

import React, { useState } from 'react';
import PropTypes from 'prop-types';

const RefreshSlippage = ({ slippage, onRefresh }) => {
    return (
        <div className="flex items-center justify-between w-full mt-4">
            <button
                onClick={onRefresh}
                className="inline-flex items-center justify-center h-8 w-8 rounded-md text-[#EEEFF6] bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] shadow-[0_2px_10px_0px_rgba(0,0,0,0.2)] hover:brightness-125 focus:outline-none focus:ring focus:ring-blue-500 transition"
                title="Refresh Price"
            >
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 18" className="h-5 w-5">
                    <path
                        fill="currentColor"
                        d="M10 2.6a6.38 6.38 0 0 0-4.156 1.533.533.533 0 1 0 .692.81A5.3 5.3 0 0 1 10 3.668c2.771 0 5.04 2.1 5.307 4.8h-1.574l2.134 3.2L18 8.467h-1.627C16.1 5.187 13.348 2.6 10 2.6M4.133 6.333 2 9.533h1.627C3.9 12.813 6.652 15.4 10 15.4a6.38 6.38 0 0 0 4.156-1.533.535.535 0 0 0-.094-.895.53.53 0 0 0-.598.084A5.3 5.3 0 0 1 10 14.333c-2.771 0-5.04-2.1-5.307-4.8h1.574z"
                    />
                </svg>
            </button>
            <div className="text-sm text-tertiary font-medium flex items-center">
                <span>Slippage:</span>
                <span className="ml-1">{slippage}%</span>
            </div>
        </div>
    );
};

RefreshSlippage.propTypes = {
    slippage: PropTypes.number.isRequired,
    onRefresh: PropTypes.func.isRequired,
};

export default RefreshSlippage;

--- File: ./src/components/SidePanel/SidePanel.js ---

import React from "react";
import PropTypes from "prop-types";

const SidePanel = ({ isOpen, onClose }) => {
    return (
        <div
            className={`fixed top-0 left-0 h-full bg-blue-900 text-white transition-transform duration-300 ${
                isOpen ? "w-72" : "w-0"
            } overflow-hidden shadow-lg z-50`}
        >
            <div className="p-4">
                <button
                    onClick={onClose}
                    className="absolute top-4 right-4 text-white hover:text-gray-300"
                    aria-label="Close Side Panel"
                >
                    ✕
                </button>
                <h2 className="text-lg font-bold mb-4">Navigation</h2>
                <ul>
                    <li className="py-2 hover:text-gray-300">Dashboard</li>
                    <li className="py-2 hover:text-gray-300">Settings</li>
                    <li className="py-2 hover:text-gray-300">Logout</li>
                </ul>
            </div>
        </div>
    );
};

SidePanel.propTypes = {
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
};

export default SidePanel;

--- File: ./src/components/SwapCard/index.js ---

export { default } from './SwapCard';

--- File: ./src/components/SwapCard/SwapCard.js ---

import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { useWallet } from "@solana/wallet-adapter-react";
import { Connection } from "@solana/web3.js";
import TokenSelector from "../TokenSelector/TokenSelector";
import AdvancedSettings from "../AdvancedSettings/AdvancedSettings";
import ConnectButton from "../ConnectButton";
import GlobalModal from "../Global/GlobalModal";
import LiquidityInfo from "../LiquidityInfo/LiquidityInfo";

const SwapCard = ({ onSwap }) => {
  const { connected } = useWallet();
  const [tokens, setTokens] = useState([]);
  const [connection] = useState(() => new Connection(process.env.REACT_APP_MAIN_RPC));
  const [fromToken, setFromToken] = useState({ symbol: "SOL", image: "https://via.placeholder.com/40" });
  const [toToken, setToToken] = useState({ symbol: "USDC", image: "https://via.placeholder.com/40" });
  const [fromAmount, setFromAmount] = useState("");
  const [toAmount, setToAmount] = useState("");
  const [isTokenSelectorOpen, setIsTokenSelectorOpen] = useState(false);
  const [isSlippageOpen, setIsSlippageOpen] = useState(false);
  const [slippage, setSlippage] = useState(0.5);
  const [isModalVisible, setIsModalVisible] = useState(false);

  useEffect(() => {
    const fetchTokens = async () => {
      try {
        const response = await fetch("tokens_dummy_data.json"); // Replace with actual token list API
        const data = await response.json();
        if (Array.isArray(data.data)) {
          setTokens(data.data);
        } else {
          console.error("Invalid token data format.");
        }
      } catch (error) {
        console.error("Failed to fetch tokens:", error);
      }
    };
    fetchTokens();
  }, []);

  const handleSwap = () => {
    if (!fromAmount || !fromToken || !toToken) {
      alert("Please enter a valid amount and select tokens.");
      return;
    }
    onSwap(fromAmount, fromToken.symbol, toToken.symbol, slippage);
  };

  const handleTokenSelect = (token) => {
    const tokenData = { symbol: token.metadata?.symbol || token.symbol, image: token.metadata?.image || "https://via.placeholder.com/40" };
    if (isTokenSelectorOpen === "from") setFromToken(tokenData);
    if (isTokenSelectorOpen === "to") setToToken(tokenData);
    setIsTokenSelectorOpen(false);
    setIsModalVisible(false);
  };

  const handleSlippageChange = (value) => {
    setSlippage(value);
    setIsSlippageOpen(false);
    setIsModalVisible(false);
  };

  const openTokenSelector = (type) => {
    setIsTokenSelectorOpen(type);
    setIsModalVisible(true);
  };

  const closeModal = () => {
    setIsTokenSelectorOpen(false);
    setIsSlippageOpen(false);
    setIsModalVisible(false);
  };

  const openSlippageModal = () => {
    setIsSlippageOpen(true);
    setIsModalVisible(true);
  };

  return (
    <>
      <div className="flex flex-col w-full md:max-w-md p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
        <div className="flex justify-between items-center text-gray-200 mb-4">
          <h3 className="text-sm font-semibold text-white">Slippage: {slippage}%</h3>
          <button className="p-2 rounded-full hover:bg-indigo-800/70 transition" aria-label="Settings" onClick={openSlippageModal}>
            <svg className="w-6 h-6 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
              <path
                stroke="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M7.75 4H19M7.75 4a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 4h2.25m13.5 6H19m-2.25 0a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 10h11.25m-4.5 6H19M7.75 16a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 16h2.25"
              />
            </svg>
          </button>
        </div>

        <div className="flex flex-col gap-4">
          <div className="relative flex items-center justify-between p-4 bg-indigo-800 rounded-lg border border-transparent focus-within:border-blue-400">
            <div className="flex flex-col w-[65%]">
              <label className="text-sm text-white">Pay</label>
              <input type="text" value={fromAmount} onChange={(e) => setFromAmount(e.target.value)} placeholder="0.0" className="bg-transparent text-white text-2xl font-semibold focus:outline-none" />
              <span className="text-sm text-white">$0.00</span>
            </div>
            <button className="bg-blue-600 text-white px-4 py-1 rounded-lg text-sm font-medium flex items-center gap-2" onClick={() => openTokenSelector("from")}>
              <img src={fromToken.image} alt={fromToken.symbol} className="w-6 h-6 rounded-full" />
              {fromToken.symbol}
            </button>
          </div>

          <button
            className="mx-auto p-2 bg-blue-600 rounded-full text-white shadow-lg hover:scale-110 transition z-10"
            onClick={() => {
              const temp = fromToken;
              setFromToken(toToken);
              setToToken(temp);
            }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 28 24" className="h-6 w-6">
              <path fill="currentColor" d="M18.347 18.384q.32 0 .535-.216a.73.73 0 0 0 .215-.534V8.103l2.317 2.317a.68.68 0 0 0 .508.208.767.767 0 0 0 .77-.752.74.74 0 0 0-.233-.535l-3.47-3.469a.8.8 0 0 0-.297-.198 1 1 0 0 0-.678 0 .8.8 0 0 0-.3.198L14.22 9.366a.7.7 0 0 0-.22.518q.003.294.236.528.232.216.526.223a.7.7 0 0 0 .527-.225l2.308-2.307v9.54q0 .315.216.528a.73.73 0 0 0 .534.213m-8.702 0a1 1 0 0 0 .34-.059.8.8 0 0 0 .3-.197l3.495-3.495a.7.7 0 0 0 .22-.517.74.74 0 0 0-.236-.529.8.8 0 0 0-.527-.223.7.7 0 0 0-.527.225l-2.307 2.308v-9.54a.731.731 0 0 0-.75-.74.73.73 0 0 0-.535.215.73.73 0 0 0-.215.534v9.531L6.585 13.58a.68.68 0 0 0-.507-.208.767.767 0 0 0-.77.752q0 .302.233.534l3.47 3.47q.14.14.297.198a1 1 0 0 0 .337.058" />
            </svg>
          </button>

          <div className="relative flex items-center justify-between p-4 bg-indigo-800 rounded-lg border border-transparent focus-within:border-blue-400">
            <div className="flex flex-col w-[65%]">
              <label className="text-sm text-white">Receive</label>
              <input type="text" value={toAmount} onChange={(e) => setToAmount(e.target.value)} placeholder="0.0" className="bg-transparent text-white text-2xl font-semibold focus:outline-none" />
              <span className="text-sm text-white">$0.00</span>
            </div>
            <button className="bg-blue-600 text-white px-4 py-1 rounded-lg text-sm font-medium flex items-center gap-2" onClick={() => openTokenSelector("to")}>
              <img src={toToken.image} alt={toToken.symbol} className="w-6 h-6 rounded-full" />
              {toToken.symbol}
            </button>
          </div>
        </div>

        <div className="w-full flex justify-center items-center mt-6">
          {connected ? (
            <button onClick={handleSwap} className="w-full py-3 bg-gradient-to-b from-blue-500 to-blue-700 text-white font-bold rounded-lg hover:brightness-110 transition">
              Swap Now
            </button>
          ) : (
            <ConnectButton />
          )}
        </div>
      </div>

      <LiquidityInfo
        connection={connection}
        selectedTokens={{
            fromToken: fromToken.symbol,
            toToken: toToken.symbol,
        }}
        onCreateLiquidity={() => console.log("Create Liquidity action")}
      />

      {isModalVisible && (
        <GlobalModal
          isVisible={isModalVisible}
          title={isTokenSelectorOpen ? "Select a Token" : isSlippageOpen ? "Advanced Settings" : ""}
          content={
            isTokenSelectorOpen ? (
              <TokenSelector onSelectToken={handleTokenSelect} onClose={closeModal} connection={connection} tokens={tokens} />
            ) : isSlippageOpen ? (
              <AdvancedSettings slippage={slippage} onUpdateSlippage={handleSlippageChange} isOpen={isSlippageOpen} onClose={closeModal} />
            ) : null
          }
          onClose={closeModal}
          options={{
            fixedHeader: true,
            scrollableContent: !!isTokenSelectorOpen,
            modalWidth: "500px",
            modalHeight: isSlippageOpen ? "auto" : "70%",
            showCloseButton: true,
            theme: "dark",
          }}
        />
      )}
    </>
  );
};

SwapCard.propTypes = {
  onSwap: PropTypes.func.isRequired,
};

export default SwapCard;

--- File: ./src/components/TokenCreation/hooks/useTokenCreation.js ---

import { useState } from "react";
import { createUserToken } from "../services/tokenService";
import { useAnchorProvider } from "../../../utils/anchorProvider";
import { validateTokenInputs } from "../validations/tokenValidation";

export function useTokenCreation() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const provider = useAnchorProvider();

  const createToken = async (data) => {
    setError(null);
    const errors = validateTokenInputs(data);

    if (Object.keys(errors).length > 0) {
      setError(errors);
      console.error("Validation errors in token inputs:", errors);
      return null;
    }

    setIsLoading(true);

    try {
      const createdToken = await createUserToken({
        provider,
        name: data.name,
        symbol: data.symbol,
        supply: Number(data.supply),
      });
      console.log("Token created successfully:", createdToken);
      return createdToken;
    } catch (error) {
      console.error("Error creating token:", error);
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    isLoading,
    error,
    createToken,
  };
}

--- File: ./src/components/TokenCreation/services/tokenService.js ---

import {
  Connection,
  PublicKey,
  Keypair,
  SystemProgram,
  Transaction,
} from "@solana/web3.js";
import {
  TOKEN_PROGRAM_ID,
  createInitializeMintInstruction,
  createAssociatedTokenAccountInstruction,
  getAssociatedTokenAddress,
  createMintToInstruction, // Explicitly use this for minting
} from "@solana/spl-token";

export async function createUserToken({ provider, name, symbol, supply }) {
  console.log("Starting token creation process...");

  if (!provider || !provider.wallet || !provider.wallet.publicKey) {
    throw new Error("Wallet not connected or missing provider.");
  }

  const connection = provider.connection;
  const userPublicKey = provider.wallet.publicKey;

  console.log("User Wallet PublicKey:", userPublicKey.toBase58());

  // Validate inputs
  if (!name || name.length > 32) {
    throw new Error("Token name is required and must be less than 32 characters.");
  }
  if (!symbol || symbol.length > 10) {
    throw new Error("Token symbol is required and must be less than 10 characters.");
  }
  if (!supply || Number(supply) <= 0 || !Number.isFinite(Number(supply))) {
    throw new Error("Supply must be a positive number.");
  }
  console.log(`Validated inputs: name=${name}, symbol=${symbol}, supply=${supply}`);

  const balance = await connection.getBalance(userPublicKey);
  console.log(`User SOL balance: ${(balance / 1e9).toFixed(6)} SOL`);
  const MIN_SOL_REQUIRED = 0.002;
  if (balance < MIN_SOL_REQUIRED * 1e9) {
    throw new Error(`Insufficient SOL to cover transaction fees. Required: ${MIN_SOL_REQUIRED} SOL.`);
  }

  const mintKeypair = Keypair.generate();
  console.log("Generated Mint Keypair:", mintKeypair.publicKey.toBase58());

  const rentExemption = await connection.getMinimumBalanceForRentExemption(82); // Mint size is 82 bytes
  console.log(`Rent-exempt balance for mint account: ${rentExemption} lamports.`);

  const latestBlockhash = await connection.getLatestBlockhash();
  console.log("Fetched recent blockhash:", latestBlockhash.blockhash);

  // Step 1: Create Mint Account
  const createMintTransaction = new Transaction().add(
    SystemProgram.createAccount({
      fromPubkey: userPublicKey,
      newAccountPubkey: mintKeypair.publicKey,
      space: 82,
      lamports: rentExemption,
      programId: TOKEN_PROGRAM_ID,
    })
  );

  createMintTransaction.recentBlockhash = latestBlockhash.blockhash;
  createMintTransaction.feePayer = userPublicKey;

  console.log("Signing create mint account transaction...");
  createMintTransaction.sign(mintKeypair);

  const signedCreateMintTx = await provider.wallet.signTransaction(createMintTransaction);
  const createMintSignature = await connection.sendRawTransaction(signedCreateMintTx.serialize());
  console.log("Mint account creation transaction sent:", createMintSignature);

  // Step 2: Initialise Mint
  const initialiseMintTransaction = new Transaction().add(
    createInitializeMintInstruction(
      mintKeypair.publicKey,
      2, // Decimals
      userPublicKey,
      null, // Optional freeze authority
      TOKEN_PROGRAM_ID
    )
  );

  initialiseMintTransaction.recentBlockhash = latestBlockhash.blockhash;
  initialiseMintTransaction.feePayer = userPublicKey;

  console.log("Signing initialise mint transaction...");
  const signedInitMintTx = await provider.wallet.signTransaction(initialiseMintTransaction);
  const initialiseMintSignature = await connection.sendRawTransaction(signedInitMintTx.serialize());
  console.log("Mint initialisation transaction sent:", initialiseMintSignature);

  await connection.confirmTransaction(initialiseMintSignature, "finalized");
  console.log("Mint account initialization confirmed.");

  // Step 3: Create Associated Token Account
  const associatedTokenAddress = await getAssociatedTokenAddress(
    mintKeypair.publicKey,
    userPublicKey
  );
  console.log("Derived Associated Token Address:", associatedTokenAddress.toBase58());

  try {
    const transaction = new Transaction().add(
      createAssociatedTokenAccountInstruction(
        userPublicKey,
        associatedTokenAddress,
        userPublicKey,
        mintKeypair.publicKey
      )
    );

    transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
    transaction.feePayer = userPublicKey;

    console.log("Signing ATA creation transaction...");
    const signedTransaction = await provider.wallet.signTransaction(transaction);
    const signature = await connection.sendRawTransaction(signedTransaction.serialize());
    console.log("ATA creation transaction sent:", signature);

    await connection.confirmTransaction(signature, "finalized");
    console.log("ATA creation transaction confirmed.");
  } catch (error) {
    console.error("Error creating associated token account:", error);
    throw error;
  }

  // Step 4: Mint Tokens
  try {
    console.log(`Minting ${supply} tokens to associated token account...`);

    const mintInstruction = createMintToInstruction(
      mintKeypair.publicKey,
      associatedTokenAddress,
      userPublicKey,
      Number(supply) * Math.pow(10, 2), // Adjust for decimals
      [], // No additional signers required
      TOKEN_PROGRAM_ID
    );

    const mintTransaction = new Transaction().add(mintInstruction);

    mintTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
    mintTransaction.feePayer = userPublicKey;

    console.log("Signing mint transaction...");
    const signedMintTx = await provider.wallet.signTransaction(mintTransaction);
    const mintTxSignature = await connection.sendRawTransaction(signedMintTx.serialize());
    console.log("Mint tokens transaction sent:", mintTxSignature);

    await connection.confirmTransaction(mintTxSignature, "finalized");
    console.log("Mint transaction confirmed.");
  } catch (error) {
    console.error("Error during minting operation:", error);
    throw error;
  }

  console.log("Token creation completed successfully.");
  return {
    mintAddress: mintKeypair.publicKey.toBase58(),
    associatedTokenAccount: associatedTokenAddress.toBase58(),
    supply,
  };
}

--- File: ./src/components/TokenCreation/TokenCreation.css ---


--- File: ./src/components/TokenCreation/TokenCreation.js ---

import React, { useState } from "react";
import TokenCreationForm from "./TokenCreationForm";
import { useTokenCreation } from "./hooks/useTokenCreation";
import { useLivePrice } from "../../components/hooks/useLivePrice";
import GlobalModal from "../Global/GlobalModal";

export default function TokenCreation() {
  const [tokenData, setTokenData] = useState(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const { isLoading, error, createToken } = useTokenCreation();
  const [creationError, setCreationError] = useState(null);
  const [isTokenCreated, setIsTokenCreated] = useState(false);
  const [statusMessage, setStatusMessage] = useState("Ready to create your token!");

  const { priceA: solPrice, remainingTime } = useLivePrice(
    "So11111111111111111111111111111111111111112",
    "USDC"
  );

  const handlePreview = (data) => {
    setTokenData(data);
    setCreationError(null);
    setIsTokenCreated(false);
    setStatusMessage("Ready to create your token!");
    setIsModalVisible(true);
  };

  const handleCreateToken = async () => {
    if (!tokenData) {
      console.error("Token data is not provided. Aborting token creation.");
      return;
    }

    setCreationError(null);
    setStatusMessage("Starting token creation...");

    const created = await createToken(tokenData);

    if (!created) {
      console.error("Token creation failed. Error:", error);
      setCreationError(error);
      setStatusMessage("Token creation failed. Please try again.");
    } else {
      console.log("Token created successfully:", created);
      setTokenData(created);
      setIsTokenCreated(true);
      setStatusMessage("Token created successfully!");
    }
  };

  const handleCloseModal = () => {
    if (isLoading) return; // Prevent closing during loading
    setIsModalVisible(false);
    setTokenData(null);
    setCreationError(null);
    setIsTokenCreated(false);
    setStatusMessage("Ready to create your token!");
  };

  const networkFeeUSD = 1.27;
  const solEquivalent = solPrice ? (networkFeeUSD / solPrice).toFixed(5) : "Calculating...";

  return (
    <div className="max-w-md mx-auto p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
      <h2 className="text-3xl font-semibold text-white mb-6 text-center">
        Bring Your Token to Life 🚀
      </h2>
      <p className="text-gray-300 text-sm text-center mb-6">
        Seamlessly create and deploy your token on Solana. Enter the details below to preview and deploy your token.
      </p>

      {error && !isModalVisible && (
        <div className="bg-red-500/30 text-red-100 p-3 rounded-md text-center">
          {typeof error === "object" ? (
            <ul>
              {Object.entries(error).map(([field, msg]) => (
                <li key={field}>
                  {field}: {msg}
                </li>
              ))}
            </ul>
          ) : (
            <span>{error}</span>
          )}
        </div>
      )}

      <TokenCreationForm onPreview={handlePreview} isLoading={isLoading} />

      <GlobalModal
        isVisible={isModalVisible}
        onClose={handleCloseModal}
        title={isTokenCreated ? "Token Created Successfully!" : "Token Creation Status"}
        content={
          <div className="flex flex-col h-auto overflow-y-auto p-6 gap-y-4">
            <div className="flex flex-col items-center text-center gap-y-3">
              <span className="text-xl font-medium">{statusMessage}</span>
              <span className="relative flex min-h-4 min-w-4 shrink-0 rounded-full h-28 w-28">
                <img
                  className="aspect-square h-full w-full rounded-full"
                  alt="preview"
                  src={tokenData?.image || "/placeholder.png"}
                />
              </span>
              <span className="text-lg font-medium">{tokenData?.name || "N/A"}</span>
              <span className="text-lg font-regular text-secondary">
                {tokenData?.symbol || "N/A"}
              </span>
            </div>
            <div className="flex flex-col w-full gap-y-2">
              <div className="w-full flex justify-between items-center">
                <div className="text-gray-400 text-sm font-medium">Token Mint Address</div>
                <button
                  className="bg-gray-700 text-white px-4 py-1 rounded-lg text-sm font-medium hover:brightness-110"
                  onClick={() => {
                    navigator.clipboard.writeText(tokenData?.mintAddress || "N/A");
                    alert("Token address copied to clipboard!");
                  }}
                >
                  {tokenData?.mintAddress
                    ? `${tokenData.mintAddress.slice(0, 8)}...${tokenData.mintAddress.slice(-4)}`
                    : "N/A"}
                </button>
              </div>
              <div className="w-full flex justify-between items-center">
                <div className="text-gray-400 text-sm font-medium">Supply</div>
                <div className="text-white">{tokenData?.supply || "100,000,000"}</div>
              </div>
              <div className="w-full flex justify-between items-center">
                <div className="text-gray-400 text-sm font-medium">Network</div>
                <div className="text-white">Solana</div>
              </div>
              <div className="w-full flex justify-between items-center">
                <div className="text-gray-400 text-sm font-medium">Network Fee</div>
                <div className="text-white">
                  ${networkFeeUSD.toFixed(2)} ≈ {solEquivalent} SOL
                </div>
              </div>
              <p className="text-xs text-gray-400">
                *The SOL equivalent updates every 5 seconds. Please confirm before proceeding. Expires in {remainingTime}s.
              </p>
            </div>
          </div>
        }
        footer={
          <button
            className={`w-full py-3 text-lg font-semibold rounded-md ${
              isLoading
                ? "bg-gray-500 text-gray-300 cursor-not-allowed"
                : "bg-gradient-to-b from-[#F7D16E] to-[#F6C955] text-gray-900"
            }`}
            onClick={isLoading ? null : handleCreateToken}
            disabled={isLoading}
          >
            {isLoading ? "Creating..." : isTokenCreated ? "Done" : "Create Token"}
          </button>
        }
        options={{
          scrollableContent: true,
          modalWidth: "500px",
          theme: "dark",
          closeOnClickOutside: !isLoading,
          zIndex: 1000,
        }}
      />
    </div>
  );
}

--- File: ./src/components/TokenCreation/TokenCreationForm.js ---

import { useEffect, useState, useRef } from "react";

export default function TokenCreationForm({ onPreview, isLoading }) {
  const [formData, setFormData] = useState({
    name: "",
    symbol: "",
    description: "",
    image: null,
    supply: "",
    mintAddress: "",
  });

  const [isFormValid, setIsFormValid] = useState(false);
  const fileInputRef = useRef(null);

  const generateRandomMintAddress = () => {
    return Array(44)
      .fill(0)
      .map(() => Math.random().toString(36)[2])
      .join("");
  };

  useEffect(() => {
    setFormData((prev) => ({ ...prev, mintAddress: generateRandomMintAddress() }));
  }, []);

  useEffect(() => {
    const isValid =
      formData.name.trim().length > 0 &&
      formData.symbol.trim().length > 0 &&
      formData.supply.trim().length > 0 &&
      Number(formData.supply) > 0 &&
      formData.image !== null;
    setIsFormValid(isValid);
  }, [formData]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleRandomiseMintAddress = () => {
    const newMintAddress = generateRandomMintAddress();
    setFormData((prev) => ({ ...prev, mintAddress: newMintAddress }));
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData((prev) => ({ ...prev, image: URL.createObjectURL(file) }));
    }
  };

  const handleImageClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handlePreviewClick = (e) => {
    e.preventDefault();
    if (!isFormValid) return;
    onPreview(formData);
  };

  return (
    <form className="space-y-6 flex flex-col" onSubmit={(e) => e.preventDefault()}>
      <div className="w-full flex flex-col gap-y-3">
        <label className="flex items-center text-slate-50 font-medium">
          Token Name
        </label>
        <input
          type="text"
          name="name"
          placeholder="e.g., Orca"
          value={formData.name}
          onChange={handleInputChange}
          className="h-12 px-4 bg-gray-900 text-white rounded-md border border-transparent focus:ring focus:ring-blue-500 shadow-md"
          disabled={isLoading}
          required
        />
      </div>

      <div className="w-full flex flex-col gap-y-3">
        <label className="flex items-center text-slate-50 font-medium">
          Symbol
        </label>
        <input
          type="text"
          name="symbol"
          placeholder="e.g., ORCA"
          value={formData.symbol}
          onChange={handleInputChange}
          className="h-12 px-4 bg-gray-900 text-white rounded-md border border-transparent focus:ring focus:ring-blue-500 shadow-md"
          disabled={isLoading}
          required
        />
      </div>

      <div className="w-full flex flex-col gap-y-3">
        <label className="flex items-center text-slate-50 font-medium">
          Token Mint Address
        </label>
        <div className="flex items-center justify-between bg-gray-800 text-gray-300 rounded-md px-4 py-2 shadow-md">
          <span className="truncate">{formData.mintAddress}</span>
          <button
            type="button"
            onClick={handleRandomiseMintAddress}
            className="ml-3 px-3 py-1 bg-blue-600 text-white rounded-md shadow hover:bg-blue-700 disabled:bg-gray-500"
            disabled={isLoading}
          >
            Randomise
          </button>
        </div>
      </div>

      <div className="w-full flex flex-col gap-y-3">
        <label className="flex items-center text-slate-50 font-medium">
          Description (Optional)
        </label>
        <textarea
          name="description"
          placeholder="Describe your token's purpose, story, or vision."
          value={formData.description}
          onChange={handleInputChange}
          className="h-20 px-4 py-2 bg-gray-900 text-white rounded-md resize-none border border-transparent focus:ring focus:ring-blue-500 shadow-md"
          disabled={isLoading}
        />
      </div>

      <div className="w-full flex flex-col gap-y-3">
        <label className="flex items-center text-slate-50 font-medium">
          Token Image
        </label>
        <div
          className="flex flex-col items-center justify-center h-28 bg-gray-800 text-gray-400 rounded-md cursor-pointer border-dashed border-2 border-gray-500 shadow-md"
          onClick={handleImageClick}
        >
          {formData.image ? (
            <img src={formData.image} alt="Token" className="h-16 w-16 rounded-full object-cover" />
          ) : (
            <span>Click to upload image</span>
          )}
          <input
            type="file"
            accept="image/png, image/jpeg"
            ref={fileInputRef}
            className="hidden"
            onChange={handleImageUpload}
            disabled={isLoading}
          />
        </div>
      </div>

      <div className="w-full flex flex-col gap-y-3">
        <label className="flex items-center text-slate-50 font-medium">
          Token Supply
        </label>
        <input
          type="number"
          name="supply"
          placeholder="e.g., 100,000,000"
          value={formData.supply}
          onChange={handleInputChange}
          className="h-12 px-4 bg-gray-900 text-white rounded-md border border-transparent focus:ring focus:ring-blue-500 shadow-md"
          disabled={isLoading}
          required
        />
      </div>

      <button
        type="button"
        onClick={handlePreviewClick}
        className={`mt-6 w-full py-3 font-semibold rounded-md shadow-md ${
          isFormValid
            ? "bg-blue-600 text-white hover:bg-blue-700"
            : "bg-gray-500 text-gray-300 cursor-not-allowed"
        }`}
        disabled={!isFormValid || isLoading}
      >
        {isLoading ? "Processing..." : "Preview Token"}
      </button>
    </form>
  );
}

--- File: ./src/components/TokenCreation/TokenPreview.js ---

import { createElement, useEffect, useState } from "react";

export default function TokenPreview({ tokenData, onCreateToken, onClose }) {
  const SOL_ADDRESS = "So11111111111111111111111111111111111111112";
  const NETWORK_FEE_USD = 1.27; // Fixed network fee in USD
  const [solPrice, setSolPrice] = useState(null);
  const [solEquivalent, setSolEquivalent] = useState(null);

  const fetchSolPrice = async () => {
    try {
      const response = await fetch(`https://api.jup.ag/price/v2?ids=${SOL_ADDRESS}`);
      const data = await response.json();
      const price = data?.data[SOL_ADDRESS]?.price || null;
      setSolPrice(price);
      if (price) {
        setSolEquivalent((NETWORK_FEE_USD / price).toFixed(4));
      }
    } catch (error) {
      console.error("Error fetching SOL price:", error);
      setSolPrice(null);
      setSolEquivalent(null);
    }
  };

  useEffect(() => {
    fetchSolPrice();
  }, []);

  return createElement(
    "div",
    {
      className: `
        fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-0 transition-opacity duration-300 animate-backdropFadeIn
      `,
      role: "dialog",
      "aria-labelledby": "token-preview",
    },
    createElement(
      "div",
      {
        className: `
          relative max-w-md w-full transform bg-gradient-to-b from-[#1B1D36] to-[#121427] text-white rounded-xl shadow-xl p-6 space-y-6 transition-transform duration-300 animate-modalSlideUp
        `,
        style: { animationTimingFunction: "ease-in-out" },
      },
      createElement(
        "button",
        {
          onClick: onClose,
          className: `
            absolute top-4 right-4 text-gray-400 hover:text-gray-200 focus:ring focus:ring-blue-500 rounded-full text-lg
          `,
          "aria-label": "Close modal",
        },
        "✕"
      ),
      createElement(
        "h3",
        { className: "text-xl font-medium text-center" },
        "Preview Token"
      ),
      createElement(
        "div",
        { className: "flex flex-col items-center gap-4" },
        createElement("img", {
          src: tokenData?.image || "/placeholder.png",
          alt: "Token Preview",
          className: "h-28 w-28 rounded-full object-cover shadow-lg",
        }),
        createElement(
          "div",
          {
            className:
              "text-xl font-medium text-center bg-gradient-to-r from-blue-500 to-green-400 text-transparent bg-clip-text",
          },
          tokenData.name || "preview"
        ),
        createElement(
          "div",
          { className: "text-lg font-light text-gray-300" },
          tokenData.symbol || "N/A"
        )
      ),
      createElement(
        "div",
        { className: "space-y-2 text-sm text-left border-t border-gray-700 pt-4" },
        createElement(
          "p",
          null,
          createElement("span", { className: "font-semibold" }, "Token Mint Address: "),
          createElement(
            "span",
            { className: "font-mono break-all text-gray-400" },
            tokenData.mintAddress || "ALLt...rjkr"
          )
        ),
        createElement(
          "p",
          null,
          createElement("span", { className: "font-semibold" }, "Supply: "),
          tokenData.supply || "100,000,000"
        ),
        createElement(
          "p",
          null,
          createElement("span", { className: "font-semibold" }, "Network: "),
          "solana"
        ),
        createElement(
          "p",
          null,
          createElement("span", { className: "font-semibold" }, "Network fee: "),
          solPrice !== null
            ? `$${NETWORK_FEE_USD} ≈ ${solEquivalent} SOL`
            : "Loading SOL price..."
        )
      ),
      createElement(
        "div",
        { className: "space-y-4 mt-4" },
        createElement(
          "button",
          {
            className: `
              w-full py-3 text-lg font-semibold bg-gradient-to-b from-[#F7D16E] to-[#F6C955] text-gray-900 rounded-md shadow-lg hover:brightness-110 transition-all duration-200
            `,
            onClick: onCreateToken,
          },
          "Create Token"
        ),
        createElement(
          "p",
          { className: "text-xs text-gray-400 text-center" },
          "By selecting ‘Create Token’ above, you certify that you are not a “U.S. person” as defined in 17 CFR 230.902(k), acting on behalf of a U.S. person, or creating this token with the intent to sell it to a U.S. person."
        ),
        createElement(
          "button",
          {
            className: `
              w-full py-3 text-lg font-semibold bg-gradient-to-b from-gray-700 to-gray-800 text-gray-300 rounded-md shadow-lg hover:brightness-110 transition-all duration-200
            `,
            onClick: onClose,
          },
          "Cancel"
        )
      )
    )
  );
}

--- File: ./src/components/TokenCreation/validations/tokenValidation.js ---

export function validateTokenInputs({ name, symbol, supply }) {
  const errors = {};
  if (!name.trim()) errors.name = "Token name is required.";
  if (!symbol.trim()) errors.symbol = "Token symbol is required.";
  if (!supply || isNaN(supply) || Number(supply) <= 0) {
    errors.supply = "Supply must be a positive number.";
  }
  return errors;
}

--- File: ./src/components/TokenSelector/LazyTokenList.js ---

import React, { useState, useEffect, useCallback } from "react";
import PropTypes from "prop-types";
import { useWallet } from "@solana/wallet-adapter-react";
import { Connection, PublicKey } from "@solana/web3.js";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import TokenRow from "./TokenRow";

const PAGE_SIZE = 20;
const RPC_URL = process.env.REACT_APP_MAIN_RPC;

const LazyTokenList = ({ onSelectToken, searchTerm }) => {
  const { connected, publicKey } = useWallet();
  const [connection] = useState(() => new Connection(RPC_URL));
  const [tokens, setTokens] = useState([]);
  const [displayedTokens, setDisplayedTokens] = useState([]);
  const [balances, setBalances] = useState({});
  const [hasMore, setHasMore] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [page, setPage] = useState(1);

  // Fetch balances for tokens
  const fetchBalances = useCallback(async () => {
    if (!connected || !publicKey) {
      console.log("Missing walletPublicKey or connection instance.");
      return;
    }

    try {
      const tokenAccounts = await connection.getParsedTokenAccountsByOwner(
        publicKey,
        { programId: TOKEN_PROGRAM_ID }
      );

      const updatedBalances = {};
      tokenAccounts.value.forEach(({ account }) => {
        const { mint, tokenAmount } = account.data.parsed.info;
        updatedBalances[mint] = tokenAmount.uiAmount || 0;

      });

      setBalances(updatedBalances);
    } catch (error) {
      console.error("Error fetching balances:", error);
    }
  }, [connected, publicKey, connection]);

  // Fetch tokens (dummy data)
  const loadTokens = async () => {
    try {
      const response = await fetch("tokens_dummy_data.json");
      const data = await response.json();
      if (Array.isArray(data.data)) {
        setTokens(data.data);
        setDisplayedTokens(data.data.slice(0, PAGE_SIZE));
        setPage(1);
        setHasMore(data.data.length > PAGE_SIZE);
      } else {
        setTokens([]);
        setDisplayedTokens([]);
        setHasMore(false);
      }
    } catch (error) {
    }
  };

  const loadMoreTokens = () => {
    if (isLoading || !hasMore) return;

    setIsLoading(true);
    setTimeout(() => {
      const start = page * PAGE_SIZE;
      const end = start + PAGE_SIZE;
      const nextBatch = tokens.slice(start, end);
      if (nextBatch.length > 0) {
        setDisplayedTokens((prev) => [...prev, ...nextBatch]);
        setPage((prev) => prev + 1);
        setHasMore(tokens.length > end);
      } else {
        setHasMore(false);
      }
      setIsLoading(false);
    }, 500);
  };

  useEffect(() => {
    loadTokens();
    if (connected) fetchBalances();
  }, [connected, fetchBalances]);

  useEffect(() => {
    const handleScroll = () => {
      const container = document.getElementById("token-list-container");
      if (container) {
        const { scrollTop, scrollHeight, clientHeight } = container;
        if (scrollHeight - scrollTop - clientHeight < 50 && hasMore && !isLoading) {
          loadMoreTokens();
        }
      }
    };

    const container = document.getElementById("token-list-container");
    if (container) {
      container.addEventListener("scroll", handleScroll);
    }

    return () => {
      if (container) {
        container.removeEventListener("scroll", handleScroll);
      }
    };
  }, [hasMore, isLoading]);

  useEffect(() => {
    if (tokens.length > 0) {
      const lowerCaseSearch = searchTerm.toLowerCase();
      const filtered = tokens.filter((token) => {
        return (
          token.metadata?.symbol?.toLowerCase().includes(lowerCaseSearch) ||
          token.metadata?.name?.toLowerCase().includes(lowerCaseSearch) ||
          token.address?.toLowerCase().includes(lowerCaseSearch)
        );
      }).slice(0, PAGE_SIZE * page);

      setDisplayedTokens(filtered);
      setHasMore(filtered.length < tokens.length);
    }
  }, [tokens, searchTerm, page]);

  return (
    <div id="token-list-container" className="overflow-y-auto h-full">
      <ul className="divide-y divide-gray-700">
        {displayedTokens.map((token) => (
          <TokenRow
            key={token.address}
            token={token}
            onSelect={onSelectToken}
            balance={balances[token.address] || 0} // Use mint address for balances
          />
        ))}
      </ul>
      {isLoading && (
        <div className="text-center mt-4 text-gray-400 text-sm">Loading...</div>
      )}
      {!hasMore && !isLoading && (
        <div className="text-center mt-4 text-gray-400 text-sm">No more tokens to load.</div>
      )}
    </div>
  );
};

LazyTokenList.propTypes = {
  onSelectToken: PropTypes.func.isRequired,
  searchTerm: PropTypes.string.isRequired,
};

export default LazyTokenList;

--- File: ./src/components/TokenSelector/TokenRow.js ---

import React from "react";
import PropTypes from "prop-types";

const TokenRow = ({ token, onSelect, balance }) => (
  <li
    className="flex items-center justify-between px-4 py-3 hover:bg-gray-800 cursor-pointer"
    onClick={() => onSelect(token)}
  >
    {/* Token Info */}
    <div className="flex items-center gap-3">
      <img
        src={token.metadata?.image || "https://via.placeholder.com/40"}
        alt={token.metadata?.symbol || "Token"}
        className="w-8 h-8 rounded-full"
      />
      <div className="flex flex-col">
        <span className="text-sm font-medium text-white">{token.metadata?.symbol}</span>
        <span className="text-xs text-gray-400">{token.metadata?.name}</span>
      </div>
    </div>

    {/* Balance */}
    <div className="flex items-center gap-2">
      <span className="text-xs font-mono text-gray-400">{balance}</span>
    </div>
  </li>
);

TokenRow.propTypes = {
  token: PropTypes.shape({
    metadata: PropTypes.shape({
      image: PropTypes.string,
      symbol: PropTypes.string,
      name: PropTypes.string,
    }),
    address: PropTypes.string.isRequired,
  }).isRequired,
  onSelect: PropTypes.func.isRequired,
  balance: PropTypes.number.isRequired,
};

export default TokenRow;

--- File: ./src/components/TokenSelector/TokenSelector.js ---

// File: src/components/TokenSelector/TokenSelector.js
import React, { useState } from "react";
import PropTypes from "prop-types";
import LazyTokenList from "./LazyTokenList";

const TokenSelector = ({ onSelectToken, onClose, connection, tokens }) => {
  const [searchTerm, setSearchTerm] = useState("");

  const handleInputChange = (e) => {
    const value = e.target.value;
    setSearchTerm(value);
  };

  return (
    <div className="flex flex-col gap-y-4 max-h-full">
      {/* Search Section */}
      <div className="sticky top-0 z-10 px-4 py-3 bg-gray-900">
        <div className="flex items-center bg-gray-800 text-white rounded-md px-3 py-2">
          <input
            className="w-full bg-transparent focus:outline-none placeholder-gray-400"
            placeholder="Search tokens, name, or address"
            value={searchTerm}
            onChange={handleInputChange}
            autoFocus
          />
        </div>
      </div>

      {/* Token List Section */}
      <LazyTokenList
        onSelectToken={onSelectToken}
        searchTerm={searchTerm}
        connection={connection}
        tokens={tokens}
      />
    </div>
  );
};

TokenSelector.propTypes = {
  onSelectToken: PropTypes.func.isRequired,
  onClose: PropTypes.func.isRequired,
  connection: PropTypes.object.isRequired,
  tokens: PropTypes.array.isRequired,
};

export default TokenSelector;

--- File: ./src/components/TransactionHistory/PriceFeedDisplay.js ---

// ./components/PriceFeedDisplay/PriceFeedDisplay.js
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { Connection, PublicKey } from '@solana/web3.js';

const PriceFeedDisplay = ({ feedAddress, connection }) => {
    const [price, setPrice] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchPrice = async () => {
            setLoading(true);
            setError(null);

            try {
                const accountInfo = await connection.getAccountInfo(new PublicKey(feedAddress));
                if (!accountInfo) throw new Error('Account info not found.');

                // Decode the data according to Chainlink's Solana data structure
                const data = accountInfo.data;
                const decodedData = decodeChainlinkData(data);

                setPrice(decodedData.answer);
            } catch (err) {
                console.error('Failed to fetch price:', err);
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchPrice();
    }, [feedAddress, connection]);

    const decodeChainlinkData = (data) => {
        // Chainlink data structure for Solana: 
        // https://docs.chain.link/solana/data-feeds
        const HEADER_SIZE = 40; // The size of the header
        const priceOffset = HEADER_SIZE + 8; // Skip header and round ID

        // Read the price (8 bytes after the header and round ID)
        const priceBuffer = data.slice(priceOffset, priceOffset + 8);
        const price = Number(priceBuffer.readBigInt64LE()) / 1e8;

        return { answer: price };
    };

    if (loading) {
        return <div className="text-gray-500 text-center">Loading price...</div>;
    }

    if (error) {
        return <div className="text-red-500 text-center">Error: {error}</div>;
    }

    return (
        <div className="flex flex-col items-center p-4 bg-gray-800 text-white rounded-md shadow-md">
            <h2 className="text-lg font-semibold mb-2">SOL/USD Price</h2>
            <p className="text-2xl font-bold">${price.toFixed(2)}</p>
        </div>
    );
};

PriceFeedDisplay.propTypes = {
    feedAddress: PropTypes.string.isRequired,
    connection: PropTypes.instanceOf(Connection).isRequired,
};

export default PriceFeedDisplay;

--- File: ./src/components/TransactionHistory/TransactionHistory.css ---

.TransactionHistory {
    padding: 1rem;
    background-color: #1a202c;
    border-radius: 0.5rem;
    color: white;
}
.TransactionHistory h2 {
    font-size: 1.25rem;
    margin-bottom: 1rem;
}
.TransactionHistory ul {
    list-style: none;
    padding: 0;
}
.TransactionHistory li {
    padding: 0.5rem 0;
    border-bottom: 1px solid #2d3748;
}
.TransactionHistory li:last-child {
    border-bottom: none;
}

--- File: ./src/components/TransactionHistory/TransactionHistory.js ---

// ./components/TransactionHistory/TransactionHistory.js
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { PublicKey } from '@solana/web3.js';
import './TransactionHistory.css';

const TransactionHistory = ({ walletAddress, connection }) => {
    const [transactions, setTransactions] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (!walletAddress) return;

        const fetchTransactions = async () => {
            setLoading(true);
            try {
                const publicKey = new PublicKey(walletAddress);
                const transactionSignatures = await connection.getSignaturesForAddress(publicKey, { limit: 10 });
                const fetchedTransactions = await Promise.all(
                    transactionSignatures.map((sig) => connection.getTransaction(sig.signature))
                );
                setTransactions(fetchedTransactions.filter(Boolean)); // Filter out nulls
            } catch (error) {
                console.error('Failed to fetch transactions:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchTransactions();
    }, [walletAddress, connection]);

    if (loading) {
        return <div className="text-gray-500 text-center">Loading transactions...</div>;
    }

    if (transactions.length === 0) {
        return <div className="text-gray-500 text-center">No transactions found.</div>;
    }

    return (
        <div className="flex flex-col gap-y-4 bg-gray-800 text-white p-4 rounded-md shadow-md">
            <h2 className="text-lg font-semibold">Transaction History</h2>
            <ul className="divide-y divide-gray-700">
                {transactions.map((tx, index) => (
                    <li key={index} className="py-3">
                        <p className="text-sm">Signature: {tx.transaction.signatures[0]}</p>
                        <p className="text-xs text-gray-400">
                            Block Time: {new Date(tx.blockTime * 1000).toLocaleString()}
                        </p>
                    </li>
                ))}
            </ul>
        </div>
    );
};

TransactionHistory.propTypes = {
    walletAddress: PropTypes.string.isRequired,
    connection: PropTypes.object.isRequired, // Instance of Solana Connection
};

export default TransactionHistory;

--- File: ./src/components/WalletProvider.js ---

import React, { useMemo } from 'react';
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';
import {
    PhantomWalletAdapter,
    SolflareWalletAdapter,
} from '@solana/wallet-adapter-wallets';
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
import { clusterApiUrl } from '@solana/web3.js';

// Import default styles for Wallet Adapter
import '@solana/wallet-adapter-react-ui/styles.css';

const WalletConnectionProvider = ({ children }) => {
    // Determine the network (default to Devnet if not provided)
    const network = useMemo(
        () =>
            process.env.REACT_APP_SOLANA_NETWORK ||
            WalletAdapterNetwork.Devnet,
        []
    );

    // Use a cluster API URL for the selected network
    const endpoint = useMemo(
        () => process.env.REACT_APP_MAIN_RPC || clusterApiUrl(network),
        [network]
    );

    // Configure wallet adapters
    const wallets = useMemo(
        () => [
            new PhantomWalletAdapter(),
            new SolflareWalletAdapter(),
        ],
        [network]
    );

    return (
        <ConnectionProvider endpoint={endpoint}>
            <WalletProvider wallets={wallets} autoConnect>
                <WalletModalProvider>{children}</WalletModalProvider>
            </WalletProvider>
        </ConnectionProvider>
    );
};

export default WalletConnectionProvider;

--- File: ./src/context/ConnectionContext.js ---

import React, { createContext, useContext, useState, useEffect } from "react";
import { Connection } from "@solana/web3.js";

export const ConnectionContext = createContext();

export const useConnection = () => useContext(ConnectionContext);

export const ConnectionProvider = ({ children }) => {
  const [connection, setConnection] = useState(null);

  useEffect(() => {
    const conn = new Connection(process.env.REACT_APP_MAIN_RPC); // Correct RPC endpoint
    setConnection(conn);
  }, []);

  return (
    <ConnectionContext.Provider value={{ connection }}>
      {children}
    </ConnectionContext.Provider>
  );
};

--- File: ./src/context/ModalContext.js ---

import React, { createContext, useState, useContext } from 'react';
import PropTypes from 'prop-types';
import GlobalModal from '../components/Global/GlobalModal';

const ModalContext = createContext();

/**
 * Custom hook to access the modal context, providing `showModal` and `closeModal`.
 */
export const useModal = () => useContext(ModalContext);

/**
 * ModalProvider that wraps the application, providing global modal control.
 */
export const ModalProvider = ({ children }) => {
    const [modalState, setModalState] = useState({
        isVisible: false,
        title: '',
        content: '',
        footer: null,
        options: {},
    });

    const showModal = (title, content, footer = null, options = {}) => {
        setModalState({
            isVisible: true,
            title,
            content,
            footer,
            options,
        });
    };

    const closeModal = () => {
        setModalState({
            isVisible: false,
            title: '',
            content: '',
            footer: null,
            options: {},
        });
    };

    return (
        <ModalContext.Provider value={{ showModal, closeModal }}>
            {children}
            <GlobalModal
                isVisible={modalState.isVisible}
                title={modalState.title}
                content={modalState.content}
                footer={modalState.footer}
                onClose={closeModal}
                options={modalState.options}
            />
        </ModalContext.Provider>
    );
};

ModalProvider.propTypes = {
    children: PropTypes.node.isRequired,
};

--- File: ./src/context/NotificationContext.js ---

// ./context/NotificationContext.js
import React, { createContext, useContext, useState, useCallback, useMemo } from 'react';
import NotificationBanner from '../components/Global/NotificationBanner';

const NotificationContext = createContext();

export const useNotification = () => useContext(NotificationContext);

export const NotificationProvider = ({ children }) => {
    const [notification, setNotification] = useState(null);

    const showNotification = useCallback((message, type = 'default', duration = 3000) => {
        setNotification({ message, type });
        if (duration > 0) {
            setTimeout(() => setNotification(null), duration);
        }
    }, []);

    const closeNotification = useCallback(() => setNotification(null), []);

    const contextValue = useMemo(() => ({ showNotification }), [showNotification]);

    return (
        <NotificationContext.Provider value={contextValue}>
            {children}
            {notification && (
                <NotificationBanner
                    message={notification.message}
                    type={notification.type}
                    onClose={closeNotification}
                />
            )}
        </NotificationContext.Provider>
    );
};

--- File: ./src/context/PriceContext.js ---

import React, { createContext, useContext, useState } from "react";

const PriceContext = createContext();

export const PriceProvider = ({ children }) => {
  const [priceCache, setPriceCache] = useState({});

  const fetchPrice = async (tokenAId, tokenBId) => {
    const cacheKey = `${tokenAId}-${tokenBId}`;
    const now = Date.now();

    // Return cached price if it's still valid
    if (priceCache[cacheKey] && now - priceCache[cacheKey].timestamp < 5000) {
      return priceCache[cacheKey].price;
    }

    try {
      const response = await fetch(`https://api.jup.ag/price/v2?ids=${tokenAId},${tokenBId}`);
      const data = await response.json();
      if (data?.data && data.data[tokenAId]?.price) {
        const price = parseFloat(data.data[tokenAId].price);
        setPriceCache((prev) => ({
          ...prev,
          [cacheKey]: { price, timestamp: now },
        }));
        return price;
      }
    } catch (error) {
      console.error("Error fetching price:", error);
    }
    return null;
  };

  const clearCache = () => setPriceCache({});

  return (
    <PriceContext.Provider value={{ fetchPrice, clearCache }}>
      {children}
    </PriceContext.Provider>
  );
};

export const usePrice = () => useContext(PriceContext);

--- File: ./src/index.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

--- File: ./src/index.js ---

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'; // Include global CSS
import App from './App'; // Main App component
import reportWebVitals from './reportWebVitals'; // Optional for measuring performance
import WalletConnectionProvider from './components/WalletProvider'; // Solana Wallet provider
import '@solana/wallet-adapter-react-ui/styles.css'; // Wallet adapter UI styles
import { ModalProvider } from './context/ModalContext'; // Context for managing modals
import { PriceProvider } from './context/PriceContext'; // Context for price-related data

// Root DOM element
const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
  <React.StrictMode>
    {/* Wallet Connection Context */}
    <WalletConnectionProvider>
      {/* Global Modal Context */}
      <ModalProvider>
        {/* Price Context for Price-related Data */}
        <PriceProvider>
          {/* Main Application */}
          <App />
        </PriceProvider>
      </ModalProvider>
    </WalletConnectionProvider>
  </React.StrictMode>
);

// Optional: Measure app performance
// Pass a function to log results or send to an analytics endpoint
reportWebVitals();

--- File: ./src/js_css_files_with_content.txt ---

=========================
File: ./App.css
=========================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

/* Add this to your main CSS file, e.g., App.css */
.bg-pattern {
  background-image: url('https://www.toptal.com/designers/subtlepatterns/uploads/double-bubble.png');
  background-repeat: repeat;
  background-position: center;
  background-size: cover;
}

/* For mobile bottom navigation bar */
@media (max-width: 1024px) {
  .mobile-nav-bar {
    display: flex; /* This makes sure it is visible only on mobile */
  }
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
-e 


=========================
File: ./App.js
=========================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import WalletConnectionProvider from './components/WalletProvider';
import Header from './components/Header';
import MobileNavBar from './components/MobileNavBar';
import SwapCard from './components/SwapCard';
import LiquidityInfo from './components/LiquidityInfo/LiquidityInfo';
import PoolsPage from './components/Pools/PoolsPage'; // Import PoolsPage
import { Connection } from '@solana/web3.js';

function App() {
    const connection = new Connection('https://api.mainnet-beta.solana.com');

    return (
        <WalletConnectionProvider>
            <Router>
                <div className="App">
                    {/* Header */}
                    <Header />
                    {/* Mobile Header */}
                    <MobileNavBar />
                    
                    {/* Main Content */}
                    <main className="p-4 flex flex-col items-center bg-pattern bg-cover bg-center gap-y-6">
                        <Routes>
                            {/* Route for Swap Page */}
                            <Route
                                path="/"
                                element={
                                    <>
                                        <SwapCard />
                                        <LiquidityInfo connection={connection} />
                                    </>
                                }
                            />
                            {/* Route for Pools Page */}
                            <Route path="/pools" element={<PoolsPage connection={connection} />} />
                        </Routes>
                    </main>
                </div>
            </Router>
        </WalletConnectionProvider>
    );
}

export default App;
-e 


=========================
File: ./App.test.js
=========================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
-e 


=========================
File: ./components/AdvancedSettings/AdvancedSettings.js
=========================
import React, { useState } from 'react';
import PropTypes from 'prop-types';

const AdvancedSettings = ({ slippage, onUpdateSlippage, onClose }) => {
    const [customSlippage, setCustomSlippage] = useState('');

    const handleCustomInput = (e) => {
        const value = parseFloat(e.target.value);
        if (!isNaN(value) && value >= 0) {
            setCustomSlippage(value);
        } else {
            setCustomSlippage('');
        }
    };

    const handleApplyCustomSlippage = () => {
        if (customSlippage) {
            onUpdateSlippage(customSlippage);
        }
        onClose(); // Close the modal
    };

    return (
        <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black/60"
            onClick={onClose} // Close modal when clicking outside
        >
            <div
                className="bg-white rounded-lg shadow-2xl w-full max-w-lg p-6 flex flex-col gap-y-6"
                onClick={(e) => e.stopPropagation()} // Prevent modal close on click inside
            >
                {/* Modal Header */}
                <div className="flex justify-between items-center">
                    <h4 className="text-lg font-semibold text-gray-800">Trade Slippage</h4>
                    <button
                        className="text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-1"
                        onClick={onClose}
                        aria-label="Close Modal"
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            strokeWidth={2}
                            stroke="currentColor"
                            className="w-6 h-6"
                        >
                            <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                {/* Modal Body */}
                <p className="text-sm text-gray-600">
                    Set the allowed percentage difference between the quoted price and actual execution price of your trade.
                </p>
                <div className="flex items-center gap-x-4">
                    {/* Slippage Options */}
                    <div
                        className="flex items-stretch rounded-md border border-gray-300 overflow-hidden w-3/4"
                        role="radiogroup"
                        aria-label="Slippage Options"
                    >
                        {[0.1, 0.5, 1.0].map((value) => (
                            <button
                                key={value}
                                type="button"
                                role="radio"
                                aria-checked={slippage === value}
                                onClick={() => onUpdateSlippage(value)} // Update slippage but don't close modal
                                className={`flex-1 text-sm font-medium px-4 py-2 transition focus:outline-none focus:ring-2 focus:ring-blue-300 ${
                                    slippage === value
                                        ? 'bg-blue-500 text-white'
                                        : 'bg-gray-100 text-gray-600 hover:bg-blue-100'
                                }`}
                            >
                                {value}%
                            </button>
                        ))}
                    </div>

                    {/* Custom Input */}
                    <div className="w-1/4">
                        <input
                            type="number"
                            placeholder="Custom"
                            value={customSlippage}
                            onChange={handleCustomInput}
                            className="w-full h-10 px-3 text-sm text-gray-700 bg-gray-100 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-300"
                        />
                    </div>
                </div>

                {/* Done Button */}
                <button
                    onClick={handleApplyCustomSlippage}
                    disabled={!customSlippage && slippage === null}
                    className={`w-full px-4 py-2 text-sm font-semibold rounded-md transition ${
                        customSlippage || slippage !== null
                            ? 'bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300'
                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    }`}
                >
                    Done
                </button>
            </div>
        </div>
    );
};

AdvancedSettings.propTypes = {
    slippage: PropTypes.number.isRequired,
    onUpdateSlippage: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
};

export default AdvancedSettings;
-e 


=========================
File: ./components/Banner/Banner.js
=========================
import React, { useState } from 'react';
import PropTypes from 'prop-types';

const Banner = ({ announcementLink, announcementText, title }) => {
  const [isVisible, setIsVisible] = useState(true);

  // Hide the banner when the close button is clicked
  if (!isVisible) {
    return null;
  }

  return (
    <div className="relative flex items-center justify-between bg-blue-700 text-white px-4 py-2 w-full shadow-lg animate-pulse shadow-blue-500/50">
      {/* Left Section: Branding/Title */}
      <div className="flex items-center gap-x-2">
        {/* Logo Icon */}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 81 15"
          className="h-4 text-gray-300"
        >
          <path
            fill="currentColor"
            d="M8.152 15q-2.313 0-4.173-.958-1.86-.98-2.92-2.688Q0 9.625 0 7.5t1.06-3.833Q2.12 1.937 3.979.979 5.839 0 8.152 0q2.314 0 4.174.98 1.86.957 2.92 2.666 1.058 1.708 1.059 3.854t-1.06 3.854q-1.06 1.71-2.92 2.688Q10.467 15 8.153 15m0-2.375q1.515 0 2.725-.646a4.94 4.94 0 0 0 1.903-1.833q.692-1.188.692-2.646t-.692-2.625a4.75 4.75 0 0 0-1.903-1.833q-1.211-.667-2.725-.667t-2.724.667a4.75 4.75 0 0 0-1.903 1.833Q2.832 6.042 2.833 7.5q0 1.458.692 2.646a4.94 4.94 0 0 0 1.903 1.833q1.21.646 2.724.646"
          />
        </svg>
        <span className="text-sm font-medium">{title}</span>
      </div>

      {/* Center Section: Announcement Text */}
      <div className="hidden md:block text-sm text-gray-100 font-semibold">
        <span className="text-lg">{announcementText}</span>
      </div>

      {/* Right Section: Link & Close Button */}
      <div className="flex items-center gap-x-2 text-sm">
        <a
          href={announcementLink}
          target="_blank"
          rel="noopener noreferrer"
          className="text-green-400 hover:text-green-300 transition"
        >
          Announcement
        </a>
        <button
          onClick={() => setIsVisible(false)}
          className="p-1 rounded hover:bg-gray-800 transition"
          aria-label="Close banner"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 16 16"
            className="h-4 w-4 text-gray-400"
          >
            <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z" />
          </svg>
        </button>
      </div>
    </div>
  );
};

Banner.propTypes = {
  announcementLink: PropTypes.string.isRequired,
  announcementText: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
};

export default Banner;
-e 


=========================
File: ./components/Banner/index.js
=========================
-e 


=========================
File: ./components/ConnectButton.js
=========================
// src/components/ConnectButton.js
import React from 'react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';

const ConnectButton = () => {
  return (
    <div className="flex justify-center items-center h-full">
      <WalletMultiButton className="bg-gradient-to-r from-purple-500 to-green-400 text-white font-semibold px-6 py-2 rounded-full shadow-md transform transition hover:scale-105 hover:shadow-green-400/50 whitespace-nowrap w-[250px]" />
    </div>
  );
};

export default ConnectButton;
-e 


=========================
File: ./components/Global/GlobalModal.js
=========================
import React, { useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

const GlobalModal = ({
    isVisible,
    title = '', // Default value
    content,
    footer = null, // Default value
    onClose,
    options = {}, // Default value
}) => {
    const modalRef = useRef(null);

    const {
        fixedHeader = false,
        fixedFooter = false,
        showCloseButton = true,
        scrollableContent = true,
        modalWidth = '30%',
        modalHeight = '60%',
        backdropOpacity = 0.7,
        zIndex = 50,
        closeOnEscape = true,
        closeOnClickOutside = true,
        theme = 'light',
        customColors = {},
    } = options;

    // Default themes
    const themes = {
        light: {
            background: 'white',
            textColor: 'black',
            borderColor: 'rgba(0, 0, 0, 0.1)',
            backdropColor: `rgba(0, 0, 0, ${backdropOpacity || 0.7})`,
        },
        dark: {
            background: '#1A1E48',
            textColor: 'white',
            borderColor: 'rgba(255, 255, 255, 0.1)',
            backdropColor: `rgba(0, 0, 0, ${backdropOpacity || 0.7})`,
        },
    };

    // Merge selected theme with custom colors
    const selectedTheme = {
        ...themes[theme],
        ...customColors,
    };

    // Escape Key Listener
    useEffect(() => {
        const handleKeyDown = (event) => {
            if (closeOnEscape && event.key === 'Escape') {
                onClose();
            }
        };

        if (isVisible) {
            document.addEventListener('keydown', handleKeyDown);
        }

        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [isVisible, closeOnEscape, onClose]);

    // Close the modal on outside click
    const handleOutsideClick = (event) => {
        if (
            isVisible &&
            closeOnClickOutside &&
            modalRef.current &&
            !modalRef.current.contains(event.target)
        ) {
            onClose();
        }
    };

    return (
        <div
            className={classNames(
                'fixed inset-0 flex items-center justify-center',
                { hidden: !isVisible } // Hide when not visible
            )}
            style={{
                backgroundColor: selectedTheme.backdropColor,
                zIndex: zIndex || 50,
            }}
            onClick={handleOutsideClick}
        >
            <div
                ref={modalRef}
                className="rounded-lg shadow-lg overflow-hidden flex flex-col relative"
                style={{
                    width: modalWidth || '30%',
                    maxHeight: modalHeight || '60%',
                    backgroundColor: selectedTheme.background,
                    color: selectedTheme.textColor,
                    borderColor: selectedTheme.borderColor,
                }}
            >
                {/* Header */}
                {title && (
                    <div
                        className={classNames(
                            'p-4 border-b flex items-center justify-between',
                            fixedHeader ? 'sticky top-0 z-10' : ''
                        )}
                        style={{
                            borderColor: selectedTheme.borderColor,
                            backgroundColor: selectedTheme.background,
                            color: selectedTheme.textColor,
                        }}
                    >
                        <h3 className="text-lg font-semibold">{title}</h3>
                        {showCloseButton && (
                            <button
                                onClick={onClose}
                                className="focus:outline-none"
                                aria-label="Close Modal"
                                style={{
                                    color: selectedTheme.textColor,
                                    border: `1px solid ${selectedTheme.borderColor}`,
                                }}
                            >
                                ✕
                            </button>
                        )}
                    </div>
                )}

                {/* Content */}
                <div
                    className={classNames(
                        'flex-1 p-4',
                        scrollableContent ? 'overflow-y-auto' : 'overflow-hidden'
                    )}
                    style={{
                        color: selectedTheme.textColor,
                        backgroundColor: selectedTheme.background,
                    }}
                >
                    {content}
                </div>

                {/* Footer */}
                {footer && (
                    <div
                        className={classNames(
                            'p-4 border-t',
                            fixedFooter ? 'sticky bottom-0 z-10' : ''
                        )}
                        style={{
                            borderColor: selectedTheme.borderColor,
                            backgroundColor: selectedTheme.background,
                            color: selectedTheme.textColor,
                        }}
                    >
                        {footer}
                    </div>
                )}
            </div>
        </div>
    );
};

GlobalModal.propTypes = {
    isVisible: PropTypes.bool.isRequired,
    title: PropTypes.string,
    content: PropTypes.node.isRequired,
    footer: PropTypes.node,
    onClose: PropTypes.func.isRequired,
    options: PropTypes.shape({
        fixedHeader: PropTypes.bool,
        fixedFooter: PropTypes.bool,
        showCloseButton: PropTypes.bool,
        scrollableContent: PropTypes.bool,
        modalWidth: PropTypes.string,
        modalHeight: PropTypes.string,
        backdropOpacity: PropTypes.number,
        zIndex: PropTypes.number,
        closeOnEscape: PropTypes.bool,
        closeOnClickOutside: PropTypes.bool,
        theme: PropTypes.oneOf(['light', 'dark']),
        customColors: PropTypes.shape({
            background: PropTypes.string,
            textColor: PropTypes.string,
            borderColor: PropTypes.string,
            backdropColor: PropTypes.string,
        }),
    }),
};

GlobalModal.defaultProps = {
    title: '',
    footer: null,
    options: {
        fixedHeader: false,
        fixedFooter: false,
        showCloseButton: true,
        scrollableContent: true,
        modalWidth: '30%',
        modalHeight: '60%',
        backdropOpacity: 0.7,
        zIndex: 50,
        closeOnEscape: true,
        closeOnClickOutside: true,
        theme: 'light', // Default to light mode
        customColors: {}, // No custom colors by default
    },
};

export default GlobalModal;
-e 


=========================
File: ./components/Global/NotificationBanner.js
=========================
// ./components/Global/NotificationBanner.js
import React from 'react';
import PropTypes from 'prop-types';

const NotificationBanner = ({ message, type, onClose }) => {
    const bgColor =
        type === 'success' ? 'bg-green-500' :
        type === 'error' ? 'bg-red-500' :
        type === 'info' ? 'bg-blue-500' : 'bg-gray-500';

    return (
        <div className={`${bgColor} text-white text-center py-2 px-4`}>
            <div className="flex justify-between items-center">
                <span>{message}</span>
                {onClose && (
                    <button
                        onClick={onClose}
                        className="ml-4 text-white hover:text-gray-300 focus:outline-none"
                    >
                        ✕
                    </button>
                )}
            </div>
        </div>
    );
};

NotificationBanner.propTypes = {
    message: PropTypes.string.isRequired,
    type: PropTypes.oneOf(['success', 'error', 'info', 'default']),
    onClose: PropTypes.func,
};

NotificationBanner.defaultProps = {
    type: 'default',
    onClose: null,
};

export default NotificationBanner;
-e 


=========================
File: ./components/Header.js
=========================
import React from 'react';
import ConnectButton from './ConnectButton';
import MobileNavBar from './MobileNavBar';

const Header = () => {
  return (
    <>
      {/* Desktop Header */}
      <header className="hidden lg:flex w-full bg-gradient-to-b from-[#141852] to-[#0E1139] backdrop-blur-lg border-b border-white/10 shadow-lg">
        <div className="container mx-auto px-8 flex items-center justify-between h-16">
          {/* Logo */}
          <a href="/" className="mr-auto">
            <img
              src="logo.png" // Replace with your logo file path
              alt="SolanaApp Logo"
              className="w-10 h-10"
            />
          </a>

          {/* Navigation Links */}
          <nav className="flex space-x-6 ml-8">
            <a
              href="/"
              className="text-white text-sm font-medium hover:text-blue-300 transition"
            >
              Home
            </a>
            <a
              href="/pools"
              className="text-white text-sm font-medium hover:text-blue-300 transition"
            >
              Pools
            </a>
            <a
              href="/portfolio"
              className="text-white text-sm font-medium hover:text-blue-300 transition"
            >
              Portfolio
            </a>
          </nav>

          {/* Wallet Connect Button */}
          <div className="ml-auto">
            <ConnectButton />
          </div>
        </div>
      </header>

      {/* Mobile Header */}
      <div className="lg:hidden flex flex-col w-full">
        {/* Top Section with Logo and Wallet Connect */}
        <div className="flex items-center justify-between w-full px-4 py-3 border-b border-white/10 bg-gradient-to-b from-[#141852] to-[#0E1139]">
          {/* Logo */}
          <a href="/">
            <img
              src="logo.png" // Replace with your logo file path
              alt="SolanaApp Logo"
              className="w-10 h-10"
            />
          </a>

          {/* Wallet Connect */}
          <ConnectButton />
        </div>

        {/* Mobile Bottom Navigation Bar */}
        <MobileNavBar />
      </div>
    </>
  );
};

export default Header;
-e 


=========================
File: ./components/LiquidityInfo/LiquidityInfo.js
=========================
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { Connection, PublicKey } from '@solana/web3.js';

const LiquidityInfo = ({ poolAddress, connection }) => {
    const [liquidityData, setLiquidityData] = useState(null);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        if (!poolAddress) return;

        const fetchLiquidityData = async () => {
            setLoading(true);
            try {
                const poolPublicKey = new PublicKey(poolAddress);
                const poolAccountInfo = await connection.getAccountInfo(poolPublicKey);

                if (!poolAccountInfo) {
                    console.error('Pool account not found');
                    setLiquidityData(null);
                    return;
                }

                const poolData = deserializePoolData(poolAccountInfo.data);
                setLiquidityData(poolData);
            } catch (error) {
                console.error('Failed to fetch liquidity data:', error);
                setLiquidityData(null);
            } finally {
                setLoading(false);
            }
        };

        fetchLiquidityData();
    }, [poolAddress, connection]);

    const deserializePoolData = (data) => {
        const decodedData = Buffer.from(data);
        return {
            tokenA: new PublicKey(decodedData.slice(0, 32)).toBase58(),
            tokenB: new PublicKey(decodedData.slice(32, 64)).toBase58(),
            reserveA: decodedData.readBigUInt64LE(64),
            reserveB: decodedData.readBigUInt64LE(72),
        };
    };

    if (loading) {
        return <div className="text-gray-500 text-center">Loading liquidity data...</div>;
    }

    if (!liquidityData) {
        return <div className="text-gray-500 text-center">No liquidity data available.</div>;
    }

    return (
        <div className="flex flex-col gap-y-5 w-full px-1 xs:px-0 py-3">
            {/* Token A Info */}
            <div className="flex w-full gap-x-4 items-center font-regular">
                <span className="relative flex min-h-4 min-w-4 shrink-0 rounded-full shadow-box h-8 w-8">
                    <img
                        className="aspect-square h-full w-full rounded-full"
                        src="https://via.placeholder.com/40"
                        alt="Token A"
                    />
                </span>
                <div className="flex flex-col mr-auto">
                    <div className="flex gap-x-2 items-center">
                        <span className="font-medium text-base">Token A</span>
                        <div className="flex gap-x-1.5 items-center">
                            <button className="inline-flex items-center justify-center whitespace-nowrap rounded-md text-base font-medium transition-all duration-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-[#1d4ed8] disabled:cursor-not-allowed disabled:text-disabled font-mono border-none bg-secondary text-link hover:brightness-125 duration-100 w-[7.5rem] h-min py-0.5 text-xs gap-x-2">
                                {liquidityData.tokenA.slice(0, 4)}...
                                {liquidityData.tokenA.slice(-4)}
                            </button>
                        </div>
                    </div>
                    <span className="text-xs text-secondary text-left">Reserve: {liquidityData.reserveA}</span>
                </div>
            </div>

            {/* Token B Info */}
            <div className="flex w-full gap-x-4 items-center font-regular">
                <span className="relative flex min-h-4 min-w-4 shrink-0 rounded-full shadow-box h-8 w-8">
                    <img
                        className="aspect-square h-full w-full rounded-full"
                        src="https://via.placeholder.com/40"
                        alt="Token B"
                    />
                </span>
                <div className="flex flex-col mr-auto">
                    <div className="flex gap-x-2 items-center">
                        <span className="font-medium text-base">Token B</span>
                        <div className="flex gap-x-1.5 items-center">
                            <button className="inline-flex items-center justify-center whitespace-nowrap rounded-md text-base font-medium transition-all duration-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-[#1d4ed8] disabled:cursor-not-allowed disabled:text-disabled font-mono border-none bg-secondary text-link hover:brightness-125 duration-100 w-[7.5rem] h-min py-0.5 text-xs gap-x-2">
                                {liquidityData.tokenB.slice(0, 4)}...
                                {liquidityData.tokenB.slice(-4)}
                            </button>
                        </div>
                    </div>
                    <span className="text-xs text-secondary text-left">Reserve: {liquidityData.reserveB}</span>
                </div>
            </div>
        </div>
    );
};

LiquidityInfo.propTypes = {
    poolAddress: PropTypes.string.isRequired, // Public key of the pool account
    connection: PropTypes.instanceOf(Connection).isRequired, // Solana connection instance
};

export default LiquidityInfo;
-e 


=========================
File: ./components/MobileNavBar.js
=========================
import React from 'react';

const MobileNavBar = () => {
  return (
    <div className="fixed bottom-0 w-full flex items-center justify-around h-14 bg-gradient-to-b from-[#141852] to-[#0E1139] backdrop-blur-lg border-t border-white/10 shadow-lg z-50 lg:hidden">
      {/* Home */}
      <button className="flex flex-col items-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/">
          <svg
            aria-hidden="true"
            focusable="false"
            className="h-6 w-6 mb-1 fill-primary"
            viewBox="0 0 16 16"
            width="16"
            height="16"
            fill="currentColor"
          >
            <path d="M5.22 14.78a.75.75 0 0 0 1.06-1.06L4.56 12h8.69a.75.75 0 0 0 0-1.5H4.56l1.72-1.72a.75.75 0 0 0-1.06-1.06l-3 3a.75.75 0 0 0 0 1.06l3 3Zm5.56-6.5a.75.75 0 1 1-1.06-1.06l1.72-1.72H2.75a.75.75 0 0 1 0-1.5h8.69L9.72 2.28a.75.75 0 0 1 1.06-1.06l3 3a.75.75 0 0 1 0 1.06l-3 3Z" />
          </svg>
          Home
        </a>
      </button>

      {/* Pools */}
      <button className="flex flex-col items-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/pools">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 18"
            className="h-6 w-6 mb-1 fill-primary"
          >
            <path
              fill="currentColor"
              fillRule="evenodd"
              d="M7.533.194a.83.83 0 0 0-1.066 0s-2.305 1.942-4.149 4.62C1.04 6.67 0 8.878 0 11.045 0 14.884 3.137 18 7 18s7-3.116 7-6.954c0-2.167-1.04-4.374-2.318-6.233C9.838 2.135 7.532.194 7.532.194M6.619 3.14a.59.59 0 0 1 .762 0s1.646 1.402 2.963 3.336C11.258 7.818 12 9.413 12 10.977 12 13.75 9.76 16 7 16s-5-2.25-5-5.023c0-1.564.742-3.159 1.656-4.5A18.9 18.9 0 0 1 6.619 3.14"
              clipRule="evenodd"
            />
          </svg>
          Pools
        </a>
      </button>

      {/* Portfolio */}
      <button className="flex flex-col items-center text-white text-sm font-medium hover:brightness-125 transition">
        <a href="/portfolio">
          <svg
            className="h-6 w-6 mb-1 fill-primary"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M2.66634 22.5007C2.02467 22.5007 1.47537 22.2722 1.01842 21.8152C0.56148 21.3583 0.333008 20.809 0.333008 20.1673V7.33398C0.333008 6.69232 0.56148 6.14301 1.01842 5.68607C1.47537 5.22912 2.02467 5.00065 2.66634 5.00065H7.33301V2.66732C7.33301 2.02565 7.56148 1.47635 8.01842 1.0194C8.47537 0.562457 9.02468 0.333984 9.66634 0.333984H14.333C14.9747 0.333984 15.524 0.562457 15.9809 1.0194C16.4379 1.47635 16.6663 2.02565 16.6663 2.66732V5.00065H21.333C21.9747 5.00065 22.524 5.22912 22.9809 5.68607C23.4379 6.14301 23.6663 6.69232 23.6663 7.33398V20.1673C23.6663 20.809 23.4379 21.3583 22.9809 21.8152C22.524 22.2722 21.9747 22.5007 21.333 22.5007H2.66634ZM2.66634 20.1673H21.333V7.33398H2.66634V20.1673ZM9.66634 5.00065H14.333V2.66732H9.66634V5.00065Z"
              fill="currentColor"
            />
          </svg>
          Portfolio
        </a>
      </button>
    </div>
  );
};

export default MobileNavBar;
-e 


=========================
File: ./components/Pools/ActionButtons.js
=========================
import React from "react";

const ActionButtons = () => (
  <div className="flex items-center gap-3 p-4">
    <button
      type="button"
      className="inline-flex items-center justify-center h-11 px-2 rounded-md text-base font-medium text-[#EEEFF6] border border-blue-200/5 shadow-md bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] backdrop-blur hover:brightness-125 focus:outline-none focus:ring-1 focus:ring-[#1d4ed8]"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 22 18"
        className="h-5 w-5"
      >
        <path
          fill="#EEEFF6"
          fillRule="evenodd"
          d="M21.5 1.742v.405c0 .476-.196.93-.541 1.26l-6.345 6.032c-.23.22-.361.523-.361.84v5.98c0 .961-.784 1.741-1.75 1.741H9.575c-.966 0-1.75-.78-1.75-1.742v-5.974c0-.32-.132-.625-.365-.845L1.048 3.41A1.74 1.74 0 0 1 .5 2.141v-.4C.5.78 1.284 0 2.25 0h17.5c.966 0 1.75.78 1.75 1.742"
          clipRule="evenodd"
        />
      </svg>
    </button>
    <button
      type="button"
      className="inline-flex items-center justify-center h-11 w-11 rounded-md text-base font-medium text-[#EEEFF6] border border-blue-200/5 shadow-md bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] backdrop-blur hover:brightness-125 focus:outline-none focus:ring-1 focus:ring-[#1d4ed8]"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 16 16"
        className="h-5 w-5"
      >
        <path d="..." />
      </svg>
    </button>
  </div>
);

export default ActionButtons;
-e 


=========================
File: ./components/Pools/Header.js
=========================
import React from "react";

const Header = ({ isDropdownOpen, toggleDropdown }) => (
  <div className="w-full px-4 py-3 flex justify-between items-center border-b border-gray-700 bg-gray-800">
    <h1 className="text-2xl font-semibold">Pools</h1>

    <div className="relative">
      {/* Mobile View (Dropdown) */}
      <div className="sm:hidden">
        <button
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium flex items-center gap-2 shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
          onClick={toggleDropdown}
        >
          Create
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className={`h-4 w-4 transform transition-transform ${
              isDropdownOpen ? "rotate-180" : ""
            }`}
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </button>

        {isDropdownOpen && (
          <div className="absolute right-0 mt-2 w-48 bg-gray-800 border border-gray-700 rounded-md shadow-lg">
            <a
              href="/create-token"
              className="block px-4 py-2 text-sm text-gray-200 hover:bg-gray-700"
            >
              Create Token
            </a>
            <a
              href="/create-pool"
              className="block px-4 py-2 text-sm text-gray-200 hover:bg-gray-700"
            >
              Create Pool
            </a>
          </div>
        )}
      </div>

      {/* Normal View (Separate Buttons) */}
      <div className="hidden sm:flex gap-2">
        <a
          href="/create-token"
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Create Token
        </a>
        <a
          href="/create-pool"
          className="bg-gradient-to-b from-blue-700 to-blue-800 px-4 py-2 rounded-md text-base font-medium shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Create Pool
        </a>
      </div>
    </div>
  </div>
);

export default Header;
-e 


=========================
File: ./components/Pools/PoolsList.js
=========================
import React from "react";

const PoolsList = () => (
  <div className="flex-1 overflow-y-auto px-4 py-6">
    <div className="border border-gray-700 rounded-lg bg-gray-800 p-4">
      <p className="text-gray-400">No pools available yet.</p>
    </div>
  </div>
);

export default PoolsList;
-e 


=========================
File: ./components/Pools/PoolsPage.js
=========================
import React, { useState } from "react";
import Header from "./Header";
import SearchBar from "./SearchBar";
import ActionButtons from "./ActionButtons";
import PoolsList from "./PoolsList";

const PoolsPage = () => {
  const [isDropdownOpen, setDropdownOpen] = useState(false);

  const toggleDropdown = () => setDropdownOpen(!isDropdownOpen);

  return (
    <div className="flex flex-col bg-gray-900 text-white" style={{ width: "100%" }}>
      <Header isDropdownOpen={isDropdownOpen} toggleDropdown={toggleDropdown} />
      <div className="flex items-center justify-between gap-3 px-3 lg:px-0 flex-wrap sm:flex-nowrap">
        <SearchBar />
        <ActionButtons />
      </div>
      <PoolsList />
    </div>
  );
};

export default PoolsPage;
-e 


=========================
File: ./components/Pools/SearchBar.js
=========================
import React from "react";

const SearchBar = () => (
  <div className="relative flex flex-col max-w-md w-full bg-transparent text-[#f8fafc] overflow-visible p-4">
    <label htmlFor="search-input" className="sr-only">
      Search tokens
    </label>
    <div className="flex items-center gap-2 h-11 px-4 text-sm rounded-md border border-blue-800 focus-within:border-[#6e85f7] shadow-inner">
      <input
        id="search-input"
        type="text"
        placeholder="Search tokens..."
        spellCheck="false"
        autoComplete="off"
        autoCorrect="off"
        role="combobox"
        aria-autocomplete="list"
        aria-expanded="true"
        className="flex-grow bg-transparent placeholder:text-quarternary text-primary text-base font-regular py-0 px-0 border-0 focus:outline-none focus:ring-0"
      />
    </div>
  </div>
);

export default SearchBar;
-e 


=========================
File: ./components/RefreshSlippage/RefreshSlippage.js
=========================
import React, { useState } from 'react';
import PropTypes from 'prop-types';

const RefreshSlippage = ({ slippage, onRefresh }) => {
    return (
        <div className="flex items-center justify-between w-full mt-4">
            <button
                onClick={onRefresh}
                className="inline-flex items-center justify-center h-8 w-8 rounded-md text-[#EEEFF6] bg-gradient-to-b from-[#6E85F71A] to-[#6E85F713] shadow-[0_2px_10px_0px_rgba(0,0,0,0.2)] hover:brightness-125 focus:outline-none focus:ring focus:ring-blue-500 transition"
                title="Refresh Price"
            >
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 18" className="h-5 w-5">
                    <path
                        fill="currentColor"
                        d="M10 2.6a6.38 6.38 0 0 0-4.156 1.533.533.533 0 1 0 .692.81A5.3 5.3 0 0 1 10 3.668c2.771 0 5.04 2.1 5.307 4.8h-1.574l2.134 3.2L18 8.467h-1.627C16.1 5.187 13.348 2.6 10 2.6M4.133 6.333 2 9.533h1.627C3.9 12.813 6.652 15.4 10 15.4a6.38 6.38 0 0 0 4.156-1.533.535.535 0 0 0-.094-.895.53.53 0 0 0-.598.084A5.3 5.3 0 0 1 10 14.333c-2.771 0-5.04-2.1-5.307-4.8h1.574z"
                    />
                </svg>
            </button>
            <div className="text-sm text-tertiary font-medium flex items-center">
                <span>Slippage:</span>
                <span className="ml-1">{slippage}%</span>
            </div>
        </div>
    );
};

RefreshSlippage.propTypes = {
    slippage: PropTypes.number.isRequired,
    onRefresh: PropTypes.func.isRequired,
};

export default RefreshSlippage;
-e 


=========================
File: ./components/SwapCard/index.js
=========================
export { default } from './SwapCard';
-e 


=========================
File: ./components/SwapCard/SwapCard.js
=========================
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { useWallet } from '@solana/wallet-adapter-react';
import TokenSelector from '../TokenSelector/TokenSelector';
import AdvancedSettings from '../AdvancedSettings/AdvancedSettings'; // Import the AdvancedSettings modal
import ConnectButton from '../ConnectButton'; // Import the ConnectButton component

const SwapCard = ({ onSwap }) => {
    const { connected } = useWallet(); // Access wallet connection state
    const [fromToken, setFromToken] = useState({ symbol: 'SOL', image: 'https://via.placeholder.com/40' });
    const [toToken, setToToken] = useState({ symbol: 'USDC', image: 'https://via.placeholder.com/40' });
    const [fromAmount, setFromAmount] = useState('');
    const [toAmount, setToAmount] = useState('');
    const [isTokenSelectorOpen, setIsTokenSelectorOpen] = useState(null);
    const [isSlippageOpen, setIsSlippageOpen] = useState(false); // To handle slippage modal visibility
    const [slippage, setSlippage] = useState(0.5);

    const handleSwap = () => {
        if (!fromAmount || !fromToken || !toToken) {
            alert('Please enter a valid amount and select tokens.');
            return;
        }
        onSwap(fromAmount, fromToken.symbol, toToken.symbol, slippage);
    };

    const handleTokenSelect = (token, type) => {
        const tokenData = {
            symbol: token.metadata?.symbol || token.symbol,
            image: token.metadata?.image || 'https://via.placeholder.com/40',
        };
        if (type === 'from') setFromToken(tokenData);
        if (type === 'to') setToToken(tokenData);
        setIsTokenSelectorOpen(null);
    };

    const handleSlippageChange = (value) => {
        setSlippage(value);
    };

    const openSlippageModal = () => {
        setIsSlippageOpen(true);
    };

    const closeSlippageModal = () => {
        setIsSlippageOpen(false);
    };

    return (
        <div className="flex flex-col w-full md:max-w-md p-6 bg-gradient-to-b from-indigo-900 to-gray-900 rounded-xl shadow-lg border border-blue-900/50 backdrop-blur">
            {/* Swap Header */}
            <div className="flex justify-between items-center text-gray-200">
                <h3 className="text-SM font-semibold text-white">Slippage: {slippage}%</h3>
                <div className="flex items-center gap-2">
                    <button
                        className="p-2 rounded-full hover:bg-indigo-800/70 transition"
                        aria-label="Settings"
                        onClick={openSlippageModal} // Open the AdvancedSettings modal
                    >
                        <svg
                            className="w-6 h-6 text-white"
                            aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 20 20"
                        >
                            <path
                                stroke="currentColor"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth="2"
                                d="M7.75 4H19M7.75 4a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 4h2.25m13.5 6H19m-2.25 0a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 10h11.25m-4.5 6H19M7.75 16a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 16h2.25"
                            />
                        </svg>
                    </button>
                </div>
            </div>

            {/* Input Section */}
            <div className="flex flex-col">
                {/* From Token */}
                <div className="relative flex items-center justify-between p-4 bg-indigo-800 rounded-lg border border-transparent focus-within:border-blue-400">
                    <div className="flex flex-col w-[65%]">
                        <label className="text-sm text-white">Pay</label>
                        <input
                            type="text"
                            value={fromAmount}
                            onChange={(e) => setFromAmount(e.target.value)}
                            placeholder="0.0"
                            className="bg-transparent text-white text-2xl font-semibold focus:outline-none"
                        />
                        <span className="text-sm text-white">$0.00</span>
                    </div>
                    <button
                        className="bg-blue-600 text-white px-4 py-1 rounded-lg text-sm font-medium flex items-center gap-2"
                        onClick={() => setIsTokenSelectorOpen('from')}
                    >
                        <img src={fromToken.image} alt={fromToken.symbol} className="w-6 h-6 rounded-full" />
                        {fromToken.symbol}
                    </button>
                    {isTokenSelectorOpen === 'from' && (
                        <div className="absolute top-full left-0 w-full mt-2">
                            <TokenSelector
                                onSelectToken={(token) => handleTokenSelect(token, 'from')}
                                onClose={() => setIsTokenSelectorOpen(null)}
                            />
                        </div>
                    )}
                </div>

                {/* Swap Icon */}
                <button
                    className="mx-auto p-2 bg-blue-600 rounded-full text-white shadow-lg hover:scale-110 transition z-10"
                    onClick={() => {
                        const temp = fromToken;
                        setFromToken(toToken);
                        setToToken(temp);
                    }}
                >
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 28 24" className="h-6 w-6">
                        <path
                            fill="currentColor"
                            d="M18.347 18.384q.32 0 .535-.216a.73.73 0 0 0 .215-.534V8.103l2.317 2.317a.68.68 0 0 0 .508.208.767.767 0 0 0 .77-.752.74.74 0 0 0-.233-.535l-3.47-3.469a.8.8 0 0 0-.297-.198 1 1 0 0 0-.678 0 .8.8 0 0 0-.3.198L14.22 9.366a.7.7 0 0 0-.22.518q.003.294.236.528.232.216.526.223a.7.7 0 0 0 .527-.225l2.308-2.307v9.54q0 .315.216.528a.73.73 0 0 0 .534.213m-8.702 0a1 1 0 0 0 .34-.059.8.8 0 0 0 .3-.197l3.495-3.495a.7.7 0 0 0 .22-.517.74.74 0 0 0-.236-.529.8.8 0 0 0-.527-.223.7.7 0 0 0-.527.225l-2.307 2.308v-9.54a.731.731 0 0 0-.75-.74.73.73 0 0 0-.535.215.73.73 0 0 0-.215.534v9.531L6.585 13.58a.68.68 0 0 0-.507-.208.767.767 0 0 0-.77.752q0 .302.233.534l3.47 3.47q.14.14.297.198a1 1 0 0 0 .337.058"
                        />
                    </svg>
                </button>

                {/* To Token */}
                <div className="relative flex items-center justify-between p-4 bg-indigo-800 rounded-lg border border-transparent focus-within:border-blue-400">
                    <div className="flex flex-col w-[65%]">
                        <label className="text-sm text-white">Receive</label>
                        <input
                            type="text"
                            value={toAmount}
                            onChange={(e) => setToAmount(e.target.value)}
                            placeholder="0.0"
                            className="bg-transparent text-white text-2xl font-semibold focus:outline-none"
                        />
                        <span className="text-sm text-white">$0.00</span>
                    </div>
                    <button
                        className="bg-blue-600 text-white px-4 py-1 rounded-lg text-sm font-medium flex items-center gap-2"
                        onClick={() => setIsTokenSelectorOpen('to')}
                    >
                        <img src={toToken.image} alt={toToken.symbol} className="w-6 h-6 rounded-full" />
                        {toToken.symbol}
                    </button>
                    {isTokenSelectorOpen === 'to' && (
                        <div className="absolute top-full left-0 w-full mt-2 z-10">
                            <TokenSelector
                                onSelectToken={(token) => handleTokenSelect(token, 'to')}
                                onClose={() => setIsTokenSelectorOpen(null)}
                            />
                        </div>
                    )}
                </div>
            </div>

            {/* Connect or Swap Button Section */}
            <div
                className="w-full flex justify-center items-center"
                style={{ minHeight: '72px' }} // Fixed height ensures consistent placement
            >
                {connected ? (
                    <button
                        onClick={handleSwap}
                        className="w-full py-3 bg-gradient-to-b from-blue-500 to-blue-700 text-white font-bold rounded-lg hover:brightness-110 transition"
                    >
                        Swap Now
                    </button>
                ) : (
                    <ConnectButton />
                )}
            </div>

            {/* Show the AdvancedSettings modal */}
            {isSlippageOpen && (
                <AdvancedSettings
                    slippage={slippage}
                    onUpdateSlippage={handleSlippageChange}
                    onClose={closeSlippageModal}
                />
            )}
        </div>
    );
};

SwapCard.propTypes = {
    onSwap: PropTypes.func.isRequired,
};

export default SwapCard;
-e 


=========================
File: ./components/TokenSelector/LazyTokenList.js
=========================
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import TokenRow from './TokenRow';

const PAGE_SIZE = 20; // Number of tokens to load per page


const LazyTokenList = ({ onSelectToken, onClose }) => {
    const [tokens, setTokens] = useState([]);
    const [displayedTokens, setDisplayedTokens] = useState([]);
    const [hasMore, setHasMore] = useState(true);
    const [isLoading, setIsLoading] = useState(false);
    const [page, setPage] = useState(0);

    useEffect(() => {
        fetch('/tokens_dummy_data.json')
            .then((response) => response.json())
            .then((data) => {
                setTokens(data.data);
                setDisplayedTokens(data.data.slice(0, PAGE_SIZE));
            })
            .catch((error) => console.error('Failed to load tokens:', error));

        const handleScroll = () => {
            const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
            const scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;
            const clientHeight = document.documentElement.clientHeight || window.innerHeight;

            if (scrollHeight - scrollTop - clientHeight < 50 && hasMore && !isLoading) {
                loadMoreTokens();
            }
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, [hasMore, isLoading]);

    const loadMoreTokens = () => {
        if (isLoading || !hasMore) return;

        setIsLoading(true);

        setTimeout(() => {
            const start = page * PAGE_SIZE;
            const end = start + PAGE_SIZE;
            const nextBatch = tokens.slice(start, end);

            if (nextBatch.length > 0) {
                setDisplayedTokens((prev) => [...prev, ...nextBatch]);
                setPage((prev) => prev + 1);
            } else {
                setHasMore(false);
            }
            setIsLoading(false);
        }, 500);
    };

    return (
        <div className="w-full max-w-2xl mx-auto">
            <ul className="divide-y divide-gray-700">
                {displayedTokens.map((token) => (
                    <TokenRow key={token.address} token={token} onSelect={onSelectToken} isLoading={isLoading} />
                ))}
            </ul>
            {isLoading && (
                <div className="text-center mt-4 text-gray-400 text-sm">Loading...</div>
            )}
            {!hasMore && (
                <div className="text-center mt-4 text-gray-400 text-sm">No more tokens to load.</div>
            )}
        </div>
    );
};


LazyTokenList.propTypes = {
    onSelectToken: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
};

export default LazyTokenList;
-e 


=========================
File: ./components/TokenSelector/TokenRow.js
=========================
import React from 'react';
import PropTypes from 'prop-types';

const TokenRow = ({ token, onSelect, isLoading }) => (
    <li
        className={`flex items-center justify-between px-4 py-3 hover:bg-gray-800 cursor-pointer ${isLoading ? 'loading' : ''}`}
        onClick={() => onSelect(token)}
    >
        {/* Token Info */}
        <div className="flex items-center gap-3">
            <img
                src={token.metadata?.image || 'https://via.placeholder.com/40'}
                alt={token.metadata?.symbol || 'Token'}
                className="w-8 h-8 rounded-full"
            />
            <div className="flex flex-col">
                <span className="text-sm font-medium text-white">{token.metadata?.symbol}</span>
                <span className="text-xs text-gray-400">{token.metadata?.name}</span>
            </div>
        </div>

        {/* Token Address */}
        <div className="flex items-center gap-2">
            <span className="text-xs font-mono text-gray-500">
                {token.address.slice(0, 6)}...{token.address.slice(-4)}
            </span>
            <a
                href={`https://solscan.io/token/${token.address}`}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-500 hover:text-blue-300 text-xs"
                onClick={(e) => e.stopPropagation()} // Prevent modal closure
            >
                View
            </a>
        </div>
    </li>
);

TokenRow.propTypes = {
    token: PropTypes.shape({
        metadata: PropTypes.shape({
            image: PropTypes.string,
            symbol: PropTypes.string,
            name: PropTypes.string,
        }),
        address: PropTypes.string.isRequired,
    }).isRequired,
    onSelect: PropTypes.func.isRequired,
    isLoading: PropTypes.bool.isRequired,  // Add the loading state as a prop
};

export default TokenRow;
-e 


=========================
File: ./components/TokenSelector/TokenSelector.js
=========================
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import LazyTokenList from './LazyTokenList';
import { useModal } from '../../context/ModalContext'; // Import the modal context

const TokenSelector = ({ onSelectToken }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const [filteredTokens, setFilteredTokens] = useState([]);
    const [lazyLoadedTokens, setLazyLoadedTokens] = useState([]); // Tokens loaded lazily
    const { showModal, closeModal } = useModal(); // Access modal functions from the context

    useEffect(() => {
        // Open the global modal with the TokenSelector content
        showModal(
            'Select a Token',
            renderModalContent(),
            null, // No footer required
            {
                fixedHeader: true,
                scrollableContent: true,
                modalWidth: '40%',
                modalHeight: '70%',
                showCloseButton: true,
            }
        );

        // Close the modal when the component unmounts
        return closeModal;
    }, []); // Run only once when the component is mounted

    const handleInputChange = (e) => {
        const value = e.target.value.trim().toLowerCase();
        setSearchTerm(value);

        if (value === '') {
            setFilteredTokens(lazyLoadedTokens);
        } else {
            const filtered = lazyLoadedTokens.filter(
                (token) =>
                    token.metadata?.symbol?.toLowerCase().includes(value) ||
                    token.metadata?.name?.toLowerCase().includes(value) ||
                    token.address?.toLowerCase().includes(value)
            );
            setFilteredTokens(filtered);
        }
    };

    const handleTokensLoad = (tokens) => {
        setLazyLoadedTokens(tokens);
        setFilteredTokens(tokens);
    };

    const handleLazyLoad = (newTokens) => {
        const updatedTokens = [...lazyLoadedTokens, ...newTokens];
        setLazyLoadedTokens(updatedTokens);

        if (searchTerm.trim() === '') {
            setFilteredTokens(updatedTokens);
        } else {
            const filtered = updatedTokens.filter(
                (token) =>
                    token.metadata?.symbol?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    token.metadata?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    token.address?.toLowerCase().includes(searchTerm.toLowerCase())
            );
            setFilteredTokens(filtered);
        }
    };

    const handleTokenSelect = (token) => {
        onSelectToken(token);
        closeModal();
    };

    const renderModalContent = () => (
        <div className="flex flex-col h-full">
            {/* Search Section */}
            <div
                className="sticky top-0 z-10 px-6 py-4 border-b shadow-md rounded-lg"
                style={{
                    backgroundColor: 'rgba(255, 255, 255, 0.5)',
                    borderColor: 'rgba(0, 0, 0, 0.3)',
                }}
            >
                <div
                    className="flex items-center border px-3 rounded-md"
                    style={{
                        borderColor: 'black',
                        backgroundColor: 'rgba(255, 255, 255, 0.8)',
                    }}
                >
                    <svg
                        aria-hidden="true"
                        focusable="false"
                        className="mr-2 h-4 w-4 shrink-0 pointer-events-none"
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="black"
                    >
                        <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z" />
                    </svg>
                    <input
                        className="flex h-10 w-full bg-transparent py-3 outline-none placeholder:text-black text-black"
                        placeholder="Search tokens, name, or address"
                        value={searchTerm}
                        onChange={handleInputChange}
                        role="combobox"
                        aria-expanded="true"
                        tabIndex="0"
                    />
                </div>
            </div>

            {/* Token List Section */}
            <div className="flex-1 overflow-y-auto px-6 py-4">
                {searchTerm ? (
                    <ul className="divide-y divide-gray-300">
                        {filteredTokens.map((token) => (
                            <li
                                key={token.address}
                                className="flex items-center justify-between px-4 py-2 hover:bg-gray-100 cursor-pointer"
                                style={{
                                    backgroundColor: 'rgba(0, 0, 0, 0.05)',
                                }}
                                onClick={() => handleTokenSelect(token)}
                            >
                                <div className="flex items-center gap-3">
                                    <img
                                        src={token.metadata?.image || 'https://via.placeholder.com/40'}
                                        alt={token.metadata?.symbol || 'Token'}
                                        className="w-6 h-6 rounded-full"
                                    />
                                    <div>
                                        <span className="block text-sm font-medium text-black">
                                            {token.metadata?.symbol}
                                        </span>
                                        <span className="block text-xs text-black/60">
                                            {token.metadata?.name}
                                        </span>
                                    </div>
                                </div>
                                <span className="text-xs font-mono text-black/80">
                                    {token.address.slice(0, 6)}...{token.address.slice(-4)}
                                </span>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <LazyTokenList
                        onSelectToken={handleTokenSelect}
                        onTokensLoad={handleTokensLoad}
                        onLazyLoad={handleLazyLoad}
                        onClose={closeModal} // Pass the onClose function from context
                    />
                )}
            </div>
        </div>
    );

    return null; // The component does not render anything directly; it uses the global modal.
};

TokenSelector.propTypes = {
    onSelectToken: PropTypes.func.isRequired,
};

export default TokenSelector;
-e 


=========================
File: ./components/WalletProvider.js
=========================
import React, { FC, useMemo } from 'react';
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';
import {
    PhantomWalletAdapter,
    SolflareWalletAdapter,
} from '@solana/wallet-adapter-wallets';
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
import { clusterApiUrl } from '@solana/web3.js';

// Import default styles for Wallet Adapter
import '@solana/wallet-adapter-react-ui/styles.css';

const WalletConnectionProvider: FC = ({ children }) => {
    // Set the network to Devnet
    const network = WalletAdapterNetwork.Devnet;

    // Use a cluster API URL for the selected network
    const endpoint = useMemo(() => clusterApiUrl(network), [network]);

    // Configure wallet adapters
    const wallets = useMemo(
        () => [
            new PhantomWalletAdapter(),
            new SolflareWalletAdapter(),
        ],
        [network]
    );

    return (
        <ConnectionProvider endpoint={endpoint}>
            <WalletProvider wallets={wallets} autoConnect>
                <WalletModalProvider>
                    {children}
                </WalletModalProvider>
            </WalletProvider>
        </ConnectionProvider>
    );
};

export default WalletConnectionProvider;
-e 


=========================
File: ./context/ModalContext.js
=========================

// ./context/ModalContext.js
import React, { createContext, useState, useContext } from 'react';
import GlobalModal from '../components/Global/GlobalModal';

const ModalContext = createContext();

export const useModal = () => useContext(ModalContext);

export const ModalProvider = ({ children }) => {
    const [modalState, setModalState] = useState({
        isVisible: false,
        title: '',
        content: '',
        footer: null,
        options: {},
    });

    const showModal = (title, content, footer = null, options = {}) => {
        setModalState({
            isVisible: true,
            title,
            content,
            footer,
            options,
        });
    };

    const closeModal = () => {
        setModalState({
            isVisible: false,
            title: '',
            content: '',
            footer: null,
            options: {},
        });
    };

    return (
        <ModalContext.Provider value={{ showModal, closeModal }}>
            {children}
            <GlobalModal
                isVisible={modalState.isVisible}
                title={modalState.title}
                content={modalState.content}
                footer={modalState.footer}
                onClose={closeModal}
                options={modalState.options}
            />
        </ModalContext.Provider>
    );
};
-e 


=========================
File: ./context/NotificationContext.js
=========================
// ./context/NotificationContext.js
import React, { createContext, useContext, useState } from 'react';
import NotificationBanner from '../components/Global/NotificationBanner';

const NotificationContext = createContext();

export const useNotification = () => useContext(NotificationContext);

export const NotificationProvider = ({ children }) => {
    const [notification, setNotification] = useState(null);

    const showNotification = (message, type = 'default', duration = 3000) => {
        setNotification({ message, type });
        if (duration > 0) {
            setTimeout(() => setNotification(null), duration);
        }
    };

    const closeNotification = () => setNotification(null);

    return (
        <NotificationContext.Provider value={{ showNotification }}>
            {children}
            {notification && (
                <NotificationBanner
                    message={notification.message}
                    type={notification.type}
                    onClose={closeNotification}
                />
            )}
        </NotificationContext.Provider>
    );
};
-e 


=========================
File: ./index.css
=========================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
-e 


=========================
File: ./index.js
=========================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import '@solana/wallet-adapter-react-ui/styles.css';
import { ModalProvider } from './context/ModalContext';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <ModalProvider>
        <App />
    </ModalProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
-e 


=========================
File: ./reportWebVitals.js
=========================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
-e 


=========================
File: ./setupTests.js
=========================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
-e 


=========================
File: ./utils/poolInteraction.js
=========================
import { Connection, PublicKey } from '@solana/web3.js';
import { Program, Provider } from '@project-serum/anchor';

const connection = new Connection('https://api.devnet.solana.com');
const provider = new Provider(connection, window.solana, 'processed');
const programId = new PublicKey('5dctRN4vE4AFJY6VrT2cMj8sTvSwMnDwuJEwvTD7HWjW'); // Replace with your program ID

export const getPools = async () => {
    const pools = await program.account.pool.all();
    return pools.map(({ account }) => ({
        address: account.pubkey.toString(),
        tokenA: account.tokenA.toString(),
        tokenB: account.tokenB.toString(),
        reserveA: account.reserveA,
        reserveB: account.reserveB,
    }));
};

export const addLiquidity = async (poolAddress, amountA, amountB) => {
    await program.rpc.addLiquidity(new PublicKey(poolAddress), amountA, amountB, {
        accounts: {
            // Add appropriate accounts here based on your Solana program structure
        },
    });
};
-e 



--- File: ./src/logo.svg ---

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
--- File: ./src/reportWebVitals.js ---

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

--- File: ./src/run.sh ---

#!/bin/bash

# Define the folder to search and the output file
TARGET_FOLDER="./" # Replace with your desired folder path
OUTPUT_FILE="js_css_files_with_content.txt"

# Check if the output file already exists, if so, remove it
if [ -f "$OUTPUT_FILE" ]; then
    rm "$OUTPUT_FILE"
fi

# Check if the target folder exists
if [ ! -d "$TARGET_FOLDER" ]; then
    echo "The folder '$TARGET_FOLDER' does not exist."
    exit 1
fi

# Search for .js and .css files in the target folder and process them
find "$TARGET_FOLDER" -type f \( -name "*.js" -o -name "*.css" \) | while read -r file; do
    echo "=========================" >> "$OUTPUT_FILE"
    echo "File: $file" >> "$OUTPUT_FILE"
    echo "=========================" >> "$OUTPUT_FILE"
    cat "$file" >> "$OUTPUT_FILE"
    echo -e "\n\n" >> "$OUTPUT_FILE"
done

echo "JavaScript and CSS file contents have been saved in $OUTPUT_FILE"

--- File: ./src/setupTests.js ---

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

--- File: ./src/utils/anchorProvider.js ---

import { Connection, PublicKey } from "@solana/web3.js";
import { AnchorProvider } from "@coral-xyz/anchor";
import { SOLANA_RPC_ENDPOINT } from "./config";
import { useAnchorWallet } from "@solana/wallet-adapter-react";

export function useAnchorProvider() {
  const wallet = useAnchorWallet();
  const connection = new Connection(SOLANA_RPC_ENDPOINT, "confirmed");

  const provider = wallet
    ? new AnchorProvider(connection, wallet, { preflightCommitment: "processed" })
    : null;

  return provider;
}

--- File: ./src/utils/config.js ---

import idl from "./idl/solana_amm.json";


export const SOLANA_RPC_ENDPOINT = process.env.REACT_APP_SOLANA_RPC_ENDPOINT || "https://api.devnet.solana.com";
export const SOLANA_PROGRAM_ID = idl.metadata.address; // from your deployed IDL metadata

--- File: ./src/utils/idl/solana_amm.json ---

{
  "version": "0.1.0",
  "name": "solana_amm",
  "instructions": [
    {
      "name": "initializePlatformState",
      "docs": [
        "Initialise the global platform state, storing the governance authority.",
        "The platform token mint will be recorded here after it is created."
      ],
      "accounts": [
        {
          "name": "platformState",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "admin",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "governanceAuthority",
          "type": "publicKey"
        }
      ]
    },
    {
      "name": "initializePlatformToken",
      "docs": [
        "Create the platform's native token (PTK).",
        "",
        "Requirements:",
        "- The caller must be the governance authority recorded in `PlatformState`.",
        "",
        "The mint authority and decimals are set using the `#[account]` macro. In this case,",
        "`mint::authority = authority` and `mint::decimals = 9` are specified at creation time."
      ],
      "accounts": [
        {
          "name": "platformState",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "platformMint",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "mintPlatformTokens",
      "docs": [
        "Mint new platform tokens into a given token account.",
        "",
        "Requirements:",
        "- Must be signed by the governance authority.",
        "- The destination account must be associated with the platform token mint."
      ],
      "accounts": [
        {
          "name": "platformState",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "platformMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "destinationAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "initializePool",
      "docs": [
        "Initialise a new liquidity pool for token_a and token_b.",
        "",
        "This code is unchanged from your original code except for integrating into the",
        "single file. The LP token mint is created and initial LP tokens are minted to the user."
      ],
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "lpMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userLpAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "tokenA",
          "type": "publicKey"
        },
        {
          "name": "tokenB",
          "type": "publicKey"
        },
        {
          "name": "initialAmountA",
          "type": "u64"
        },
        {
          "name": "initialAmountB",
          "type": "u64"
        },
        {
          "name": "feePercentage",
          "type": "u16"
        },
        {
          "name": "adminFeePercentage",
          "type": "u16"
        },
        {
          "name": "poolName",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "poolDescription",
          "type": {
            "array": [
              "u8",
              128
            ]
          }
        }
      ]
    },
    {
      "name": "addLiquidity",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "lpMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userLpAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountA",
          "type": "u64"
        },
        {
          "name": "amountB",
          "type": "u64"
        }
      ]
    },
    {
      "name": "removeLiquidity",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "lpMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userLpAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenA",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenB",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "poolTokenA",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "poolTokenB",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "lpTokenAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "swap",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "inputToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "outputToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userOutputToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minimumOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "initializeUserMint",
      "docs": [
        "Initialise a user-owned token mint with a given name, symbol, and initial supply.",
        "The created tokens are minted into the user's associated token account immediately."
      ],
      "accounts": [
        {
          "name": "userMintData",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userMint",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "name",
          "type": "bytes"
        },
        {
          "name": "symbol",
          "type": "bytes"
        },
        {
          "name": "initialSupply",
          "type": "u64"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "PlatformState",
      "docs": [
        "This account holds the global state for the platform, including the governance authority",
        "and the platform token mint. There should be only one instance of this account per deployment."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "governanceAuthority",
            "type": "publicKey"
          },
          {
            "name": "platformTokenMint",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "Pool",
      "docs": [
        "The pool account that stores AMM state."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "tokenA",
            "type": "publicKey"
          },
          {
            "name": "tokenB",
            "type": "publicKey"
          },
          {
            "name": "reserveA",
            "type": "u64"
          },
          {
            "name": "reserveB",
            "type": "u64"
          },
          {
            "name": "lpMint",
            "type": "publicKey"
          },
          {
            "name": "totalLpTokens",
            "type": "u64"
          },
          {
            "name": "feePercentage",
            "type": "u16"
          },
          {
            "name": "adminFeePercentage",
            "type": "u16"
          },
          {
            "name": "feesCollectedA",
            "type": "u64"
          },
          {
            "name": "feesCollectedB",
            "type": "u64"
          },
          {
            "name": "creationTimestamp",
            "type": "i64"
          },
          {
            "name": "lastUpdatedTimestamp",
            "type": "i64"
          },
          {
            "name": "isVerified",
            "type": "bool"
          },
          {
            "name": "isPaused",
            "type": "bool"
          },
          {
            "name": "poolName",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "poolDescription",
            "type": {
              "array": [
                "u8",
                128
              ]
            }
          }
        ]
      }
    },
    {
      "name": "UserMint",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "creator",
            "type": "publicKey"
          },
          {
            "name": "mintAddress",
            "type": "publicKey"
          },
          {
            "name": "name",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "symbol",
            "type": {
              "array": [
                "u8",
                10
              ]
            }
          },
          {
            "name": "initialSupply",
            "type": "u64"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "InvalidInitialAmount",
      "msg": "Invalid initial token amounts."
    },
    {
      "code": 6001,
      "name": "InvalidLiquidityRatio",
      "msg": "Invalid liquidity ratio."
    },
    {
      "code": 6002,
      "name": "InvalidLiquidityAmount",
      "msg": "Invalid liquidity amount."
    },
    {
      "code": 6003,
      "name": "SlippageExceeded",
      "msg": "Slippage exceeded."
    },
    {
      "code": 6004,
      "name": "PoolPaused",
      "msg": "Pool is currently paused."
    },
    {
      "code": 6005,
      "name": "InvalidPDA",
      "msg": "Invalid PDA."
    },
    {
      "code": 6006,
      "name": "InvalidFeePercentage",
      "msg": "Invalid fee percentage."
    },
    {
      "code": 6007,
      "name": "InvalidSwapAmount",
      "msg": "Invalid swap amount."
    },
    {
      "code": 6008,
      "name": "Unauthorized",
      "msg": "Unauthorised call."
    },
    {
      "code": 6009,
      "name": "InvalidTokenMint",
      "msg": "Invalid token mint."
    },
    {
      "code": 6010,
      "name": "InvalidArgument",
      "msg": "Invalid argument."
    }
  ],
  "metadata": {
    "address": "4XhFa2aZZh8L4ejKA44fy2RNTu1b4JRTChdoCp1VnonN"
  }
}
--- File: ./src/utils/poolInteraction.js ---

import { Connection, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Keypair } from '@solana/web3.js';
import { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, getAssociatedTokenAddress } from '@solana/spl-token';
import { Program, AnchorProvider, BN } from '@project-serum/anchor';
import PoolIDL from './idl/solana_amm.json';

const endpoint = process.env.REACT_APP_MAIN_RPC; // Grab the main RPC directly
const RPC_ENDPOINT = endpoint;
const connection = new Connection(RPC_ENDPOINT, 'confirmed');

/**
 * Fetches or derives the pool PDA (Program Derived Address) based on token pair.
 * This function remains unchanged and returns { pda, bump, exists }.
 */
export const getOrCreatePoolPDA = async (tokenAAddress, tokenBAddress) => {
  console.log('Starting PDA derivation...');
  if (!tokenAAddress || !tokenBAddress) {
    throw new Error('Token addresses cannot be null or undefined.');
  }

  const tokenA = new PublicKey(tokenAAddress);
  const tokenB = new PublicKey(tokenBAddress);
  console.log('Token A:', tokenA.toBase58());
  console.log('Token B:', tokenB.toBase58());

  // Sort tokens using the same logic as the Rust program
  const [sortedTokenA, sortedTokenB] = tokenA < tokenB ? [tokenA, tokenB] : [tokenB, tokenA];
  console.log('Sorted tokens:', sortedTokenA.toBase58(), sortedTokenB.toBase58());

  const programId = new PublicKey(PoolIDL.metadata.address);
  if (!programId) {
    throw new Error('Program ID is undefined in the IDL metadata.');
  }
  console.log(Buffer.from('pool'), sortedTokenA.toBuffer(), sortedTokenB.toBuffer(), programId);
  
  // Derive the old-style PDA using token pair
  const [poolPDA, bump] = await PublicKey.findProgramAddress(
    [Buffer.from('pool'), sortedTokenA.toBuffer(), sortedTokenB.toBuffer()],
    programId
  );
  console.log('Derived Pool PDA:', poolPDA.toBase58());
  console.log('Bump Seed:', bump);

  const accountInfo = await connection.getAccountInfo(poolPDA);
  console.log('Account info retrieved:', accountInfo ? 'Exists' : 'Does not exist');

  return { pda: poolPDA, bump, exists: !!accountInfo };
};

/**
 * Checks if a pool already exists for the given token pair by calling getOrCreatePoolPDA
 * and examining the 'exists' flag it returns.
 */
export const checkPoolExists = async (tokenAAddress, tokenBAddress) => {
  const { pda, exists } = await getOrCreatePoolPDA(tokenAAddress, tokenBAddress);
  return { pda, exists };
};

/**
 * Creates a new pool on the Solana blockchain if it doesn't already exist.
 * This uses the updated logic where `pool` is a normal account (requiring a Keypair),
 * and `lpMint` + `userLpAccount` PDAs are derived from `pool`.
 */
export const createPoolIfNotExists = async (tokenAAddress, tokenBAddress, amountA, amountB, wallet) => {
  try {
    console.log('Initiating pool creation process...');
    console.log('Parameters:', { tokenAAddress, tokenBAddress, amountA, amountB, wallet: wallet.publicKey.toBase58() });

    // Sort tokens so token_a < token_b as required by the program
    let tokenA = new PublicKey(tokenAAddress);
    let tokenB = new PublicKey(tokenBAddress);
    if (tokenB < tokenA) {
      [tokenA, tokenB] = [tokenB, tokenA];
    }

    // Check if pool already exists
    const { pda: oldPda, exists } = await checkPoolExists(tokenA.toBase58(), tokenB.toBase58());
    if (exists) {
      console.log("A pool for this token pair already exists. Cannot create a new one.");
      return null;
    }

    const provider = new AnchorProvider(connection, wallet, AnchorProvider.defaultOptions());
    const programId = PoolIDL.metadata?.address;
    if (!programId) {
      throw new Error('Program ID is undefined in the IDL metadata.');
    }

    const program = new Program(PoolIDL, new PublicKey(programId), provider);

    // Generate a new Keypair for the pool account since it's a normal init account now
    const poolKeypair = Keypair.generate();
    console.log('Generated new pool Keypair:', poolKeypair.publicKey.toBase58());

    // Derive the lpMint PDA from [b"lp_mint", pool.key()]
    const [lpMintPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('lp_mint'), poolKeypair.publicKey.toBuffer()],
      new PublicKey(programId)
    );
    console.log('Derived lpMint PDA:', lpMintPDA.toBase58());

    // Derive the user LP token account (Associated Token Account)
    const userLpAccount = await getAssociatedTokenAddress(lpMintPDA, wallet.publicKey);
    console.log('Derived user LP ATA:', userLpAccount.toBase58());

    console.log('Constructing pool initialization transaction...');
    console.log("initializePool arguments:", {
      tokenA: tokenA.toBase58(),
      tokenB: tokenB.toBase58(),
      amountA,
      amountB,
      feePercentage: 1,
      adminFeePercentage: 1,
      poolName: Buffer.from('Pool Name').slice(0, 32),
      poolDescription: Buffer.from('Pool Description').slice(0, 128)
    });
    
    console.log("Derived PDAs and accounts:", {
      pool: poolKeypair.publicKey.toBase58(),
      lpMint: lpMintPDA.toBase58(),
      userLpAccount: userLpAccount.toBase58(),
      user: wallet.publicKey.toBase58(),
      systemProgram: SystemProgram.programId.toBase58(),
      tokenProgram: TOKEN_PROGRAM_ID.toBase58(),
      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID.toBase58(),
      rent: SYSVAR_RENT_PUBKEY.toBase58()
    });
    const poolNameBuf = Buffer.from("Pool Name".padEnd(32, '\0'));
    const poolDescBuf = Buffer.from("Pool Description".padEnd(128, '\0'));

    const amountAInt = Math.floor(amountA); // must be an integer
    const amountBInt = Math.floor(amountB); // must be an integer

    const tx = await program.methods
      .initializePool(
        tokenA,
        tokenB,
        new BN(amountAInt),
        new BN(amountBInt),
        1,   // fee_percentage u16
        1,   // admin_fee_percentage u16
        poolNameBuf,
        poolDescBuf
      )
      .accounts({
        pool: poolKeypair.publicKey,
        lpMint: lpMintPDA,
        userLpAccount: userLpAccount,
        user: wallet.publicKey,
        systemProgram: SystemProgram.programId,
        tokenProgram: TOKEN_PROGRAM_ID,
        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
        rent: SYSVAR_RENT_PUBKEY,
      })
      .signers([poolKeypair])
      .rpc();



    console.info(`New pool created at ${poolKeypair.publicKey.toBase58()} with transaction ID: ${tx}`);
    return tx;
  } catch (error) {
    console.error('Error during pool creation:', error);
    throw new Error(`Failed to initialize the pool: ${error.message}`);
  }
};

export default {
  getOrCreatePoolPDA,
  checkPoolExists,
  createPoolIfNotExists,
};
