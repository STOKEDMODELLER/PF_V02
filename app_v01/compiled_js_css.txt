---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app ----
---- File: config-overrides.js ----
const webpack = require('webpack');

module.exports = function override(config) {
    config.resolve.fallback = {
        crypto: require.resolve('crypto-browserify'),
        http: require.resolve('stream-http'),
        https: require.resolve('https-browserify'),
        zlib: require.resolve('browserify-zlib'),
        url: require.resolve('url/'),
    };

    config.plugins = (config.plugins || []).concat([
        new webpack.ProvidePlugin({
            process: 'process/browser',
            Buffer: ['buffer', 'Buffer'],
        }),
    ]);

    return config;
};



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src ----
---- File: App.js ----
import React from "react";
import Header from "./components/Header";
import Footer from "./components/Footer";
import SwapComponent from "./components/SwapComponent";
import { ThemeProvider } from "./context/ThemeContext";
import {
  ConnectionProvider,
  WalletProvider,
} from "@solana/wallet-adapter-react";
import { WalletModalProvider, WalletMultiButton } from "@solana/wallet-adapter-react-ui";
import { PhantomWalletAdapter } from "@solana/wallet-adapter-wallets";
import { clusterApiUrl } from "@solana/web3.js";
import "@solana/wallet-adapter-react-ui/styles.css";

function App() {
  const endpoint = clusterApiUrl("mainnet-beta");
  const wallets = [new PhantomWalletAdapter()];

  return (
    <ThemeProvider>
      <ConnectionProvider endpoint={endpoint}>
        <WalletProvider wallets={wallets} autoConnect>
          <WalletModalProvider>
            <div style={{ backgroundColor: "#ffffff", minHeight: "100vh" }}>
              <Header />
              <SwapComponent />
              <Footer />
            </div>
          </WalletModalProvider>
        </WalletProvider>
      </ConnectionProvider>
    </ThemeProvider>
  );
}

export default App;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src ----
---- File: App.test.js ----
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src ----
---- File: index.js ----
import React from "react";
import ReactDOM from "react-dom/client";
import { ConnectionProvider, WalletProvider } from "@solana/wallet-adapter-react";
import { WalletModalProvider } from "@solana/wallet-adapter-react-ui";
import { PhantomWalletAdapter } from "@solana/wallet-adapter-wallets";
import { clusterApiUrl } from "@solana/web3.js";
import App from "./App"; // Your main app component
import "./index.css"; // Your global styles
import "@solana/wallet-adapter-react-ui/styles.css"; // Wallet adapter UI styles

// Configure Solana connection and wallet
const endpoint = clusterApiUrl("mainnet-beta"); // Use "devnet" for testing
const wallets = [new PhantomWalletAdapter()];

const Root = () => {
  return (
    <ConnectionProvider endpoint={endpoint}>
      <WalletProvider wallets={wallets} autoConnect>
        <WalletModalProvider>
          <App />
        </WalletModalProvider>
      </WalletProvider>
    </ConnectionProvider>
  );
};

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <Root />
  </React.StrictMode>
);



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src ----
---- File: reportWebVitals.js ----
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src ----
---- File: setupTests.js ----
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src ----
---- File: App.css ----
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* App.css */
.card {
  background: #282c34;
  color: white;
  padding: 16px;
  border-radius: 8px;
  margin: 16px;
  text-align: center;
}

button {
  background: #4caf50;
  color: white;
  border: none;
  padding: 10px 16px;
  margin-top: 10px;
  cursor: pointer;
  border-radius: 4px;
}

button:hover {
  background: #45a049;
}



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src ----
---- File: index.css ----

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: Banner.js ----
import React from "react";

const Banner = ({ message, type, onClose }) => {
  const bannerStyles = {
    info: { background: "linear-gradient(145deg, #4F46E5, #3A39D9)", color: "#fff" },
    warning: { background: "linear-gradient(145deg, #FFA500, #FF8C00)", color: "#fff" },
    error: { background: "linear-gradient(145deg, #FF6347, #FF4500)", color: "#fff" },
  };

  return (
    <div style={{ ...styles.banner, ...bannerStyles[type] }}>
      <p style={styles.message}>{message}</p>
      <button style={styles.closeButton} onClick={onClose}>
        âœ–
      </button>
    </div>
  );
};

const styles = {
  banner: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    borderRadius: "8px",
    margin: "16px",
    padding: "16px 20px",
    boxShadow: "0px 8px 16px rgba(0, 0, 0, 0.3)", // Add a subtle shadow
    fontFamily: "Arial, sans-serif",
  },
  message: {
    margin: 0,
    fontSize: "1rem",
    fontWeight: "500",
  },
  closeButton: {
    background: "none",
    border: "none",
    color: "#fff",
    fontSize: "1.2rem",
    cursor: "pointer",
    padding: "4px 8px",
    borderRadius: "50%",
    transition: "background 0.3s ease",
  },
  closeButtonHover: {
    background: "rgba(255, 255, 255, 0.2)",
  },
};

export default Banner;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: Card.js ----
// Card.js
import React, { useEffect, useState } from "react";

const Card = ({ connector, hooks, name }) => {
  const { useSelectedAccount, useSelectedChainId, useSelectedIsActive, useSelectedIsActivating } =
    hooks;

  const isActivating = useSelectedIsActivating(connector);
  const isActive = useSelectedIsActive(connector);
  const account = useSelectedAccount(connector);
  const chainId = useSelectedChainId(connector);

  const [connectionStatus, setConnectionStatus] = useState("Disconnected");
  const [error, setError] = useState(null);

  const handleToggleConnect = async () => {
    setError(null);

    if (isActive) {
      if (connector.deactivate) {
        await connector.deactivate();
      } else {
        connector.resetState();
      }
    } else {
      setConnectionStatus("Connecting...");
      connector
        .activate()
        .then(() => setConnectionStatus("Connected"))
        .catch((err) => {
          setError(err);
          setConnectionStatus("Error");
          connector.resetState();
        });
    }
  };

  useEffect(() => {
    setConnectionStatus(isActive ? "Connected" : "Disconnected");
  }, [isActive]);

  return (
    <div className="card">
      <h2>{name.toUpperCase()}</h2>
      <p>Status: {error ? `Error: ${error.message}` : connectionStatus}</p>
      <p>Account: {account || "No account detected"}</p>
      <p>Chain ID: {chainId || "No chain connected"}</p>
      <button onClick={handleToggleConnect}>
        {isActive ? "Disconnect" : "Connect"}
      </button>
    </div>
  );
};

export default Card;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: Content.js ----



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: Footer.js ----
import React from "react";

const Footer = () => {
  return (
    <footer
      style={{
        position: "fixed",
        bottom: 0,
        left: 0,
        width: "100%",
        background: "linear-gradient(135deg, #24243e, #1b1b2d)", // Matching gradient style
        color: "white",
        fontFamily: "Arial, sans-serif",
        textAlign: "center",
        padding: "10px 0",
        boxShadow: "0px -4px 12px rgba(0, 0, 0, 0.5)", // Subtle shadow
        zIndex: 1000,
      }}
    >
      <p style={{ margin: 0, fontSize: "0.9rem" }}>
        &copy; 2024 DeFi Platform. All rights reserved.
      </p>
    </footer>
  );
};

export default Footer;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: Header.js ----
import React, { useState } from "react";
import { useTheme } from "../context/ThemeContext";
import { useWallet } from "@solana/wallet-adapter-react";
import WalletSelectorModal from "./WalletSelector";
import styles from "../styles/Header.module.css";

const Header = () => {
  const { theme } = useTheme(); // Access theme from context
  const { connected, publicKey, disconnect } = useWallet(); // Wallet connection status and methods
  const [isModalOpen, setIsModalOpen] = useState(false); // State to handle wallet selector modal
  const [menuOpen, setMenuOpen] = useState(false); // State to toggle dropdown menu

  const handleDisconnect = async () => {
    try {
      await disconnect();
    } catch (error) {
      console.error("Failed to disconnect wallet:", error);
    }
  };

  return (
    <header className={styles.header}>
      {/* Logo */}
      <h1 className={styles.logo}>DeFi Platform</h1>

      {/* Hamburger Menu */}
      <button
        className={styles.hamburger}
        onClick={() => setMenuOpen((prev) => !prev)}
        aria-label="Toggle Menu"
      >
        <span />
        <span />
        <span />
      </button>

      {/* Dropdown Menu */}
      <nav className={`${styles.menu} ${menuOpen ? styles.menuOpen : ""}`}>
        {connected ? (
          <>
            <button
              className={`${styles.button} ${styles.disconnectButton}`}
              onClick={handleDisconnect}
            >
              Disconnect
            </button>
            <span className={styles.walletAddress}>
              {publicKey?.toBase58().slice(0, 6)}...
              {publicKey?.toBase58().slice(-6)}
            </span>
          </>
        ) : (
          <button
            className={`${styles.button} ${styles.connectButton}`}
            onClick={() => setIsModalOpen(true)}
          >
            Connect Wallet
          </button>
        )}
      </nav>

      {/* Wallet Selector Modal */}
      {isModalOpen && <WalletSelectorModal onClose={() => setIsModalOpen(false)} />}
    </header>
  );
};

export default Header;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: Settings.js ----
import React from "react";
import { useTheme } from "../context/ThemeContext";

const Settings = () => {
  const { theme, setTheme } = useTheme();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setTheme((prev) => ({ ...prev, [name]: value }));
  };

  return (
    <div
      style={{
        padding: "16px",
        borderBottom: "1px solid #ddd",
        backgroundColor: "#ffffff",
      }}
    >
      <h2 style={{ fontSize: "1.25rem", fontWeight: "600" }}>Theme Settings</h2>
      <div style={{ marginTop: "16px" }}>
        <div style={{ marginBottom: "8px" }}>
          <label style={{ display: "block", marginBottom: "4px" }}>
            Background Color
          </label>
          <input
            type="color"
            name="backgroundColor"
            value={theme.backgroundColor}
            onChange={handleChange}
          />
        </div>
        <div style={{ marginBottom: "8px" }}>
          <label style={{ display: "block", marginBottom: "4px" }}>
            Text Color
          </label>
          <input
            type="color"
            name="textColor"
            value={theme.textColor}
            onChange={handleChange}
          />
        </div>
        <div style={{ marginBottom: "8px" }}>
          <label style={{ display: "block", marginBottom: "4px" }}>
            Font Family
          </label>
          <select
            name="fontFamily"
            value={theme.fontFamily}
            onChange={handleChange}
          >
            <option value="Arial, sans-serif">Arial</option>
            <option value="'Courier New', Courier, monospace">Courier New</option>
            <option value="'Times New Roman', Times, serif">
              Times New Roman
            </option>
          </select>
        </div>
      </div>
    </div>
  );
};

export default Settings;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: SwapComponent.js ----
import React, { useState, useEffect } from "react";
import { useTheme } from "../context/ThemeContext";
import TokenDropdown from "./TokenDropdown";

const SwapComponent = () => {
  const { theme } = useTheme();
  const [tokens, setTokens] = useState([]);
  const [inputToken, setInputToken] = useState("bitcoin");
  const [outputToken, setOutputToken] = useState("ethereum");
  const [amount, setAmount] = useState("");

  useEffect(() => {
    const fetchTokens = async () => {
      try {
        const response = await fetch(
          "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=20&page=1"
        );
        const data = await response.json();
        setTokens(data);
      } catch (error) {
        console.error("Error fetching token data:", error);
      }
    };

    fetchTokens();
  }, []);

  const handleSwap = () => {
    console.log(`Swapping ${amount} ${inputToken} to ${outputToken}`);
  };

  const handleSwitchTokens = () => {
    const temp = inputToken;
    setInputToken(outputToken);
    setOutputToken(temp);
  };

  const styles = {
    container: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      minHeight: "10vh",
      padding: "10px 20px", // Reduced top and bottom padding
    },
    card: {
      width: "100%",
      maxWidth: "400px",
      background: "linear-gradient(180deg, rgba(42, 49, 126, 0.25), rgba(28, 35, 115, 0.25))",
      backdropFilter: "blur(8px)",
      borderRadius: "12px",
      padding: "20px",
      boxShadow: "0px 4px 16px rgba(0, 0, 0, 0.2)",
    },
    title: {
      fontSize: "1.8rem",
      fontWeight: "bold",
      textAlign: "center",
      marginBottom: "20px",
      color: "white",
    },
    inputSection: {
      display: "flex",
      gap: "20px",
      padding: "15px", // Adjusted padding for the input sections
      alignItems: "center",
      borderRadius: "10px",
      background: "linear-gradient(to bottom, rgba(9, 12, 52, 0.8), rgba(8, 10, 43, 0.8))",
      boxShadow: "0px 1px 4px rgba(0, 0, 0, 0.2) inset",
      border: "1px solid rgba(110, 133, 247, 0.2)",
      marginBottom: "15px",
    },
    inputDetails: {
      flexGrow: 1,
      display: "flex",
      flexDirection: "column",
      gap: "5px",
    },
    label: {
      fontSize: "0.9rem",
      color: "rgba(255, 255, 255, 0.8)",
    },
    input: {
      background: "transparent",
      border: "none",
      fontSize: "2rem",
      color: "white",
      width: "100%",
    },
    subText: {
      fontSize: "0.85rem",
      color: "rgba(255, 255, 255, 0.6)",
    },
    switchButton: {
      margin: "5px auto", // Reduced vertical margin for the switch button
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: "40px",
      height: "40px",
      background: "linear-gradient(to bottom, #1F277A, #1D2472)",
      borderRadius: "50%",
      color: "white",
      fontSize: "1.5rem",
      cursor: "pointer",
      border: "1px solid rgba(110, 133, 247, 0.5)",
      boxShadow: "0px 4px 16px rgba(0, 0, 0, 0.2)",
    },
    button: {
      marginTop: "15px", // Reduced top margin for the swap button
      padding: "12px",
      width: "100%",
      fontSize: "1rem",
      fontWeight: "bold",
      background: "linear-gradient(to bottom, #6E85F7, #4A60E8)",
      color: "white",
      border: "none",
      borderRadius: "8px",
      cursor: "pointer",
    },
  };
  

  return (
    <div style={styles.container}>
      <div style={styles.card}>
        <h2 style={styles.title}>Swap Tokens</h2>

        {/* Pay Section */}
        <div style={styles.inputSection}>
          <div style={styles.inputDetails}>
            <span style={styles.label}>Pay</span>
            <input
              type="number"
              placeholder="0"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              style={styles.input}
            />
            <span style={styles.subText}>$0.00</span>
          </div>
          <TokenDropdown
            tokens={tokens}
            selectedToken={inputToken}
            onTokenChange={setInputToken}
          />
        </div>

        {/* Switch Button */}
        <div style={styles.switchButton} onClick={handleSwitchTokens}>
          â†•
        </div>

        {/* Receive Section */}
        <div style={styles.inputSection}>
          <div style={styles.inputDetails}>
            <span style={styles.label}>Receive</span>
            <input
              type="text"
              placeholder="0"
              value=""
              readOnly
              style={styles.input}
            />
            <span style={styles.subText}>$0.00</span>
          </div>
          <TokenDropdown
            tokens={tokens}
            selectedToken={outputToken}
            onTokenChange={setOutputToken}
          />
        </div>

        <button
          style={styles.button}
          onClick={handleSwap}
          disabled={!amount || !inputToken || !outputToken}
        >
          Swap
        </button>
      </div>
    </div>
  );
};

export default SwapComponent;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: TokenDropdown.js ----
import React, { useState } from "react";

const TokenDropdown = ({ tokens, selectedToken, onTokenChange }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");

  const styles = {
    tokenDropdown: {
      display: "flex",
      alignItems: "center",
      gap: "10px",
      background: "rgba(28, 35, 115, 0.9)",
      border: "1px solid rgba(110, 133, 247, 0.5)",
      borderRadius: "8px",
      color: "white",
      padding: "5px 10px",
      cursor: "pointer",
    },
    tokenIcon: {
      width: "24px",
      height: "24px",
      borderRadius: "50%",
    },
    modalOverlay: {
      position: "fixed",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      background: "rgba(0, 0, 0, 0.6)",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      zIndex: 1000,
    },
    modal: {
      background: "linear-gradient(180deg, rgba(42, 49, 126, 0.9), rgba(28, 35, 115, 0.9))",
      borderRadius: "12px",
      padding: "20px",
      width: "90%",
      maxWidth: "400px",
      maxHeight: "80vh",
      overflowY: "auto",
      color: "white",
    },
    searchInput: {
      width: "100%",
      padding: "10px",
      borderRadius: "8px",
      border: "1px solid rgba(110, 133, 247, 0.5)",
      marginBottom: "20px",
      background: "rgba(28, 35, 115, 0.8)",
      color: "white",
      fontSize: "1rem",
      outline: "none",
    },
    tokenList: {
      display: "flex",
      flexDirection: "column",
      gap: "10px",
    },
    tokenItem: {
      display: "flex",
      alignItems: "center",
      gap: "10px",
      padding: "10px",
      borderRadius: "8px",
      background: "rgba(28, 35, 115, 0.8)",
      cursor: "pointer",
      transition: "background 0.3s",
    },
    tokenItemHover: {
      background: "rgba(42, 49, 126, 0.8)",
    },
    closeButton: {
      position: "absolute",
      top: "10px",
      right: "10px",
      background: "none",
      border: "none",
      color: "white",
      fontSize: "1.5rem",
      cursor: "pointer",
    },
  };

  const filteredTokens = tokens.filter((token) =>
    token.symbol.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <>
      {/* Token Dropdown Trigger */}
      <div
        style={styles.tokenDropdown}
        onClick={() => setIsModalOpen(true)}
      >
        <img
          src={
            tokens.find((token) => token.id === selectedToken)?.image ||
            "https://via.placeholder.com/24"
          }
          alt={selectedToken}
          style={styles.tokenIcon}
        />
        {selectedToken.toUpperCase()}
      </div>

      {/* Modal */}
      {isModalOpen && (
        <div style={styles.modalOverlay} onClick={() => setIsModalOpen(false)}>
          <div
            style={styles.modal}
            onClick={(e) => e.stopPropagation()}
          >
            <button
              style={styles.closeButton}
              onClick={() => setIsModalOpen(false)}
            >
              &times;
            </button>
            <input
              type="text"
              placeholder="Search tokens..."
              style={styles.searchInput}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <div style={styles.tokenList}>
              {filteredTokens.map((token) => (
                <div
                  key={token.id}
                  style={styles.tokenItem}
                  onClick={() => {
                    onTokenChange(token.id);
                    setIsModalOpen(false);
                  }}
                >
                  <img
                    src={token.image}
                    alt={token.symbol}
                    style={styles.tokenIcon}
                  />
                  {token.symbol.toUpperCase()}
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default TokenDropdown;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: WalletSelector.js ----
import React from "react";
import {
  WalletModalProvider,
  WalletMultiButton,
  WalletDisconnectButton,
} from "@solana/wallet-adapter-react-ui";
import styles from "../styles/WalletSelectorModal.module.css";
import "@solana/wallet-adapter-react-ui/styles.css";

const WalletSelectorModal = ({ onClose }) => {
  return (
    <div className={styles.overlay}>
      <div className={styles.modal}>
        {/* Modal Header */}
        <div className={styles.header}>
          <h2 className={styles.title}>Connect Your Wallet</h2>
          <button
            className={styles.closeButton}
            onClick={onClose}
            aria-label="Close"
          >
            &times;
          </button>
        </div>

        {/* Wallet Actions */}
        <div className={styles.walletActions}>
          <WalletModalProvider>
            <WalletMultiButton className={styles.walletButton} />
            <WalletDisconnectButton className={styles.disconnectButton} />
          </WalletModalProvider>
        </div>

        {/* Footer */}
        <div className={styles.footer}>
          <p>New to crypto wallets?</p>
          <a
            href="https://phantom.app/"
            target="_blank"
            rel="noopener noreferrer"
            className={styles.learnMore}
          >
            Learn More
          </a>
        </div>
      </div>
    </div>
  );
};

export default WalletSelectorModal;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//components ----
---- File: connectors.js ----
// connectors.js
import { initializeConnector } from "@web3-react/core";
import { Phantom } from "web3-react-phantom";

// Initialize the Phantom connector
const [phantom, phantomHooks] = initializeConnector((actions) => new Phantom({ actions }));

// Export the connectors and hooks
const connectors = [[phantom, phantomHooks]];

export default connectors;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//context ----
---- File: SolanaWalletProvider.js ----
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
import { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';
import { clusterApiUrl } from '@solana/web3.js';
import { useMemo } from 'react';
import '@solana/wallet-adapter-react-ui/styles.css';

const SolanaWalletProvider = ({ children }) => {
  const endpoint = useMemo(() => clusterApiUrl('mainnet-beta'), []); // Use mainnet-beta or devnet as needed
  const wallets = useMemo(() => [new PhantomWalletAdapter()], []);

  return (
    <ConnectionProvider endpoint={endpoint}>
      <WalletProvider wallets={wallets} autoConnect>
        <WalletModalProvider>{children}</WalletModalProvider>
      </WalletProvider>
    </ConnectionProvider>
  );
};

export default SolanaWalletProvider;



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//context ----
---- File: ThemeContext.js ----
import React, { createContext, useContext, useState } from "react";

const ThemeContext = createContext(); // Create the context

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState({
    backgroundColor: "#202833",
    textColor: "#ffffff",
    fontFamily: "Arial, sans-serif",
  });

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// Custom hook for consuming the context
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//styles ----
---- File: Banner.css ----
/* Scoped to Banner Component */
.banner-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  border-radius: 4px;
  margin: 10px 0;
}

.banner-info {
  background-color: var(--banner-info-bg, #2196f3);
  color: var(--banner-text, #fff);
}

.banner-warning {
  background-color: var(--banner-warning-bg, #ff9800);
}

.banner-error {
  background-color: var(--banner-error-bg, #f44336);
}

.banner-success {
  background-color: var(--banner-success-bg, #4caf50);
}

.banner-close {
  background: none;
  border: none;
  color: inherit;
  font-size: 16px;
  cursor: pointer;
}



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//styles ----
---- File: Content.module.css ----
/* Center the container */
.container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  padding: 20px;
}

/* Styling for the card */
.card {
  padding: 25px;
  border-radius: 10px;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  max-width: 400px;
  width: 100%;
  text-align: center;
}

/* Title styling */
.title {
  margin-bottom: 20px;
  font-size: 24px;
  font-weight: bold;
}

/* Input group styling */
.inputGroup {
  margin-bottom: 20px;
  text-align: left;
}

/* Label styling */
.label {
  display: block;
  margin-bottom: 8px;
  font-size: 14px;
  font-weight: bold;
}

/* Select dropdown styling */
.select {
  width: 100%;
  padding: 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
  font-size: 14px;
}

/* Input field styling */
.input {
  width: 100%;
  padding: 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
  font-size: 14px;
}

/* Button styling */
.button {
  width: 100%;
  padding: 12px;
  border-radius: 5px;
  border: none;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.button:hover {
  transform: scale(1.02);
  background-color: rgba(255, 255, 255, 0.2);
}



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//styles ----
---- File: Footer.module.css ----
.footer {
    text-align: center;
    padding: 16px;
    background: #1a1a1a;
    color: white;
  }
  


---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//styles ----
---- File: Header.module.css ----
/* General Header Styling */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 20px;
  background: linear-gradient(135deg, #1e293b, #0f172a);
  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.6);
  border-bottom: 1px solid #1e293b;
  color: white;
  font-family: Arial, sans-serif;
  position: relative;
  z-index: 100;
}

/* Logo */
.logo {
  font-size: 1.8rem;
  font-weight: bold;
  background: linear-gradient(145deg, #4ade80, #22c55e);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin: 0;
}

/* Hamburger Menu */
.hamburger {
  background: none;
  border: none;
  display: flex;
  flex-direction: column;
  gap: 4px;
  cursor: pointer;
}

.hamburger span {
  width: 24px;
  height: 3px;
  background: white;
  border-radius: 2px;
  transition: transform 0.3s;
}

/* Dropdown Menu */
.menu {
  position: absolute;
  top: 100%;
  right: 0;
  background: #1e293b;
  border-radius: 8px;
  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.6);
  width: 200px;
  opacity: 0;
  transform: translateY(-10px);
  transition: opacity 0.3s, transform 0.3s;
  pointer-events: none;
}

.menuOpen {
  opacity: 1;
  transform: translateY(0);
  pointer-events: all;
}

.menu button,
.menu span {
  display: block;
  text-align: left;
  padding: 10px 16px;
  width: 100%;
  color: white;
  border: none;
  background: none;
  cursor: pointer;
  font-size: 1rem;
  transition: background 0.2s;
}

.menu button:hover,
.menu span:hover {
  background: rgba(255, 255, 255, 0.1);
}

.menu .walletAddress {
  font-size: 0.85rem;
  font-family: monospace;
}

/* Buttons */
.button {
  padding: 8px 16px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: bold;
  transition: all 0.3s ease;
}

.connectButton {
  background: linear-gradient(145deg, #2563eb, #2563eb);
  color: white;
}

.connectButton:hover {
  background: linear-gradient(145deg, #2563eb, #3b82f6);
  transform: scale(1.05);
}

.disconnectButton {
  background: linear-gradient(145deg, #22c55e, #4ade80);
  color: white;
}

.disconnectButton:hover {
  background: linear-gradient(145deg, #4ade80, #22c55e);
  transform: scale(1.05);
}

/* Responsive Design */
@media (min-width: 768px) {
  .hamburger {
    display: none;
  }

  .menu {
    position: static;
    background: none;
    opacity: 1;
    transform: none;
    display: flex;
    align-items: center;
    gap: 12px;
    pointer-events: all;
  }

  .menu button,
  .menu span {
    background: none;
    text-align: center;
    padding: 0;
  }
}



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//styles ----
---- File: SwapComponent.module.css ----
.container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 20px;
  }
  
  .card {
    width: 100%;
    max-width: 400px;
    background: var(--primary-gradient);
    border-radius: 10px;
    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
    padding: 20px;
  }
  
  .title {
    font-size: 1.8rem;
    font-weight: bold;
    margin-bottom: 20px;
    text-align: center;
  }
  
  .inputGroup {
    margin-bottom: 20px;
  }
  
  .label {
    display: block;
    margin-bottom: 8px;
    font-size: 14px;
    font-weight: bold;
  }
  
  .select,
  .input {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 14px;
  }
  
  .button {
    width: 100%;
    padding: 12px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: transform 0.3s ease, background-color 0.3s ease;
  }
  
  .button:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
  
  .error {
    color: red;
    text-align: center;
  }
  


---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//styles ----
---- File: WalletSelectorModal.module.css ----
/* Overlay Background */
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7); /* Slightly darker for better contrast */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

/* Modal Card */
.modal {
  background: linear-gradient(135deg, #1a202c, #2d3748); /* Elegant dark gradient */
  border-radius: 16px;
  box-shadow: 0px 8px 24px rgba(0, 0, 0, 0.4); /* More pronounced shadow */
  width: 90%;
  max-width: 420px;
  padding: 24px;
  animation: fadeIn 0.3s ease-in-out;
  color: #f0f0f0;
  font-family: "Arial", sans-serif;
}

/* Header */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.title {
  font-size: 22px;
  font-weight: 700;
  margin: 0;
  color: #ffffff;
}

.closeButton {
  background: none;
  border: none;
  color: #ffffff;
  font-size: 28px;
  cursor: pointer;
  transition: transform 0.2s ease, color 0.2s ease;
}

.closeButton:hover {
  transform: scale(1.2);
  color: #e53e3e; /* Subtle red hover effect */
}

/* Wallet Actions */
.walletActions {
  display: flex;
  flex-direction: column;
  gap: 15px;
  align-items: center;
  margin: 20px 0;
}

.walletButton {
  width: 100%;
  max-width: 300px;
  font-size: 16px;
  font-weight: bold;
  padding: 12px;
  border: none;
  border-radius: 8px;
  background: linear-gradient(145deg, #4caf50, #81c784); /* Green gradient for connect */
  color: white;
  cursor: pointer;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.walletButton:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 16px rgba(76, 175, 80, 0.3); /* Hover glow effect */
}

.disconnectButton {
  width: 100%;
  max-width: 300px;
  font-size: 16px;
  font-weight: bold;
  padding: 12px;
  border: none;
  border-radius: 8px;
  background: linear-gradient(145deg, #f44336, #e57373); /* Red gradient for disconnect */
  color: white;
  cursor: pointer;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.disconnectButton:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 16px rgba(244, 67, 54, 0.3); /* Hover glow effect */
}

/* Footer */
.footer {
  text-align: center;
  margin-top: 24px;
}

.footer p {
  margin: 0;
  font-size: 14px;
  color: #a0aec0; /* Muted text colour */
}

.learnMore {
  color: #63b3ed; /* Light blue for learn more link */
  text-decoration: none;
  font-weight: bold;
}

.learnMore:hover {
  text-decoration: underline;
}

/* Fade-in Animation */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}



---- Directory: /mnt/c/Users/921755/OneDrive - Royal HaskoningDHV/Desktop/cripto/solana-amm-v02/app/src//styles ----
---- File: global.css ----
:root {
  /* Global Color Themes */
  --primary-color: #6a00ff;
  --secondary-color: #00d4ff;

  /* Shared Gradients */
  --primary-gradient: linear-gradient(90deg, var(--primary-color), var(--secondary-color));

  /* General Shadows */
  --box-shadow: 0px 4px 12px rgba(0, 212, 255, 0.5);

  /* Header-Specific Variables */
  --header-bg: linear-gradient(135deg, #1e293b, #0f172a);
  --header-logo-gradient: linear-gradient(145deg, #4ade80, #22c55e);

  /* Swap Component Variables */
  --swap-bg: #ffffff;
  --swap-card-bg: #2c2c2c;
  --swap-button-bg: #4caf50;
}



